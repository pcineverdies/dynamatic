module {
  hw.module @jacobi_1d_imper(in %A_loadData : i32, in %B_loadData : i32, in %A_start : !handshake.control<>, in %B_start : !handshake.control<>, in %start : !handshake.control<>, in %clk : i1, in %rst : i1, out out0 : !handshake.channel<i32>, out A_end : !handshake.control<>, out B_end : !handshake.control<>, out end : !handshake.control<>, out A_loadEn : i1, out A_loadAddr : i6, out A_storeEn : i1, out A_storeAddr : i6, out A_storeData : i32, out B_loadEn : i1, out B_loadAddr : i6, out B_storeEn : i1, out B_storeAddr : i6, out B_storeData : i32) {
    %fork0.outs_0, %fork0.outs_1, %fork0.outs_2 = hw.instance "fork0" @handshake_fork_0(ins: %start: !handshake.control<>, clk: %clk: i1, rst: %rst: i1) -> (outs_0: !handshake.control<>, outs_1: !handshake.control<>, outs_2: !handshake.control<>)
    %lsq2.ldData_0, %lsq2.memEnd, %lsq2.loadEn, %lsq2.loadAddr, %lsq2.storeEn, %lsq2.storeAddr, %lsq2.storeData = hw.instance "lsq2" @handshake_lsq_lsq2(loadData: %B_loadData: i32, memStart: %B_start: !handshake.control<>, ctrl_0: %lazy_fork0.outs_0: !handshake.control<>, stAddr_0: %store0.addrOut: !handshake.channel<i6>, stData_0: %store0.dataToMem: !handshake.channel<i32>, ctrl_1: %lazy_fork1.outs_0: !handshake.control<>, ldAddr_0: %load3.addrOut: !handshake.channel<i6>, ctrlEnd: %fork16.outs_1: !handshake.control<>, clk: %clk: i1, rst: %rst: i1) -> (ldData_0: !handshake.channel<i32>, memEnd: !handshake.control<>, loadEn: i1, loadAddr: i6, storeEn: i1, storeAddr: i6, storeData: i32)
    %mem_controller1.ldData_0, %mem_controller1.ldData_1, %mem_controller1.memEnd, %mem_controller1.loadEn, %mem_controller1.loadAddr, %mem_controller1.storeEn, %mem_controller1.storeAddr, %mem_controller1.storeData = hw.instance "mem_controller1" @handshake_mem_controller_0(loadData: %A_loadData: i32, memStart: %A_start: !handshake.control<>, ldAddr_0: %load4.addrOut: !handshake.channel<i6>, ctrl_0: %extsi5.outs: !handshake.channel<i32>, ldAddr_1: %lsq3.ldAddrToMC: !handshake.channel<i6>, stAddr_0: %lsq3.stAddrToMC: !handshake.channel<i6>, stData_0: %lsq3.stDataToMC: !handshake.channel<i32>, ctrlEnd: %fork16.outs_0: !handshake.control<>, clk: %clk: i1, rst: %rst: i1) -> (ldData_0: !handshake.channel<i32>, ldData_1: !handshake.channel<i32>, memEnd: !handshake.control<>, loadEn: i1, loadAddr: i6, storeEn: i1, storeAddr: i6, storeData: i32)
    %lsq3.ldData_0, %lsq3.ldData_1, %lsq3.ldData_2, %lsq3.ldAddrToMC, %lsq3.stAddrToMC, %lsq3.stDataToMC = hw.instance "lsq3" @handshake_lsq_lsq3(ctrl_0: %lazy_fork0.outs_2: !handshake.control<>, ldAddr_0: %load0.addrOut: !handshake.channel<i6>, ldAddr_1: %load1.addrOut: !handshake.channel<i6>, ldAddr_2: %load2.addrOut: !handshake.channel<i6>, ctrl_1: %lazy_fork1.outs_2: !handshake.control<>, stAddr_0: %store1.addrOut: !handshake.channel<i6>, stData_0: %store1.dataToMem: !handshake.channel<i32>, ldDataFromMC: %mem_controller1.ldData_1: !handshake.channel<i32>, clk: %clk: i1, rst: %rst: i1) -> (ldData_0: !handshake.channel<i32>, ldData_1: !handshake.channel<i32>, ldData_2: !handshake.channel<i32>, ldAddrToMC: !handshake.channel<i6>, stAddrToMC: !handshake.channel<i6>, stDataToMC: !handshake.channel<i32>)
    %constant2.outs = hw.instance "constant2" @handshake_constant_0(ctrl: %fork0.outs_0: !handshake.control<>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i1>)
    %extsi13.outs = hw.instance "extsi13" @handshake_extsi_0(ins: %constant2.outs: !handshake.channel<i1>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i2>)
    %mux0.outs = hw.instance "mux0" @handshake_mux_0(index: %control_merge0.index: !handshake.channel<i1>, ins_0: %extsi13.outs: !handshake.channel<i2>, ins_1: %cond_br10.trueOut: !handshake.channel<i2>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i2>)
    %control_merge0.outs, %control_merge0.index = hw.instance "control_merge0" @handshake_control_merge_0(ins_0: %fork0.outs_2: !handshake.control<>, ins_1: %cond_br11.trueOut: !handshake.control<>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.control<>, index: !handshake.channel<i1>)
    %buffer5.outs = hw.instance "buffer5" @handshake_buffer_0(ins: %control_merge0.outs: !handshake.control<>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.control<>)
    %buffer6.outs = hw.instance "buffer6" @handshake_buffer_1(ins: %buffer5.outs: !handshake.control<>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.control<>)
    %fork1.outs_0, %fork1.outs_1 = hw.instance "fork1" @handshake_fork_1(ins: %buffer6.outs: !handshake.control<>, clk: %clk: i1, rst: %rst: i1) -> (outs_0: !handshake.control<>, outs_1: !handshake.control<>)
    %constant4.outs = hw.instance "constant4" @handshake_constant_1(ctrl: %fork1.outs_0: !handshake.control<>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i2>)
    %extsi12.outs = hw.instance "extsi12" @handshake_extsi_1(ins: %constant4.outs: !handshake.channel<i2>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i7>)
    %buffer3.outs = hw.instance "buffer3" @handshake_buffer_2(ins: %mux0.outs: !handshake.channel<i2>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i2>)
    %buffer4.outs = hw.instance "buffer4" @handshake_buffer_3(ins: %buffer3.outs: !handshake.channel<i2>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i2>)
    %mux1.outs = hw.instance "mux1" @handshake_mux_1(index: %fork3.outs_1: !handshake.channel<i1>, ins_0: %extsi12.outs: !handshake.channel<i7>, ins_1: %cond_br3.trueOut: !handshake.channel<i7>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i7>)
    %buffer9.outs = hw.instance "buffer9" @handshake_buffer_4(ins: %mux1.outs: !handshake.channel<i7>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i7>)
    %buffer10.outs = hw.instance "buffer10" @handshake_buffer_5(ins: %buffer9.outs: !handshake.channel<i7>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i7>)
    %fork2.outs_0, %fork2.outs_1, %fork2.outs_2, %fork2.outs_3, %fork2.outs_4 = hw.instance "fork2" @handshake_fork_2(ins: %buffer10.outs: !handshake.channel<i7>, clk: %clk: i1, rst: %rst: i1) -> (outs_0: !handshake.channel<i7>, outs_1: !handshake.channel<i7>, outs_2: !handshake.channel<i7>, outs_3: !handshake.channel<i7>, outs_4: !handshake.channel<i7>)
    %trunci0.outs = hw.instance "trunci0" @handshake_trunci_0(ins: %fork2.outs_0: !handshake.channel<i7>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i6>)
    %trunci1.outs = hw.instance "trunci1" @handshake_trunci_0(ins: %fork2.outs_1: !handshake.channel<i7>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i6>)
    %extsi14.outs = hw.instance "extsi14" @handshake_extsi_2(ins: %fork2.outs_4: !handshake.channel<i7>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i8>)
    %buffer13.outs = hw.instance "buffer13" @handshake_buffer_6(ins: %fork2.outs_2: !handshake.channel<i7>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i7>)
    %trunci2.outs = hw.instance "trunci2" @handshake_trunci_0(ins: %buffer13.outs: !handshake.channel<i7>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i6>)
    %trunci3.outs = hw.instance "trunci3" @handshake_trunci_0(ins: %fork2.outs_3: !handshake.channel<i7>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i6>)
    %mux2.outs = hw.instance "mux2" @handshake_mux_0(index: %fork3.outs_0: !handshake.channel<i1>, ins_0: %buffer4.outs: !handshake.channel<i2>, ins_1: %cond_br4.trueOut: !handshake.channel<i2>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i2>)
    %control_merge1.outs, %control_merge1.index = hw.instance "control_merge1" @handshake_control_merge_0(ins_0: %fork1.outs_1: !handshake.control<>, ins_1: %cond_br5.trueOut: !handshake.control<>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.control<>, index: !handshake.channel<i1>)
    %fork3.outs_0, %fork3.outs_1 = hw.instance "fork3" @handshake_fork_3(ins: %control_merge1.index: !handshake.channel<i1>, clk: %clk: i1, rst: %rst: i1) -> (outs_0: !handshake.channel<i1>, outs_1: !handshake.channel<i1>)
    %buffer18.outs = hw.instance "buffer18" @handshake_buffer_0(ins: %control_merge1.outs: !handshake.control<>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.control<>)
    %buffer19.outs = hw.instance "buffer19" @handshake_buffer_1(ins: %buffer18.outs: !handshake.control<>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.control<>)
    %lazy_fork0.outs_0, %lazy_fork0.outs_1, %lazy_fork0.outs_2, %lazy_fork0.outs_3 = hw.instance "lazy_fork0" @handshake_lazy_fork_0(ins: %buffer19.outs: !handshake.control<>, clk: %clk: i1, rst: %rst: i1) -> (outs_0: !handshake.control<>, outs_1: !handshake.control<>, outs_2: !handshake.control<>, outs_3: !handshake.control<>)
    %buffer23.outs = hw.instance "buffer23" @handshake_buffer_1(ins: %lazy_fork0.outs_3: !handshake.control<>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.control<>)
    %fork4.outs_0 = hw.instance "fork4" @handshake_fork_4(ins: %buffer23.outs: !handshake.control<>, clk: %clk: i1, rst: %rst: i1) -> (outs_0: !handshake.control<>)
    %source0.outs = hw.instance "source0" @handshake_source_0(clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.control<>)
    %constant7.outs = hw.instance "constant7" @handshake_constant_2(ctrl: %source0.outs: !handshake.control<>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i32>)
    %trunci4.outs = hw.instance "trunci4" @handshake_trunci_1(ins: %constant7.outs: !handshake.channel<i32>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i6>)
    %source1.outs = hw.instance "source1" @handshake_source_0(clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.control<>)
    %constant5.outs = hw.instance "constant5" @handshake_constant_3(ctrl: %source1.outs: !handshake.control<>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i7>)
    %extsi15.outs = hw.instance "extsi15" @handshake_extsi_2(ins: %constant5.outs: !handshake.channel<i7>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i8>)
    %constant16.outs = hw.instance "constant16" @handshake_constant_1(ctrl: %fork4.outs_0: !handshake.control<>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i2>)
    %fork5.outs_0, %fork5.outs_1, %fork5.outs_2 = hw.instance "fork5" @handshake_fork_5(ins: %constant16.outs: !handshake.channel<i2>, clk: %clk: i1, rst: %rst: i1) -> (outs_0: !handshake.channel<i2>, outs_1: !handshake.channel<i2>, outs_2: !handshake.channel<i2>)
    %extsi16.outs = hw.instance "extsi16" @handshake_extsi_3(ins: %fork5.outs_0: !handshake.channel<i2>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i6>)
    %extsi17.outs = hw.instance "extsi17" @handshake_extsi_4(ins: %fork5.outs_1: !handshake.channel<i2>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i8>)
    %source2.outs = hw.instance "source2" @handshake_source_0(clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.control<>)
    %constant17.outs = hw.instance "constant17" @handshake_constant_1(ctrl: %source2.outs: !handshake.control<>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i2>)
    %extsi4.outs = hw.instance "extsi4" @handshake_extsi_5(ins: %constant17.outs: !handshake.channel<i2>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i32>)
    %addi2.result = hw.instance "addi2" @handshake_addi_0(lhs: %trunci0.outs: !handshake.channel<i6>, rhs: %trunci4.outs: !handshake.channel<i6>, clk: %clk: i1, rst: %rst: i1) -> (result: !handshake.channel<i6>)
    %load0.addrOut, %load0.dataOut = hw.instance "load0" @handshake_load_0(addrIn: %addi2.result: !handshake.channel<i6>, dataFromMem: %lsq3.ldData_0: !handshake.channel<i32>, clk: %clk: i1, rst: %rst: i1) -> (addrOut: !handshake.channel<i6>, dataOut: !handshake.channel<i32>)
    %load1.addrOut, %load1.dataOut = hw.instance "load1" @handshake_load_0(addrIn: %trunci3.outs: !handshake.channel<i6>, dataFromMem: %lsq3.ldData_1: !handshake.channel<i32>, clk: %clk: i1, rst: %rst: i1) -> (addrOut: !handshake.channel<i6>, dataOut: !handshake.channel<i32>)
    %addi0.result = hw.instance "addi0" @handshake_addi_1(lhs: %load0.dataOut: !handshake.channel<i32>, rhs: %load1.dataOut: !handshake.channel<i32>, clk: %clk: i1, rst: %rst: i1) -> (result: !handshake.channel<i32>)
    %addi3.result = hw.instance "addi3" @handshake_addi_0(lhs: %trunci1.outs: !handshake.channel<i6>, rhs: %extsi16.outs: !handshake.channel<i6>, clk: %clk: i1, rst: %rst: i1) -> (result: !handshake.channel<i6>)
    %load2.addrOut, %load2.dataOut = hw.instance "load2" @handshake_load_0(addrIn: %addi3.result: !handshake.channel<i6>, dataFromMem: %lsq3.ldData_2: !handshake.channel<i32>, clk: %clk: i1, rst: %rst: i1) -> (addrOut: !handshake.channel<i6>, dataOut: !handshake.channel<i32>)
    %addi1.result = hw.instance "addi1" @handshake_addi_1(lhs: %addi0.result: !handshake.channel<i32>, rhs: %load2.dataOut: !handshake.channel<i32>, clk: %clk: i1, rst: %rst: i1) -> (result: !handshake.channel<i32>)
    %fork6.outs_0, %fork6.outs_1 = hw.instance "fork6" @handshake_fork_6(ins: %addi1.result: !handshake.channel<i32>, clk: %clk: i1, rst: %rst: i1) -> (outs_0: !handshake.channel<i32>, outs_1: !handshake.channel<i32>)
    %shli0.result = hw.instance "shli0" @handshake_shli_0(lhs: %fork6.outs_1: !handshake.channel<i32>, rhs: %extsi4.outs: !handshake.channel<i32>, clk: %clk: i1, rst: %rst: i1) -> (result: !handshake.channel<i32>)
    %addi7.result = hw.instance "addi7" @handshake_addi_1(lhs: %fork6.outs_0: !handshake.channel<i32>, rhs: %shli0.result: !handshake.channel<i32>, clk: %clk: i1, rst: %rst: i1) -> (result: !handshake.channel<i32>)
    %store0.addrOut, %store0.dataToMem = hw.instance "store0" @handshake_store_0(addrIn: %trunci2.outs: !handshake.channel<i6>, dataIn: %addi7.result: !handshake.channel<i32>, clk: %clk: i1, rst: %rst: i1) -> (addrOut: !handshake.channel<i6>, dataToMem: !handshake.channel<i32>)
    %addi4.result = hw.instance "addi4" @handshake_addi_2(lhs: %extsi14.outs: !handshake.channel<i8>, rhs: %extsi17.outs: !handshake.channel<i8>, clk: %clk: i1, rst: %rst: i1) -> (result: !handshake.channel<i8>)
    %fork7.outs_0, %fork7.outs_1 = hw.instance "fork7" @handshake_fork_7(ins: %addi4.result: !handshake.channel<i8>, clk: %clk: i1, rst: %rst: i1) -> (outs_0: !handshake.channel<i8>, outs_1: !handshake.channel<i8>)
    %trunci5.outs = hw.instance "trunci5" @handshake_trunci_2(ins: %fork7.outs_0: !handshake.channel<i8>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i7>)
    %cmpi0.result = hw.instance "cmpi0" @handshake_cmpi_0(lhs: %fork7.outs_1: !handshake.channel<i8>, rhs: %extsi15.outs: !handshake.channel<i8>, clk: %clk: i1, rst: %rst: i1) -> (result: !handshake.channel<i1>)
    %fork8.outs_0, %fork8.outs_1, %fork8.outs_2, %fork8.outs_3 = hw.instance "fork8" @handshake_fork_8(ins: %cmpi0.result: !handshake.channel<i1>, clk: %clk: i1, rst: %rst: i1) -> (outs_0: !handshake.channel<i1>, outs_1: !handshake.channel<i1>, outs_2: !handshake.channel<i1>, outs_3: !handshake.channel<i1>)
    %cond_br3.trueOut, %cond_br3.falseOut = hw.instance "cond_br3" @handshake_cond_br_0(condition: %fork8.outs_0: !handshake.channel<i1>, data: %trunci5.outs: !handshake.channel<i7>, clk: %clk: i1, rst: %rst: i1) -> (trueOut: !handshake.channel<i7>, falseOut: !handshake.channel<i7>)
    hw.instance "sink0" @handshake_sink_0(ins: %cond_br3.falseOut: !handshake.channel<i7>, clk: %clk: i1, rst: %rst: i1) -> ()
    %buffer16.outs = hw.instance "buffer16" @handshake_buffer_2(ins: %mux2.outs: !handshake.channel<i2>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i2>)
    %buffer17.outs = hw.instance "buffer17" @handshake_buffer_3(ins: %buffer16.outs: !handshake.channel<i2>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i2>)
    %cond_br4.trueOut, %cond_br4.falseOut = hw.instance "cond_br4" @handshake_cond_br_1(condition: %fork8.outs_1: !handshake.channel<i1>, data: %buffer17.outs: !handshake.channel<i2>, clk: %clk: i1, rst: %rst: i1) -> (trueOut: !handshake.channel<i2>, falseOut: !handshake.channel<i2>)
    %buffer22.outs = hw.instance "buffer22" @handshake_buffer_0(ins: %lazy_fork0.outs_1: !handshake.control<>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.control<>)
    %cond_br5.trueOut, %cond_br5.falseOut = hw.instance "cond_br5" @handshake_cond_br_2(condition: %fork8.outs_2: !handshake.channel<i1>, data: %buffer22.outs: !handshake.control<>, clk: %clk: i1, rst: %rst: i1) -> (trueOut: !handshake.control<>, falseOut: !handshake.control<>)
    %cond_br6.trueOut, %cond_br6.falseOut = hw.instance "cond_br6" @handshake_cond_br_1(condition: %fork8.outs_3: !handshake.channel<i1>, data: %fork5.outs_2: !handshake.channel<i2>, clk: %clk: i1, rst: %rst: i1) -> (trueOut: !handshake.channel<i2>, falseOut: !handshake.channel<i2>)
    hw.instance "sink1" @handshake_sink_1(ins: %cond_br6.trueOut: !handshake.channel<i2>, clk: %clk: i1, rst: %rst: i1) -> ()
    %extsi11.outs = hw.instance "extsi11" @handshake_extsi_1(ins: %cond_br6.falseOut: !handshake.channel<i2>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i7>)
    %mux3.outs = hw.instance "mux3" @handshake_mux_1(index: %fork10.outs_1: !handshake.channel<i1>, ins_0: %extsi11.outs: !handshake.channel<i7>, ins_1: %cond_br7.trueOut: !handshake.channel<i7>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i7>)
    %buffer36.outs = hw.instance "buffer36" @handshake_buffer_4(ins: %mux3.outs: !handshake.channel<i7>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i7>)
    %buffer37.outs = hw.instance "buffer37" @handshake_buffer_5(ins: %buffer36.outs: !handshake.channel<i7>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i7>)
    %fork9.outs_0, %fork9.outs_1, %fork9.outs_2 = hw.instance "fork9" @handshake_fork_9(ins: %buffer37.outs: !handshake.channel<i7>, clk: %clk: i1, rst: %rst: i1) -> (outs_0: !handshake.channel<i7>, outs_1: !handshake.channel<i7>, outs_2: !handshake.channel<i7>)
    %extsi18.outs = hw.instance "extsi18" @handshake_extsi_2(ins: %fork9.outs_2: !handshake.channel<i7>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i8>)
    %buffer38.outs = hw.instance "buffer38" @handshake_buffer_6(ins: %fork9.outs_0: !handshake.channel<i7>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i7>)
    %trunci6.outs = hw.instance "trunci6" @handshake_trunci_0(ins: %buffer38.outs: !handshake.channel<i7>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i6>)
    %trunci7.outs = hw.instance "trunci7" @handshake_trunci_0(ins: %fork9.outs_1: !handshake.channel<i7>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i6>)
    %mux4.outs = hw.instance "mux4" @handshake_mux_0(index: %fork10.outs_0: !handshake.channel<i1>, ins_0: %cond_br4.falseOut: !handshake.channel<i2>, ins_1: %cond_br8.trueOut: !handshake.channel<i2>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i2>)
    %control_merge2.outs, %control_merge2.index = hw.instance "control_merge2" @handshake_control_merge_0(ins_0: %cond_br5.falseOut: !handshake.control<>, ins_1: %cond_br9.trueOut: !handshake.control<>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.control<>, index: !handshake.channel<i1>)
    %fork10.outs_0, %fork10.outs_1 = hw.instance "fork10" @handshake_fork_3(ins: %control_merge2.index: !handshake.channel<i1>, clk: %clk: i1, rst: %rst: i1) -> (outs_0: !handshake.channel<i1>, outs_1: !handshake.channel<i1>)
    %buffer43.outs = hw.instance "buffer43" @handshake_buffer_0(ins: %control_merge2.outs: !handshake.control<>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.control<>)
    %buffer44.outs = hw.instance "buffer44" @handshake_buffer_1(ins: %buffer43.outs: !handshake.control<>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.control<>)
    %lazy_fork1.outs_0, %lazy_fork1.outs_1, %lazy_fork1.outs_2, %lazy_fork1.outs_3 = hw.instance "lazy_fork1" @handshake_lazy_fork_0(ins: %buffer44.outs: !handshake.control<>, clk: %clk: i1, rst: %rst: i1) -> (outs_0: !handshake.control<>, outs_1: !handshake.control<>, outs_2: !handshake.control<>, outs_3: !handshake.control<>)
    %buffer48.outs = hw.instance "buffer48" @handshake_buffer_1(ins: %lazy_fork1.outs_3: !handshake.control<>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.control<>)
    %fork11.outs_0 = hw.instance "fork11" @handshake_fork_4(ins: %buffer48.outs: !handshake.control<>, clk: %clk: i1, rst: %rst: i1) -> (outs_0: !handshake.control<>)
    %constant18.outs = hw.instance "constant18" @handshake_constant_1(ctrl: %fork11.outs_0: !handshake.control<>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i2>)
    %extsi5.outs = hw.instance "extsi5" @handshake_extsi_5(ins: %constant18.outs: !handshake.channel<i2>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i32>)
    %source3.outs = hw.instance "source3" @handshake_source_0(clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.control<>)
    %constant19.outs = hw.instance "constant19" @handshake_constant_3(ctrl: %source3.outs: !handshake.control<>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i7>)
    %extsi19.outs = hw.instance "extsi19" @handshake_extsi_2(ins: %constant19.outs: !handshake.channel<i7>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i8>)
    %source4.outs = hw.instance "source4" @handshake_source_0(clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.control<>)
    %constant20.outs = hw.instance "constant20" @handshake_constant_1(ctrl: %source4.outs: !handshake.control<>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i2>)
    %extsi20.outs = hw.instance "extsi20" @handshake_extsi_4(ins: %constant20.outs: !handshake.channel<i2>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i8>)
    %load3.addrOut, %load3.dataOut = hw.instance "load3" @handshake_load_0(addrIn: %trunci7.outs: !handshake.channel<i6>, dataFromMem: %lsq2.ldData_0: !handshake.channel<i32>, clk: %clk: i1, rst: %rst: i1) -> (addrOut: !handshake.channel<i6>, dataOut: !handshake.channel<i32>)
    %store1.addrOut, %store1.dataToMem = hw.instance "store1" @handshake_store_0(addrIn: %trunci6.outs: !handshake.channel<i6>, dataIn: %load3.dataOut: !handshake.channel<i32>, clk: %clk: i1, rst: %rst: i1) -> (addrOut: !handshake.channel<i6>, dataToMem: !handshake.channel<i32>)
    %addi5.result = hw.instance "addi5" @handshake_addi_2(lhs: %extsi18.outs: !handshake.channel<i8>, rhs: %extsi20.outs: !handshake.channel<i8>, clk: %clk: i1, rst: %rst: i1) -> (result: !handshake.channel<i8>)
    %fork12.outs_0, %fork12.outs_1 = hw.instance "fork12" @handshake_fork_7(ins: %addi5.result: !handshake.channel<i8>, clk: %clk: i1, rst: %rst: i1) -> (outs_0: !handshake.channel<i8>, outs_1: !handshake.channel<i8>)
    %trunci8.outs = hw.instance "trunci8" @handshake_trunci_2(ins: %fork12.outs_0: !handshake.channel<i8>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i7>)
    %cmpi1.result = hw.instance "cmpi1" @handshake_cmpi_0(lhs: %fork12.outs_1: !handshake.channel<i8>, rhs: %extsi19.outs: !handshake.channel<i8>, clk: %clk: i1, rst: %rst: i1) -> (result: !handshake.channel<i1>)
    %fork13.outs_0, %fork13.outs_1, %fork13.outs_2 = hw.instance "fork13" @handshake_fork_10(ins: %cmpi1.result: !handshake.channel<i1>, clk: %clk: i1, rst: %rst: i1) -> (outs_0: !handshake.channel<i1>, outs_1: !handshake.channel<i1>, outs_2: !handshake.channel<i1>)
    %cond_br7.trueOut, %cond_br7.falseOut = hw.instance "cond_br7" @handshake_cond_br_0(condition: %fork13.outs_0: !handshake.channel<i1>, data: %trunci8.outs: !handshake.channel<i7>, clk: %clk: i1, rst: %rst: i1) -> (trueOut: !handshake.channel<i7>, falseOut: !handshake.channel<i7>)
    hw.instance "sink2" @handshake_sink_0(ins: %cond_br7.falseOut: !handshake.channel<i7>, clk: %clk: i1, rst: %rst: i1) -> ()
    %buffer41.outs = hw.instance "buffer41" @handshake_buffer_2(ins: %mux4.outs: !handshake.channel<i2>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i2>)
    %buffer42.outs = hw.instance "buffer42" @handshake_buffer_3(ins: %buffer41.outs: !handshake.channel<i2>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i2>)
    %cond_br8.trueOut, %cond_br8.falseOut = hw.instance "cond_br8" @handshake_cond_br_1(condition: %fork13.outs_1: !handshake.channel<i1>, data: %buffer42.outs: !handshake.channel<i2>, clk: %clk: i1, rst: %rst: i1) -> (trueOut: !handshake.channel<i2>, falseOut: !handshake.channel<i2>)
    %buffer47.outs = hw.instance "buffer47" @handshake_buffer_0(ins: %lazy_fork1.outs_1: !handshake.control<>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.control<>)
    %cond_br9.trueOut, %cond_br9.falseOut = hw.instance "cond_br9" @handshake_cond_br_2(condition: %fork13.outs_2: !handshake.channel<i1>, data: %buffer47.outs: !handshake.control<>, clk: %clk: i1, rst: %rst: i1) -> (trueOut: !handshake.control<>, falseOut: !handshake.control<>)
    %buffer55.outs = hw.instance "buffer55" @handshake_buffer_2(ins: %cond_br8.falseOut: !handshake.channel<i2>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i2>)
    %buffer56.outs = hw.instance "buffer56" @handshake_buffer_3(ins: %buffer55.outs: !handshake.channel<i2>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i2>)
    %extsi21.outs = hw.instance "extsi21" @handshake_extsi_6(ins: %buffer56.outs: !handshake.channel<i2>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i3>)
    %source5.outs = hw.instance "source5" @handshake_source_0(clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.control<>)
    %constant21.outs = hw.instance "constant21" @handshake_constant_4(ctrl: %source5.outs: !handshake.control<>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i3>)
    %source6.outs = hw.instance "source6" @handshake_source_0(clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.control<>)
    %constant22.outs = hw.instance "constant22" @handshake_constant_1(ctrl: %source6.outs: !handshake.control<>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i2>)
    %extsi22.outs = hw.instance "extsi22" @handshake_extsi_6(ins: %constant22.outs: !handshake.channel<i2>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i3>)
    %addi6.result = hw.instance "addi6" @handshake_addi_3(lhs: %extsi21.outs: !handshake.channel<i3>, rhs: %extsi22.outs: !handshake.channel<i3>, clk: %clk: i1, rst: %rst: i1) -> (result: !handshake.channel<i3>)
    %fork14.outs_0, %fork14.outs_1 = hw.instance "fork14" @handshake_fork_11(ins: %addi6.result: !handshake.channel<i3>, clk: %clk: i1, rst: %rst: i1) -> (outs_0: !handshake.channel<i3>, outs_1: !handshake.channel<i3>)
    %trunci9.outs = hw.instance "trunci9" @handshake_trunci_3(ins: %fork14.outs_0: !handshake.channel<i3>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i2>)
    %cmpi2.result = hw.instance "cmpi2" @handshake_cmpi_1(lhs: %fork14.outs_1: !handshake.channel<i3>, rhs: %constant21.outs: !handshake.channel<i3>, clk: %clk: i1, rst: %rst: i1) -> (result: !handshake.channel<i1>)
    %fork15.outs_0, %fork15.outs_1 = hw.instance "fork15" @handshake_fork_3(ins: %cmpi2.result: !handshake.channel<i1>, clk: %clk: i1, rst: %rst: i1) -> (outs_0: !handshake.channel<i1>, outs_1: !handshake.channel<i1>)
    %cond_br10.trueOut, %cond_br10.falseOut = hw.instance "cond_br10" @handshake_cond_br_1(condition: %fork15.outs_0: !handshake.channel<i1>, data: %trunci9.outs: !handshake.channel<i2>, clk: %clk: i1, rst: %rst: i1) -> (trueOut: !handshake.channel<i2>, falseOut: !handshake.channel<i2>)
    hw.instance "sink4" @handshake_sink_1(ins: %cond_br10.falseOut: !handshake.channel<i2>, clk: %clk: i1, rst: %rst: i1) -> ()
    %buffer57.outs = hw.instance "buffer57" @handshake_buffer_0(ins: %cond_br9.falseOut: !handshake.control<>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.control<>)
    %buffer58.outs = hw.instance "buffer58" @handshake_buffer_1(ins: %buffer57.outs: !handshake.control<>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.control<>)
    %cond_br11.trueOut, %cond_br11.falseOut = hw.instance "cond_br11" @handshake_cond_br_2(condition: %fork15.outs_1: !handshake.channel<i1>, data: %buffer58.outs: !handshake.control<>, clk: %clk: i1, rst: %rst: i1) -> (trueOut: !handshake.control<>, falseOut: !handshake.control<>)
    %buffer63.outs = hw.instance "buffer63" @handshake_buffer_0(ins: %cond_br11.falseOut: !handshake.control<>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.control<>)
    %buffer64.outs = hw.instance "buffer64" @handshake_buffer_1(ins: %buffer63.outs: !handshake.control<>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.control<>)
    %fork16.outs_0, %fork16.outs_1, %fork16.outs_2 = hw.instance "fork16" @handshake_fork_0(ins: %buffer64.outs: !handshake.control<>, clk: %clk: i1, rst: %rst: i1) -> (outs_0: !handshake.control<>, outs_1: !handshake.control<>, outs_2: !handshake.control<>)
    %constant23.outs = hw.instance "constant23" @handshake_constant_3(ctrl: %fork16.outs_2: !handshake.control<>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i7>)
    %trunci10.outs = hw.instance "trunci10" @handshake_trunci_0(ins: %constant23.outs: !handshake.channel<i7>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i6>)
    %load4.addrOut, %load4.dataOut = hw.instance "load4" @handshake_load_0(addrIn: %trunci10.outs: !handshake.channel<i6>, dataFromMem: %mem_controller1.ldData_0: !handshake.channel<i32>, clk: %clk: i1, rst: %rst: i1) -> (addrOut: !handshake.channel<i6>, dataOut: !handshake.channel<i32>)
    hw.output %load4.dataOut, %mem_controller1.memEnd, %lsq2.memEnd, %fork0.outs_1, %mem_controller1.loadEn, %mem_controller1.loadAddr, %mem_controller1.storeEn, %mem_controller1.storeAddr, %mem_controller1.storeData, %lsq2.loadEn, %lsq2.loadAddr, %lsq2.storeEn, %lsq2.storeAddr, %lsq2.storeData : !handshake.channel<i32>, !handshake.control<>, !handshake.control<>, !handshake.control<>, i1, i6, i1, i6, i32, i1, i6, i1, i6, i32
  }
  hw.module.extern @handshake_fork_0(in %ins : !handshake.control<>, in %clk : i1, in %rst : i1, out outs_0 : !handshake.control<>, out outs_1 : !handshake.control<>, out outs_2 : !handshake.control<>) attributes {hw.name = "handshake.fork", hw.parameters = {DATA_TYPE = !handshake.control<>, SIZE = 3 : ui32}}
  hw.module.extern @handshake_lsq_lsq2(in %loadData : i32, in %memStart : !handshake.control<>, in %ctrl_0 : !handshake.control<>, in %stAddr_0 : !handshake.channel<i6>, in %stData_0 : !handshake.channel<i32>, in %ctrl_1 : !handshake.control<>, in %ldAddr_0 : !handshake.channel<i6>, in %ctrlEnd : !handshake.control<>, in %clk : i1, in %rst : i1, out ldData_0 : !handshake.channel<i32>, out memEnd : !handshake.control<>, out loadEn : i1, out loadAddr : i6, out storeEn : i1, out storeAddr : i6, out storeData : i32) attributes {hw.name = "handshake.lsq", hw.parameters = {addrWidth = 6 : ui32, bufferDepth = 0 : ui32, dataWidth = 32 : ui32, fifoDepth = 16 : ui32, fifoDepth_L = 16 : ui32, fifoDepth_S = 16 : ui32, groupMulti = 0 : ui32, headLagEn = 0 : ui32, indexWidth = 4 : ui32, ldOrder = [[0 : i32], [0 : i32]], ldPortIdx = [[0 : i32], [0 : i32]], loadOffsets = [[0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32], [0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32]], loadPorts = [[0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32], [0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32]], master = true, name = "handshake_lsq_lsq2", numBBs = 2 : ui32, numLdChannels = 1 : ui32, numLoadPorts = 1 : ui32, numLoads = [0 : i32, 1 : i32], numStChannels = 1 : ui32, numStorePorts = 1 : ui32, numStores = [1 : i32, 0 : i32], pipe0En = 0 : ui32, pipe1En = 0 : ui32, pipeCompEn = 0 : ui32, stPortIdx = [[0 : i32], [0 : i32]], stResp = 0 : ui32, storeOffsets = [[0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32], [0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32]], storePorts = [[0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32], [0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32]]}}
  hw.module.extern @handshake_mem_controller_0(in %loadData : i32, in %memStart : !handshake.control<>, in %ldAddr_0 : !handshake.channel<i6>, in %ctrl_0 : !handshake.channel<i32>, in %ldAddr_1 : !handshake.channel<i6>, in %stAddr_0 : !handshake.channel<i6>, in %stData_0 : !handshake.channel<i32>, in %ctrlEnd : !handshake.control<>, in %clk : i1, in %rst : i1, out ldData_0 : !handshake.channel<i32>, out ldData_1 : !handshake.channel<i32>, out memEnd : !handshake.control<>, out loadEn : i1, out loadAddr : i6, out storeEn : i1, out storeAddr : i6, out storeData : i32) attributes {hw.name = "handshake.mem_controller", hw.parameters = {ADDR_TYPE = !handshake.channel<i6>, DATA_TYPE = !handshake.channel<i32>, NUM_CONTROLS = 1 : ui32, NUM_LOADS = 2 : ui32, NUM_STORES = 1 : ui32}}
  hw.module.extern @handshake_lsq_lsq3(in %ctrl_0 : !handshake.control<>, in %ldAddr_0 : !handshake.channel<i6>, in %ldAddr_1 : !handshake.channel<i6>, in %ldAddr_2 : !handshake.channel<i6>, in %ctrl_1 : !handshake.control<>, in %stAddr_0 : !handshake.channel<i6>, in %stData_0 : !handshake.channel<i32>, in %ldDataFromMC : !handshake.channel<i32>, in %clk : i1, in %rst : i1, out ldData_0 : !handshake.channel<i32>, out ldData_1 : !handshake.channel<i32>, out ldData_2 : !handshake.channel<i32>, out ldAddrToMC : !handshake.channel<i6>, out stAddrToMC : !handshake.channel<i6>, out stDataToMC : !handshake.channel<i32>) attributes {hw.name = "handshake.lsq", hw.parameters = {addrWidth = 6 : ui32, bufferDepth = 0 : ui32, dataWidth = 32 : ui32, fifoDepth = 16 : ui32, fifoDepth_L = 16 : ui32, fifoDepth_S = 16 : ui32, groupMulti = 0 : ui32, headLagEn = 0 : ui32, indexWidth = 4 : ui32, ldOrder = [[0 : i32, 0 : i32, 0 : i32], [0 : i32]], ldPortIdx = [[0 : i32, 1 : i32, 2 : i32], [0 : i32]], loadOffsets = [[0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32], [0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32]], loadPorts = [[0 : i32, 1 : i32, 2 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32], [0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32]], master = false, name = "handshake_lsq_lsq3", numBBs = 2 : ui32, numLdChannels = 1 : ui32, numLoadPorts = 3 : ui32, numLoads = [3 : i32, 0 : i32], numStChannels = 1 : ui32, numStorePorts = 1 : ui32, numStores = [0 : i32, 1 : i32], pipe0En = 0 : ui32, pipe1En = 0 : ui32, pipeCompEn = 0 : ui32, stPortIdx = [[0 : i32], [0 : i32]], stResp = 0 : ui32, storeOffsets = [[0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32], [0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32]], storePorts = [[0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32], [0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32]]}}
  hw.module.extern @handshake_constant_0(in %ctrl : !handshake.control<>, in %clk : i1, in %rst : i1, out outs : !handshake.channel<i1>) attributes {hw.name = "handshake.constant", hw.parameters = {DATA_WIDTH = 1 : ui32, VALUE = "0"}}
  hw.module.extern @handshake_extsi_0(in %ins : !handshake.channel<i1>, in %clk : i1, in %rst : i1, out outs : !handshake.channel<i2>) attributes {hw.name = "handshake.extsi", hw.parameters = {INPUT_TYPE = !handshake.channel<i1>, OUTPUT_TYPE = !handshake.channel<i2>}}
  hw.module.extern @handshake_mux_0(in %index : !handshake.channel<i1>, in %ins_0 : !handshake.channel<i2>, in %ins_1 : !handshake.channel<i2>, in %clk : i1, in %rst : i1, out outs : !handshake.channel<i2>) attributes {hw.name = "handshake.mux", hw.parameters = {DATA_TYPE = !handshake.channel<i2>, SELECT_TYPE = !handshake.channel<i1>, SIZE = 2 : ui32}}
  hw.module.extern @handshake_control_merge_0(in %ins_0 : !handshake.control<>, in %ins_1 : !handshake.control<>, in %clk : i1, in %rst : i1, out outs : !handshake.control<>, out index : !handshake.channel<i1>) attributes {hw.name = "handshake.control_merge", hw.parameters = {DATA_TYPE = !handshake.control<>, INDEX_TYPE = !handshake.channel<i1>, SIZE = 2 : ui32}}
  hw.module.extern @handshake_buffer_0(in %ins : !handshake.control<>, in %clk : i1, in %rst : i1, out outs : !handshake.control<>) attributes {hw.name = "handshake.buffer", hw.parameters = {DATA_TYPE = !handshake.control<>, NUM_SLOTS = 1 : ui32, TIMING = #handshake<timing {D: 1, V: 1, R: 0}>}}
  hw.module.extern @handshake_buffer_1(in %ins : !handshake.control<>, in %clk : i1, in %rst : i1, out outs : !handshake.control<>) attributes {hw.name = "handshake.buffer", hw.parameters = {DATA_TYPE = !handshake.control<>, NUM_SLOTS = 1 : ui32, TIMING = #handshake<timing {R: 1}>}}
  hw.module.extern @handshake_fork_1(in %ins : !handshake.control<>, in %clk : i1, in %rst : i1, out outs_0 : !handshake.control<>, out outs_1 : !handshake.control<>) attributes {hw.name = "handshake.fork", hw.parameters = {DATA_TYPE = !handshake.control<>, SIZE = 2 : ui32}}
  hw.module.extern @handshake_constant_1(in %ctrl : !handshake.control<>, in %clk : i1, in %rst : i1, out outs : !handshake.channel<i2>) attributes {hw.name = "handshake.constant", hw.parameters = {DATA_WIDTH = 2 : ui32, VALUE = "01"}}
  hw.module.extern @handshake_extsi_1(in %ins : !handshake.channel<i2>, in %clk : i1, in %rst : i1, out outs : !handshake.channel<i7>) attributes {hw.name = "handshake.extsi", hw.parameters = {INPUT_TYPE = !handshake.channel<i2>, OUTPUT_TYPE = !handshake.channel<i7>}}
  hw.module.extern @handshake_buffer_2(in %ins : !handshake.channel<i2>, in %clk : i1, in %rst : i1, out outs : !handshake.channel<i2>) attributes {hw.name = "handshake.buffer", hw.parameters = {DATA_TYPE = !handshake.channel<i2>, NUM_SLOTS = 1 : ui32, TIMING = #handshake<timing {D: 1, V: 1, R: 0}>}}
  hw.module.extern @handshake_buffer_3(in %ins : !handshake.channel<i2>, in %clk : i1, in %rst : i1, out outs : !handshake.channel<i2>) attributes {hw.name = "handshake.buffer", hw.parameters = {DATA_TYPE = !handshake.channel<i2>, NUM_SLOTS = 1 : ui32, TIMING = #handshake<timing {R: 1}>}}
  hw.module.extern @handshake_mux_1(in %index : !handshake.channel<i1>, in %ins_0 : !handshake.channel<i7>, in %ins_1 : !handshake.channel<i7>, in %clk : i1, in %rst : i1, out outs : !handshake.channel<i7>) attributes {hw.name = "handshake.mux", hw.parameters = {DATA_TYPE = !handshake.channel<i7>, SELECT_TYPE = !handshake.channel<i1>, SIZE = 2 : ui32}}
  hw.module.extern @handshake_buffer_4(in %ins : !handshake.channel<i7>, in %clk : i1, in %rst : i1, out outs : !handshake.channel<i7>) attributes {hw.name = "handshake.buffer", hw.parameters = {DATA_TYPE = !handshake.channel<i7>, NUM_SLOTS = 1 : ui32, TIMING = #handshake<timing {D: 1, V: 1, R: 0}>}}
  hw.module.extern @handshake_buffer_5(in %ins : !handshake.channel<i7>, in %clk : i1, in %rst : i1, out outs : !handshake.channel<i7>) attributes {hw.name = "handshake.buffer", hw.parameters = {DATA_TYPE = !handshake.channel<i7>, NUM_SLOTS = 1 : ui32, TIMING = #handshake<timing {R: 1}>}}
  hw.module.extern @handshake_fork_2(in %ins : !handshake.channel<i7>, in %clk : i1, in %rst : i1, out outs_0 : !handshake.channel<i7>, out outs_1 : !handshake.channel<i7>, out outs_2 : !handshake.channel<i7>, out outs_3 : !handshake.channel<i7>, out outs_4 : !handshake.channel<i7>) attributes {hw.name = "handshake.fork", hw.parameters = {DATA_TYPE = !handshake.channel<i7>, SIZE = 5 : ui32}}
  hw.module.extern @handshake_trunci_0(in %ins : !handshake.channel<i7>, in %clk : i1, in %rst : i1, out outs : !handshake.channel<i6>) attributes {hw.name = "handshake.trunci", hw.parameters = {INPUT_TYPE = !handshake.channel<i7>, OUTPUT_TYPE = !handshake.channel<i6>}}
  hw.module.extern @handshake_extsi_2(in %ins : !handshake.channel<i7>, in %clk : i1, in %rst : i1, out outs : !handshake.channel<i8>) attributes {hw.name = "handshake.extsi", hw.parameters = {INPUT_TYPE = !handshake.channel<i7>, OUTPUT_TYPE = !handshake.channel<i8>}}
  hw.module.extern @handshake_buffer_6(in %ins : !handshake.channel<i7>, in %clk : i1, in %rst : i1, out outs : !handshake.channel<i7>) attributes {hw.name = "handshake.buffer", hw.parameters = {DATA_TYPE = !handshake.channel<i7>, NUM_SLOTS = 5 : ui32, TIMING = #handshake<timing {R: 1}>}}
  hw.module.extern @handshake_fork_3(in %ins : !handshake.channel<i1>, in %clk : i1, in %rst : i1, out outs_0 : !handshake.channel<i1>, out outs_1 : !handshake.channel<i1>) attributes {hw.name = "handshake.fork", hw.parameters = {DATA_TYPE = !handshake.channel<i1>, SIZE = 2 : ui32}}
  hw.module.extern @handshake_lazy_fork_0(in %ins : !handshake.control<>, in %clk : i1, in %rst : i1, out outs_0 : !handshake.control<>, out outs_1 : !handshake.control<>, out outs_2 : !handshake.control<>, out outs_3 : !handshake.control<>) attributes {hw.name = "handshake.lazy_fork", hw.parameters = {DATA_TYPE = !handshake.control<>, SIZE = 4 : ui32}}
  hw.module.extern @handshake_fork_4(in %ins : !handshake.control<>, in %clk : i1, in %rst : i1, out outs_0 : !handshake.control<>) attributes {hw.name = "handshake.fork", hw.parameters = {DATA_TYPE = !handshake.control<>, SIZE = 1 : ui32}}
  hw.module.extern @handshake_source_0(in %clk : i1, in %rst : i1, out outs : !handshake.control<>) attributes {hw.name = "handshake.source", hw.parameters = {}}
  hw.module.extern @handshake_constant_2(in %ctrl : !handshake.control<>, in %clk : i1, in %rst : i1, out outs : !handshake.channel<i32>) attributes {hw.name = "handshake.constant", hw.parameters = {DATA_WIDTH = 32 : ui32, VALUE = "11111111111111111111111111111111"}}
  hw.module.extern @handshake_trunci_1(in %ins : !handshake.channel<i32>, in %clk : i1, in %rst : i1, out outs : !handshake.channel<i6>) attributes {hw.name = "handshake.trunci", hw.parameters = {INPUT_TYPE = !handshake.channel<i32>, OUTPUT_TYPE = !handshake.channel<i6>}}
  hw.module.extern @handshake_constant_3(in %ctrl : !handshake.control<>, in %clk : i1, in %rst : i1, out outs : !handshake.channel<i7>) attributes {hw.name = "handshake.constant", hw.parameters = {DATA_WIDTH = 7 : ui32, VALUE = "0110001"}}
  hw.module.extern @handshake_fork_5(in %ins : !handshake.channel<i2>, in %clk : i1, in %rst : i1, out outs_0 : !handshake.channel<i2>, out outs_1 : !handshake.channel<i2>, out outs_2 : !handshake.channel<i2>) attributes {hw.name = "handshake.fork", hw.parameters = {DATA_TYPE = !handshake.channel<i2>, SIZE = 3 : ui32}}
  hw.module.extern @handshake_extsi_3(in %ins : !handshake.channel<i2>, in %clk : i1, in %rst : i1, out outs : !handshake.channel<i6>) attributes {hw.name = "handshake.extsi", hw.parameters = {INPUT_TYPE = !handshake.channel<i2>, OUTPUT_TYPE = !handshake.channel<i6>}}
  hw.module.extern @handshake_extsi_4(in %ins : !handshake.channel<i2>, in %clk : i1, in %rst : i1, out outs : !handshake.channel<i8>) attributes {hw.name = "handshake.extsi", hw.parameters = {INPUT_TYPE = !handshake.channel<i2>, OUTPUT_TYPE = !handshake.channel<i8>}}
  hw.module.extern @handshake_extsi_5(in %ins : !handshake.channel<i2>, in %clk : i1, in %rst : i1, out outs : !handshake.channel<i32>) attributes {hw.name = "handshake.extsi", hw.parameters = {INPUT_TYPE = !handshake.channel<i2>, OUTPUT_TYPE = !handshake.channel<i32>}}
  hw.module.extern @handshake_addi_0(in %lhs : !handshake.channel<i6>, in %rhs : !handshake.channel<i6>, in %clk : i1, in %rst : i1, out result : !handshake.channel<i6>) attributes {hw.name = "handshake.addi", hw.parameters = {DATA_TYPE = !handshake.channel<i6>}}
  hw.module.extern @handshake_load_0(in %addrIn : !handshake.channel<i6>, in %dataFromMem : !handshake.channel<i32>, in %clk : i1, in %rst : i1, out addrOut : !handshake.channel<i6>, out dataOut : !handshake.channel<i32>) attributes {hw.name = "handshake.load", hw.parameters = {ADDR_TYPE = !handshake.channel<i6>, DATA_TYPE = !handshake.channel<i32>}}
  hw.module.extern @handshake_addi_1(in %lhs : !handshake.channel<i32>, in %rhs : !handshake.channel<i32>, in %clk : i1, in %rst : i1, out result : !handshake.channel<i32>) attributes {hw.name = "handshake.addi", hw.parameters = {DATA_TYPE = !handshake.channel<i32>}}
  hw.module.extern @handshake_fork_6(in %ins : !handshake.channel<i32>, in %clk : i1, in %rst : i1, out outs_0 : !handshake.channel<i32>, out outs_1 : !handshake.channel<i32>) attributes {hw.name = "handshake.fork", hw.parameters = {DATA_TYPE = !handshake.channel<i32>, SIZE = 2 : ui32}}
  hw.module.extern @handshake_shli_0(in %lhs : !handshake.channel<i32>, in %rhs : !handshake.channel<i32>, in %clk : i1, in %rst : i1, out result : !handshake.channel<i32>) attributes {hw.name = "handshake.shli", hw.parameters = {DATA_TYPE = !handshake.channel<i32>}}
  hw.module.extern @handshake_store_0(in %addrIn : !handshake.channel<i6>, in %dataIn : !handshake.channel<i32>, in %clk : i1, in %rst : i1, out addrOut : !handshake.channel<i6>, out dataToMem : !handshake.channel<i32>) attributes {hw.name = "handshake.store", hw.parameters = {ADDR_TYPE = !handshake.channel<i6>, DATA_TYPE = !handshake.channel<i32>}}
  hw.module.extern @handshake_addi_2(in %lhs : !handshake.channel<i8>, in %rhs : !handshake.channel<i8>, in %clk : i1, in %rst : i1, out result : !handshake.channel<i8>) attributes {hw.name = "handshake.addi", hw.parameters = {DATA_TYPE = !handshake.channel<i8>}}
  hw.module.extern @handshake_fork_7(in %ins : !handshake.channel<i8>, in %clk : i1, in %rst : i1, out outs_0 : !handshake.channel<i8>, out outs_1 : !handshake.channel<i8>) attributes {hw.name = "handshake.fork", hw.parameters = {DATA_TYPE = !handshake.channel<i8>, SIZE = 2 : ui32}}
  hw.module.extern @handshake_trunci_2(in %ins : !handshake.channel<i8>, in %clk : i1, in %rst : i1, out outs : !handshake.channel<i7>) attributes {hw.name = "handshake.trunci", hw.parameters = {INPUT_TYPE = !handshake.channel<i8>, OUTPUT_TYPE = !handshake.channel<i7>}}
  hw.module.extern @handshake_cmpi_0(in %lhs : !handshake.channel<i8>, in %rhs : !handshake.channel<i8>, in %clk : i1, in %rst : i1, out result : !handshake.channel<i1>) attributes {hw.name = "handshake.cmpi", hw.parameters = {DATA_TYPE = !handshake.channel<i8>, PREDICATE = "ult"}}
  hw.module.extern @handshake_fork_8(in %ins : !handshake.channel<i1>, in %clk : i1, in %rst : i1, out outs_0 : !handshake.channel<i1>, out outs_1 : !handshake.channel<i1>, out outs_2 : !handshake.channel<i1>, out outs_3 : !handshake.channel<i1>) attributes {hw.name = "handshake.fork", hw.parameters = {DATA_TYPE = !handshake.channel<i1>, SIZE = 4 : ui32}}
  hw.module.extern @handshake_cond_br_0(in %condition : !handshake.channel<i1>, in %data : !handshake.channel<i7>, in %clk : i1, in %rst : i1, out trueOut : !handshake.channel<i7>, out falseOut : !handshake.channel<i7>) attributes {hw.name = "handshake.cond_br", hw.parameters = {DATA_TYPE = !handshake.channel<i7>}}
  hw.module.extern @handshake_sink_0(in %ins : !handshake.channel<i7>, in %clk : i1, in %rst : i1) attributes {hw.name = "handshake.sink", hw.parameters = {DATA_TYPE = !handshake.channel<i7>}}
  hw.module.extern @handshake_cond_br_1(in %condition : !handshake.channel<i1>, in %data : !handshake.channel<i2>, in %clk : i1, in %rst : i1, out trueOut : !handshake.channel<i2>, out falseOut : !handshake.channel<i2>) attributes {hw.name = "handshake.cond_br", hw.parameters = {DATA_TYPE = !handshake.channel<i2>}}
  hw.module.extern @handshake_cond_br_2(in %condition : !handshake.channel<i1>, in %data : !handshake.control<>, in %clk : i1, in %rst : i1, out trueOut : !handshake.control<>, out falseOut : !handshake.control<>) attributes {hw.name = "handshake.cond_br", hw.parameters = {DATA_TYPE = !handshake.control<>}}
  hw.module.extern @handshake_sink_1(in %ins : !handshake.channel<i2>, in %clk : i1, in %rst : i1) attributes {hw.name = "handshake.sink", hw.parameters = {DATA_TYPE = !handshake.channel<i2>}}
  hw.module.extern @handshake_fork_9(in %ins : !handshake.channel<i7>, in %clk : i1, in %rst : i1, out outs_0 : !handshake.channel<i7>, out outs_1 : !handshake.channel<i7>, out outs_2 : !handshake.channel<i7>) attributes {hw.name = "handshake.fork", hw.parameters = {DATA_TYPE = !handshake.channel<i7>, SIZE = 3 : ui32}}
  hw.module.extern @handshake_fork_10(in %ins : !handshake.channel<i1>, in %clk : i1, in %rst : i1, out outs_0 : !handshake.channel<i1>, out outs_1 : !handshake.channel<i1>, out outs_2 : !handshake.channel<i1>) attributes {hw.name = "handshake.fork", hw.parameters = {DATA_TYPE = !handshake.channel<i1>, SIZE = 3 : ui32}}
  hw.module.extern @handshake_extsi_6(in %ins : !handshake.channel<i2>, in %clk : i1, in %rst : i1, out outs : !handshake.channel<i3>) attributes {hw.name = "handshake.extsi", hw.parameters = {INPUT_TYPE = !handshake.channel<i2>, OUTPUT_TYPE = !handshake.channel<i3>}}
  hw.module.extern @handshake_constant_4(in %ctrl : !handshake.control<>, in %clk : i1, in %rst : i1, out outs : !handshake.channel<i3>) attributes {hw.name = "handshake.constant", hw.parameters = {DATA_WIDTH = 3 : ui32, VALUE = "010"}}
  hw.module.extern @handshake_addi_3(in %lhs : !handshake.channel<i3>, in %rhs : !handshake.channel<i3>, in %clk : i1, in %rst : i1, out result : !handshake.channel<i3>) attributes {hw.name = "handshake.addi", hw.parameters = {DATA_TYPE = !handshake.channel<i3>}}
  hw.module.extern @handshake_fork_11(in %ins : !handshake.channel<i3>, in %clk : i1, in %rst : i1, out outs_0 : !handshake.channel<i3>, out outs_1 : !handshake.channel<i3>) attributes {hw.name = "handshake.fork", hw.parameters = {DATA_TYPE = !handshake.channel<i3>, SIZE = 2 : ui32}}
  hw.module.extern @handshake_trunci_3(in %ins : !handshake.channel<i3>, in %clk : i1, in %rst : i1, out outs : !handshake.channel<i2>) attributes {hw.name = "handshake.trunci", hw.parameters = {INPUT_TYPE = !handshake.channel<i3>, OUTPUT_TYPE = !handshake.channel<i2>}}
  hw.module.extern @handshake_cmpi_1(in %lhs : !handshake.channel<i3>, in %rhs : !handshake.channel<i3>, in %clk : i1, in %rst : i1, out result : !handshake.channel<i1>) attributes {hw.name = "handshake.cmpi", hw.parameters = {DATA_TYPE = !handshake.channel<i3>, PREDICATE = "ult"}}
  hw.module.extern @mem_to_bram_32_6(in %loadEn : i1, in %loadAddr : i6, in %storeEn : i1, in %storeAddr : i6, in %storeData : i32, in %din0 : i32, in %din1 : i32, out ce0 : i1, out we0 : i1, out address0 : i6, out dout0 : i32, out ce1 : i1, out we1 : i1, out address1 : i6, out dout1 : i32, out loadData : i32) attributes {hw.name = "mem_to_bram", hw.parameters = {ADDR_WIDTH = 6 : ui32, DATA_WIDTH = 32 : ui32}}
  hw.module @jacobi_1d_imper_wrapper(in %A_din0 : i32, in %A_din1 : i32, in %B_din0 : i32, in %B_din1 : i32, in %A_start : !handshake.control<>, in %B_start : !handshake.control<>, in %start : !handshake.control<>, in %clk : i1, in %rst : i1, out out0 : !handshake.channel<i32>, out A_end : !handshake.control<>, out B_end : !handshake.control<>, out end : !handshake.control<>, out A_ce0 : i1, out A_we0 : i1, out A_address0 : i6, out A_dout0 : i32, out A_ce1 : i1, out A_we1 : i1, out A_address1 : i6, out A_dout1 : i32, out B_ce0 : i1, out B_we0 : i1, out B_address0 : i6, out B_dout0 : i32, out B_ce1 : i1, out B_we1 : i1, out B_address1 : i6, out B_dout1 : i32) {
    %mem_to_bram_converter_A.ce0, %mem_to_bram_converter_A.we0, %mem_to_bram_converter_A.address0, %mem_to_bram_converter_A.dout0, %mem_to_bram_converter_A.ce1, %mem_to_bram_converter_A.we1, %mem_to_bram_converter_A.address1, %mem_to_bram_converter_A.dout1, %mem_to_bram_converter_A.loadData = hw.instance "mem_to_bram_converter_A" @mem_to_bram_32_6(loadEn: %jacobi_1d_imper_wrapped.A_loadEn: i1, loadAddr: %jacobi_1d_imper_wrapped.A_loadAddr: i6, storeEn: %jacobi_1d_imper_wrapped.A_storeEn: i1, storeAddr: %jacobi_1d_imper_wrapped.A_storeAddr: i6, storeData: %jacobi_1d_imper_wrapped.A_storeData: i32, din0: %A_din0: i32, din1: %A_din1: i32) -> (ce0: i1, we0: i1, address0: i6, dout0: i32, ce1: i1, we1: i1, address1: i6, dout1: i32, loadData: i32)
    %mem_to_bram_converter_B.ce0, %mem_to_bram_converter_B.we0, %mem_to_bram_converter_B.address0, %mem_to_bram_converter_B.dout0, %mem_to_bram_converter_B.ce1, %mem_to_bram_converter_B.we1, %mem_to_bram_converter_B.address1, %mem_to_bram_converter_B.dout1, %mem_to_bram_converter_B.loadData = hw.instance "mem_to_bram_converter_B" @mem_to_bram_32_6(loadEn: %jacobi_1d_imper_wrapped.B_loadEn: i1, loadAddr: %jacobi_1d_imper_wrapped.B_loadAddr: i6, storeEn: %jacobi_1d_imper_wrapped.B_storeEn: i1, storeAddr: %jacobi_1d_imper_wrapped.B_storeAddr: i6, storeData: %jacobi_1d_imper_wrapped.B_storeData: i32, din0: %B_din0: i32, din1: %B_din1: i32) -> (ce0: i1, we0: i1, address0: i6, dout0: i32, ce1: i1, we1: i1, address1: i6, dout1: i32, loadData: i32)
    %jacobi_1d_imper_wrapped.out0, %jacobi_1d_imper_wrapped.A_end, %jacobi_1d_imper_wrapped.B_end, %jacobi_1d_imper_wrapped.end, %jacobi_1d_imper_wrapped.A_loadEn, %jacobi_1d_imper_wrapped.A_loadAddr, %jacobi_1d_imper_wrapped.A_storeEn, %jacobi_1d_imper_wrapped.A_storeAddr, %jacobi_1d_imper_wrapped.A_storeData, %jacobi_1d_imper_wrapped.B_loadEn, %jacobi_1d_imper_wrapped.B_loadAddr, %jacobi_1d_imper_wrapped.B_storeEn, %jacobi_1d_imper_wrapped.B_storeAddr, %jacobi_1d_imper_wrapped.B_storeData = hw.instance "jacobi_1d_imper_wrapped" @jacobi_1d_imper(A_loadData: %mem_to_bram_converter_A.loadData: i32, B_loadData: %mem_to_bram_converter_B.loadData: i32, A_start: %A_start: !handshake.control<>, B_start: %B_start: !handshake.control<>, start: %start: !handshake.control<>, clk: %clk: i1, rst: %rst: i1) -> (out0: !handshake.channel<i32>, A_end: !handshake.control<>, B_end: !handshake.control<>, end: !handshake.control<>, A_loadEn: i1, A_loadAddr: i6, A_storeEn: i1, A_storeAddr: i6, A_storeData: i32, B_loadEn: i1, B_loadAddr: i6, B_storeEn: i1, B_storeAddr: i6, B_storeData: i32)
    hw.output %jacobi_1d_imper_wrapped.out0, %jacobi_1d_imper_wrapped.A_end, %jacobi_1d_imper_wrapped.B_end, %jacobi_1d_imper_wrapped.end, %mem_to_bram_converter_A.ce0, %mem_to_bram_converter_A.we0, %mem_to_bram_converter_A.address0, %mem_to_bram_converter_A.dout0, %mem_to_bram_converter_A.ce1, %mem_to_bram_converter_A.we1, %mem_to_bram_converter_A.address1, %mem_to_bram_converter_A.dout1, %mem_to_bram_converter_B.ce0, %mem_to_bram_converter_B.we0, %mem_to_bram_converter_B.address0, %mem_to_bram_converter_B.dout0, %mem_to_bram_converter_B.ce1, %mem_to_bram_converter_B.we1, %mem_to_bram_converter_B.address1, %mem_to_bram_converter_B.dout1 : !handshake.channel<i32>, !handshake.control<>, !handshake.control<>, !handshake.control<>, i1, i1, i6, i32, i1, i1, i6, i32, i1, i1, i6, i32, i1, i1, i6, i32
  }
}

