module {
  hw.module @matvec(in %m_loadData : i32, in %v_loadData : i32, in %out_loadData : i32, in %m_start : !handshake.control<>, in %v_start : !handshake.control<>, in %out_start : !handshake.control<>, in %start : !handshake.control<>, in %clk : i1, in %rst : i1, out out0 : !handshake.channel<i32>, out m_end : !handshake.control<>, out v_end : !handshake.control<>, out out_end : !handshake.control<>, out end : !handshake.control<>, out m_loadEn : i1, out m_loadAddr : i9, out m_storeEn : i1, out m_storeAddr : i9, out m_storeData : i32, out v_loadEn : i1, out v_loadAddr : i5, out v_storeEn : i1, out v_storeAddr : i5, out v_storeData : i32, out out_loadEn : i1, out out_loadAddr : i5, out out_storeEn : i1, out out_storeAddr : i5, out out_storeData : i32) {
    %fork0.outs_0, %fork0.outs_1, %fork0.outs_2 = hw.instance "fork0" @handshake_fork_0(ins: %start: !handshake.control<>, clk: %clk: i1, rst: %rst: i1) -> (outs_0: !handshake.control<>, outs_1: !handshake.control<>, outs_2: !handshake.control<>)
    %mem_controller3.memEnd, %mem_controller3.loadEn, %mem_controller3.loadAddr, %mem_controller3.storeEn, %mem_controller3.storeAddr, %mem_controller3.storeData = hw.instance "mem_controller3" @handshake_mem_controller_0(loadData: %out_loadData: i32, memStart: %out_start: !handshake.control<>, ctrl_0: %extsi7.outs: !handshake.channel<i32>, stAddr_0: %store0.addrOut: !handshake.channel<i5>, stData_0: %store0.dataToMem: !handshake.channel<i32>, ctrlEnd: %fork13.outs_2: !handshake.control<>, clk: %clk: i1, rst: %rst: i1) -> (memEnd: !handshake.control<>, loadEn: i1, loadAddr: i5, storeEn: i1, storeAddr: i5, storeData: i32)
    %mem_controller4.ldData_0, %mem_controller4.memEnd, %mem_controller4.loadEn, %mem_controller4.loadAddr, %mem_controller4.storeEn, %mem_controller4.storeAddr, %mem_controller4.storeData = hw.instance "mem_controller4" @handshake_mem_controller_1(loadData: %v_loadData: i32, memStart: %v_start: !handshake.control<>, ldAddr_0: %load0.addrOut: !handshake.channel<i5>, ctrlEnd: %fork13.outs_1: !handshake.control<>, clk: %clk: i1, rst: %rst: i1) -> (ldData_0: !handshake.channel<i32>, memEnd: !handshake.control<>, loadEn: i1, loadAddr: i5, storeEn: i1, storeAddr: i5, storeData: i32)
    %mem_controller5.ldData_0, %mem_controller5.memEnd, %mem_controller5.loadEn, %mem_controller5.loadAddr, %mem_controller5.storeEn, %mem_controller5.storeAddr, %mem_controller5.storeData = hw.instance "mem_controller5" @handshake_mem_controller_2(loadData: %m_loadData: i32, memStart: %m_start: !handshake.control<>, ldAddr_0: %load1.addrOut: !handshake.channel<i9>, ctrlEnd: %fork13.outs_0: !handshake.control<>, clk: %clk: i1, rst: %rst: i1) -> (ldData_0: !handshake.channel<i32>, memEnd: !handshake.control<>, loadEn: i1, loadAddr: i9, storeEn: i1, storeAddr: i9, storeData: i32)
    %constant2.outs = hw.instance "constant2" @handshake_constant_0(ctrl: %fork0.outs_0: !handshake.control<>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i1>)
    %extsi11.outs = hw.instance "extsi11" @handshake_extsi_0(ins: %constant2.outs: !handshake.channel<i1>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i6>)
    %mux0.outs = hw.instance "mux0" @handshake_mux_0(index: %control_merge0.index: !handshake.channel<i1>, ins_0: %extsi11.outs: !handshake.channel<i6>, ins_1: %cond_br6.trueOut: !handshake.channel<i6>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i6>)
    %control_merge0.outs, %control_merge0.index = hw.instance "control_merge0" @handshake_control_merge_0(ins_0: %fork0.outs_2: !handshake.control<>, ins_1: %cond_br7.trueOut: !handshake.control<>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.control<>, index: !handshake.channel<i1>)
    %buffer5.outs = hw.instance "buffer5" @handshake_buffer_0(ins: %control_merge0.outs: !handshake.control<>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.control<>)
    %buffer6.outs = hw.instance "buffer6" @handshake_buffer_1(ins: %buffer5.outs: !handshake.control<>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.control<>)
    %fork1.outs_0, %fork1.outs_1 = hw.instance "fork1" @handshake_fork_1(ins: %buffer6.outs: !handshake.control<>, clk: %clk: i1, rst: %rst: i1) -> (outs_0: !handshake.control<>, outs_1: !handshake.control<>)
    %constant3.outs = hw.instance "constant3" @handshake_constant_0(ctrl: %fork1.outs_0: !handshake.control<>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i1>)
    %fork2.outs_0, %fork2.outs_1 = hw.instance "fork2" @handshake_fork_2(ins: %constant3.outs: !handshake.channel<i1>, clk: %clk: i1, rst: %rst: i1) -> (outs_0: !handshake.channel<i1>, outs_1: !handshake.channel<i1>)
    %extsi10.outs = hw.instance "extsi10" @handshake_extsi_0(ins: %fork2.outs_0: !handshake.channel<i1>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i6>)
    %extsi12.outs = hw.instance "extsi12" @handshake_extsi_1(ins: %fork2.outs_1: !handshake.channel<i1>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i32>)
    %buffer3.outs = hw.instance "buffer3" @handshake_buffer_2(ins: %mux0.outs: !handshake.channel<i6>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i6>)
    %buffer4.outs = hw.instance "buffer4" @handshake_buffer_3(ins: %buffer3.outs: !handshake.channel<i6>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i6>)
    %mux1.outs = hw.instance "mux1" @handshake_mux_0(index: %fork5.outs_1: !handshake.channel<i1>, ins_0: %extsi10.outs: !handshake.channel<i6>, ins_1: %cond_br2.trueOut: !handshake.channel<i6>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i6>)
    %buffer11.outs = hw.instance "buffer11" @handshake_buffer_2(ins: %mux1.outs: !handshake.channel<i6>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i6>)
    %buffer12.outs = hw.instance "buffer12" @handshake_buffer_3(ins: %buffer11.outs: !handshake.channel<i6>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i6>)
    %fork3.outs_0, %fork3.outs_1, %fork3.outs_2 = hw.instance "fork3" @handshake_fork_3(ins: %buffer12.outs: !handshake.channel<i6>, clk: %clk: i1, rst: %rst: i1) -> (outs_0: !handshake.channel<i6>, outs_1: !handshake.channel<i6>, outs_2: !handshake.channel<i6>)
    %extsi13.outs = hw.instance "extsi13" @handshake_extsi_2(ins: %fork3.outs_0: !handshake.channel<i6>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i9>)
    %extsi14.outs = hw.instance "extsi14" @handshake_extsi_3(ins: %fork3.outs_2: !handshake.channel<i6>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i7>)
    %trunci0.outs = hw.instance "trunci0" @handshake_trunci_0(ins: %fork3.outs_1: !handshake.channel<i6>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i5>)
    %buffer27.outs = hw.instance "buffer27" @handshake_buffer_4(ins: %fork5.outs_2: !handshake.channel<i1>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i1>)
    %mux2.outs = hw.instance "mux2" @handshake_mux_1(index: %buffer27.outs: !handshake.channel<i1>, ins_0: %extsi12.outs: !handshake.channel<i32>, ins_1: %cond_br3.trueOut: !handshake.channel<i32>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i32>)
    %mux3.outs = hw.instance "mux3" @handshake_mux_0(index: %fork5.outs_0: !handshake.channel<i1>, ins_0: %buffer4.outs: !handshake.channel<i6>, ins_1: %cond_br4.trueOut: !handshake.channel<i6>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i6>)
    %buffer18.outs = hw.instance "buffer18" @handshake_buffer_2(ins: %mux3.outs: !handshake.channel<i6>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i6>)
    %buffer19.outs = hw.instance "buffer19" @handshake_buffer_3(ins: %buffer18.outs: !handshake.channel<i6>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i6>)
    %fork4.outs_0, %fork4.outs_1, %fork4.outs_2 = hw.instance "fork4" @handshake_fork_3(ins: %buffer19.outs: !handshake.channel<i6>, clk: %clk: i1, rst: %rst: i1) -> (outs_0: !handshake.channel<i6>, outs_1: !handshake.channel<i6>, outs_2: !handshake.channel<i6>)
    %trunci1.outs = hw.instance "trunci1" @handshake_trunci_0(ins: %fork4.outs_0: !handshake.channel<i6>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i5>)
    %extsi15.outs = hw.instance "extsi15" @handshake_extsi_4(ins: %trunci1.outs: !handshake.channel<i5>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i9>)
    %extsi16.outs = hw.instance "extsi16" @handshake_extsi_5(ins: %fork4.outs_2: !handshake.channel<i6>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i8>)
    %control_merge1.outs, %control_merge1.index = hw.instance "control_merge1" @handshake_control_merge_0(ins_0: %fork1.outs_1: !handshake.control<>, ins_1: %cond_br5.trueOut: !handshake.control<>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.control<>, index: !handshake.channel<i1>)
    %fork5.outs_0, %fork5.outs_1, %fork5.outs_2 = hw.instance "fork5" @handshake_fork_4(ins: %control_merge1.index: !handshake.channel<i1>, clk: %clk: i1, rst: %rst: i1) -> (outs_0: !handshake.channel<i1>, outs_1: !handshake.channel<i1>, outs_2: !handshake.channel<i1>)
    %source0.outs = hw.instance "source0" @handshake_source_0(clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.control<>)
    %constant5.outs = hw.instance "constant5" @handshake_constant_1(ctrl: %source0.outs: !handshake.control<>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i6>)
    %extsi17.outs = hw.instance "extsi17" @handshake_extsi_3(ins: %constant5.outs: !handshake.channel<i6>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i7>)
    %source1.outs = hw.instance "source1" @handshake_source_0(clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.control<>)
    %constant14.outs = hw.instance "constant14" @handshake_constant_2(ctrl: %source1.outs: !handshake.control<>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i2>)
    %extsi18.outs = hw.instance "extsi18" @handshake_extsi_6(ins: %constant14.outs: !handshake.channel<i2>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i7>)
    %source2.outs = hw.instance "source2" @handshake_source_0(clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.control<>)
    %constant15.outs = hw.instance "constant15" @handshake_constant_3(ctrl: %source2.outs: !handshake.control<>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i4>)
    %extui0.outs = hw.instance "extui0" @handshake_extui_0(ins: %constant15.outs: !handshake.channel<i4>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i9>)
    %source3.outs = hw.instance "source3" @handshake_source_0(clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.control<>)
    %constant16.outs = hw.instance "constant16" @handshake_constant_4(ctrl: %source3.outs: !handshake.control<>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i3>)
    %extui1.outs = hw.instance "extui1" @handshake_extui_1(ins: %constant16.outs: !handshake.channel<i3>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i8>)
    %load0.addrOut, %load0.dataOut = hw.instance "load0" @handshake_load_0(addrIn: %trunci0.outs: !handshake.channel<i5>, dataFromMem: %mem_controller4.ldData_0: !handshake.channel<i32>, clk: %clk: i1, rst: %rst: i1) -> (addrOut: !handshake.channel<i5>, dataOut: !handshake.channel<i32>)
    %shli3.result = hw.instance "shli3" @handshake_shli_0(lhs: %extsi16.outs: !handshake.channel<i8>, rhs: %extui1.outs: !handshake.channel<i8>, clk: %clk: i1, rst: %rst: i1) -> (result: !handshake.channel<i8>)
    %extsi19.outs = hw.instance "extsi19" @handshake_extsi_7(ins: %shli3.result: !handshake.channel<i8>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i9>)
    %shli2.result = hw.instance "shli2" @handshake_shli_1(lhs: %extsi15.outs: !handshake.channel<i9>, rhs: %extui0.outs: !handshake.channel<i9>, clk: %clk: i1, rst: %rst: i1) -> (result: !handshake.channel<i9>)
    %addi4.result = hw.instance "addi4" @handshake_addi_0(lhs: %extsi19.outs: !handshake.channel<i9>, rhs: %shli2.result: !handshake.channel<i9>, clk: %clk: i1, rst: %rst: i1) -> (result: !handshake.channel<i9>)
    %addi1.result = hw.instance "addi1" @handshake_addi_0(lhs: %extsi13.outs: !handshake.channel<i9>, rhs: %addi4.result: !handshake.channel<i9>, clk: %clk: i1, rst: %rst: i1) -> (result: !handshake.channel<i9>)
    %load1.addrOut, %load1.dataOut = hw.instance "load1" @handshake_load_1(addrIn: %addi1.result: !handshake.channel<i9>, dataFromMem: %mem_controller5.ldData_0: !handshake.channel<i32>, clk: %clk: i1, rst: %rst: i1) -> (addrOut: !handshake.channel<i9>, dataOut: !handshake.channel<i32>)
    %muli0.result = hw.instance "muli0" @handshake_muli_0(lhs: %load0.dataOut: !handshake.channel<i32>, rhs: %load1.dataOut: !handshake.channel<i32>, clk: %clk: i1, rst: %rst: i1) -> (result: !handshake.channel<i32>)
    %buffer16.outs = hw.instance "buffer16" @handshake_buffer_5(ins: %mux2.outs: !handshake.channel<i32>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i32>)
    %buffer17.outs = hw.instance "buffer17" @handshake_buffer_6(ins: %buffer16.outs: !handshake.channel<i32>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i32>)
    %addi0.result = hw.instance "addi0" @handshake_addi_1(lhs: %buffer17.outs: !handshake.channel<i32>, rhs: %muli0.result: !handshake.channel<i32>, clk: %clk: i1, rst: %rst: i1) -> (result: !handshake.channel<i32>)
    %addi2.result = hw.instance "addi2" @handshake_addi_2(lhs: %extsi14.outs: !handshake.channel<i7>, rhs: %extsi18.outs: !handshake.channel<i7>, clk: %clk: i1, rst: %rst: i1) -> (result: !handshake.channel<i7>)
    %fork6.outs_0, %fork6.outs_1 = hw.instance "fork6" @handshake_fork_5(ins: %addi2.result: !handshake.channel<i7>, clk: %clk: i1, rst: %rst: i1) -> (outs_0: !handshake.channel<i7>, outs_1: !handshake.channel<i7>)
    %trunci2.outs = hw.instance "trunci2" @handshake_trunci_1(ins: %fork6.outs_0: !handshake.channel<i7>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i6>)
    %cmpi0.result = hw.instance "cmpi0" @handshake_cmpi_0(lhs: %fork6.outs_1: !handshake.channel<i7>, rhs: %extsi17.outs: !handshake.channel<i7>, clk: %clk: i1, rst: %rst: i1) -> (result: !handshake.channel<i1>)
    %fork7.outs_0, %fork7.outs_1, %fork7.outs_2, %fork7.outs_3 = hw.instance "fork7" @handshake_fork_6(ins: %cmpi0.result: !handshake.channel<i1>, clk: %clk: i1, rst: %rst: i1) -> (outs_0: !handshake.channel<i1>, outs_1: !handshake.channel<i1>, outs_2: !handshake.channel<i1>, outs_3: !handshake.channel<i1>)
    %cond_br2.trueOut, %cond_br2.falseOut = hw.instance "cond_br2" @handshake_cond_br_0(condition: %fork7.outs_0: !handshake.channel<i1>, data: %trunci2.outs: !handshake.channel<i6>, clk: %clk: i1, rst: %rst: i1) -> (trueOut: !handshake.channel<i6>, falseOut: !handshake.channel<i6>)
    hw.instance "sink0" @handshake_sink_0(ins: %cond_br2.falseOut: !handshake.channel<i6>, clk: %clk: i1, rst: %rst: i1) -> ()
    %buffer32.outs = hw.instance "buffer32" @handshake_buffer_4(ins: %fork7.outs_2: !handshake.channel<i1>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i1>)
    %cond_br3.trueOut, %cond_br3.falseOut = hw.instance "cond_br3" @handshake_cond_br_1(condition: %buffer32.outs: !handshake.channel<i1>, data: %addi0.result: !handshake.channel<i32>, clk: %clk: i1, rst: %rst: i1) -> (trueOut: !handshake.channel<i32>, falseOut: !handshake.channel<i32>)
    %cond_br4.trueOut, %cond_br4.falseOut = hw.instance "cond_br4" @handshake_cond_br_0(condition: %fork7.outs_1: !handshake.channel<i1>, data: %fork4.outs_1: !handshake.channel<i6>, clk: %clk: i1, rst: %rst: i1) -> (trueOut: !handshake.channel<i6>, falseOut: !handshake.channel<i6>)
    %buffer23.outs = hw.instance "buffer23" @handshake_buffer_0(ins: %control_merge1.outs: !handshake.control<>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.control<>)
    %buffer24.outs = hw.instance "buffer24" @handshake_buffer_1(ins: %buffer23.outs: !handshake.control<>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.control<>)
    %cond_br5.trueOut, %cond_br5.falseOut = hw.instance "cond_br5" @handshake_cond_br_2(condition: %fork7.outs_3: !handshake.channel<i1>, data: %buffer24.outs: !handshake.control<>, clk: %clk: i1, rst: %rst: i1) -> (trueOut: !handshake.control<>, falseOut: !handshake.control<>)
    %buffer34.outs = hw.instance "buffer34" @handshake_buffer_2(ins: %cond_br4.falseOut: !handshake.channel<i6>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i6>)
    %buffer35.outs = hw.instance "buffer35" @handshake_buffer_3(ins: %buffer34.outs: !handshake.channel<i6>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i6>)
    %fork8.outs_0, %fork8.outs_1 = hw.instance "fork8" @handshake_fork_7(ins: %buffer35.outs: !handshake.channel<i6>, clk: %clk: i1, rst: %rst: i1) -> (outs_0: !handshake.channel<i6>, outs_1: !handshake.channel<i6>)
    %extsi20.outs = hw.instance "extsi20" @handshake_extsi_3(ins: %fork8.outs_1: !handshake.channel<i6>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i7>)
    %trunci3.outs = hw.instance "trunci3" @handshake_trunci_0(ins: %fork8.outs_0: !handshake.channel<i6>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i5>)
    %buffer38.outs = hw.instance "buffer38" @handshake_buffer_5(ins: %cond_br3.falseOut: !handshake.channel<i32>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i32>)
    %buffer39.outs = hw.instance "buffer39" @handshake_buffer_6(ins: %buffer38.outs: !handshake.channel<i32>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i32>)
    %fork9.outs_0, %fork9.outs_1 = hw.instance "fork9" @handshake_fork_8(ins: %buffer39.outs: !handshake.channel<i32>, clk: %clk: i1, rst: %rst: i1) -> (outs_0: !handshake.channel<i32>, outs_1: !handshake.channel<i32>)
    %buffer42.outs = hw.instance "buffer42" @handshake_buffer_0(ins: %cond_br5.falseOut: !handshake.control<>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.control<>)
    %buffer43.outs = hw.instance "buffer43" @handshake_buffer_1(ins: %buffer42.outs: !handshake.control<>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.control<>)
    %fork10.outs_0, %fork10.outs_1 = hw.instance "fork10" @handshake_fork_1(ins: %buffer43.outs: !handshake.control<>, clk: %clk: i1, rst: %rst: i1) -> (outs_0: !handshake.control<>, outs_1: !handshake.control<>)
    %constant17.outs = hw.instance "constant17" @handshake_constant_2(ctrl: %fork10.outs_0: !handshake.control<>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i2>)
    %extsi7.outs = hw.instance "extsi7" @handshake_extsi_8(ins: %constant17.outs: !handshake.channel<i2>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i32>)
    %source4.outs = hw.instance "source4" @handshake_source_0(clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.control<>)
    %constant18.outs = hw.instance "constant18" @handshake_constant_1(ctrl: %source4.outs: !handshake.control<>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i6>)
    %extsi21.outs = hw.instance "extsi21" @handshake_extsi_3(ins: %constant18.outs: !handshake.channel<i6>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i7>)
    %source5.outs = hw.instance "source5" @handshake_source_0(clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.control<>)
    %constant19.outs = hw.instance "constant19" @handshake_constant_2(ctrl: %source5.outs: !handshake.control<>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i2>)
    %extsi22.outs = hw.instance "extsi22" @handshake_extsi_6(ins: %constant19.outs: !handshake.channel<i2>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i7>)
    %store0.addrOut, %store0.dataToMem = hw.instance "store0" @handshake_store_0(addrIn: %trunci3.outs: !handshake.channel<i5>, dataIn: %fork9.outs_0: !handshake.channel<i32>, clk: %clk: i1, rst: %rst: i1) -> (addrOut: !handshake.channel<i5>, dataToMem: !handshake.channel<i32>)
    %addi3.result = hw.instance "addi3" @handshake_addi_2(lhs: %extsi20.outs: !handshake.channel<i7>, rhs: %extsi22.outs: !handshake.channel<i7>, clk: %clk: i1, rst: %rst: i1) -> (result: !handshake.channel<i7>)
    %fork11.outs_0, %fork11.outs_1 = hw.instance "fork11" @handshake_fork_5(ins: %addi3.result: !handshake.channel<i7>, clk: %clk: i1, rst: %rst: i1) -> (outs_0: !handshake.channel<i7>, outs_1: !handshake.channel<i7>)
    %trunci4.outs = hw.instance "trunci4" @handshake_trunci_1(ins: %fork11.outs_0: !handshake.channel<i7>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i6>)
    %cmpi1.result = hw.instance "cmpi1" @handshake_cmpi_0(lhs: %fork11.outs_1: !handshake.channel<i7>, rhs: %extsi21.outs: !handshake.channel<i7>, clk: %clk: i1, rst: %rst: i1) -> (result: !handshake.channel<i1>)
    %fork12.outs_0, %fork12.outs_1, %fork12.outs_2 = hw.instance "fork12" @handshake_fork_4(ins: %cmpi1.result: !handshake.channel<i1>, clk: %clk: i1, rst: %rst: i1) -> (outs_0: !handshake.channel<i1>, outs_1: !handshake.channel<i1>, outs_2: !handshake.channel<i1>)
    %cond_br6.trueOut, %cond_br6.falseOut = hw.instance "cond_br6" @handshake_cond_br_0(condition: %fork12.outs_0: !handshake.channel<i1>, data: %trunci4.outs: !handshake.channel<i6>, clk: %clk: i1, rst: %rst: i1) -> (trueOut: !handshake.channel<i6>, falseOut: !handshake.channel<i6>)
    hw.instance "sink2" @handshake_sink_0(ins: %cond_br6.falseOut: !handshake.channel<i6>, clk: %clk: i1, rst: %rst: i1) -> ()
    %cond_br7.trueOut, %cond_br7.falseOut = hw.instance "cond_br7" @handshake_cond_br_2(condition: %fork12.outs_1: !handshake.channel<i1>, data: %fork10.outs_1: !handshake.control<>, clk: %clk: i1, rst: %rst: i1) -> (trueOut: !handshake.control<>, falseOut: !handshake.control<>)
    %cond_br8.trueOut, %cond_br8.falseOut = hw.instance "cond_br8" @handshake_cond_br_1(condition: %fork12.outs_2: !handshake.channel<i1>, data: %fork9.outs_1: !handshake.channel<i32>, clk: %clk: i1, rst: %rst: i1) -> (trueOut: !handshake.channel<i32>, falseOut: !handshake.channel<i32>)
    hw.instance "sink3" @handshake_sink_1(ins: %cond_br8.trueOut: !handshake.channel<i32>, clk: %clk: i1, rst: %rst: i1) -> ()
    %buffer53.outs = hw.instance "buffer53" @handshake_buffer_0(ins: %cond_br7.falseOut: !handshake.control<>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.control<>)
    %buffer54.outs = hw.instance "buffer54" @handshake_buffer_1(ins: %buffer53.outs: !handshake.control<>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.control<>)
    %fork13.outs_0, %fork13.outs_1, %fork13.outs_2 = hw.instance "fork13" @handshake_fork_0(ins: %buffer54.outs: !handshake.control<>, clk: %clk: i1, rst: %rst: i1) -> (outs_0: !handshake.control<>, outs_1: !handshake.control<>, outs_2: !handshake.control<>)
    %buffer51.outs = hw.instance "buffer51" @handshake_buffer_5(ins: %cond_br8.falseOut: !handshake.channel<i32>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i32>)
    %buffer52.outs = hw.instance "buffer52" @handshake_buffer_6(ins: %buffer51.outs: !handshake.channel<i32>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i32>)
    hw.output %buffer52.outs, %mem_controller5.memEnd, %mem_controller4.memEnd, %mem_controller3.memEnd, %fork0.outs_1, %mem_controller5.loadEn, %mem_controller5.loadAddr, %mem_controller5.storeEn, %mem_controller5.storeAddr, %mem_controller5.storeData, %mem_controller4.loadEn, %mem_controller4.loadAddr, %mem_controller4.storeEn, %mem_controller4.storeAddr, %mem_controller4.storeData, %mem_controller3.loadEn, %mem_controller3.loadAddr, %mem_controller3.storeEn, %mem_controller3.storeAddr, %mem_controller3.storeData : !handshake.channel<i32>, !handshake.control<>, !handshake.control<>, !handshake.control<>, !handshake.control<>, i1, i9, i1, i9, i32, i1, i5, i1, i5, i32, i1, i5, i1, i5, i32
  }
  hw.module.extern @handshake_fork_0(in %ins : !handshake.control<>, in %clk : i1, in %rst : i1, out outs_0 : !handshake.control<>, out outs_1 : !handshake.control<>, out outs_2 : !handshake.control<>) attributes {hw.name = "handshake.fork", hw.parameters = {DATA_TYPE = !handshake.control<>, SIZE = 3 : ui32}}
  hw.module.extern @handshake_mem_controller_0(in %loadData : i32, in %memStart : !handshake.control<>, in %ctrl_0 : !handshake.channel<i32>, in %stAddr_0 : !handshake.channel<i5>, in %stData_0 : !handshake.channel<i32>, in %ctrlEnd : !handshake.control<>, in %clk : i1, in %rst : i1, out memEnd : !handshake.control<>, out loadEn : i1, out loadAddr : i5, out storeEn : i1, out storeAddr : i5, out storeData : i32) attributes {hw.name = "handshake.mem_controller", hw.parameters = {ADDR_TYPE = !handshake.channel<i5>, DATA_TYPE = !handshake.channel<i32>, NUM_CONTROLS = 1 : ui32, NUM_LOADS = 0 : ui32, NUM_STORES = 1 : ui32}}
  hw.module.extern @handshake_mem_controller_1(in %loadData : i32, in %memStart : !handshake.control<>, in %ldAddr_0 : !handshake.channel<i5>, in %ctrlEnd : !handshake.control<>, in %clk : i1, in %rst : i1, out ldData_0 : !handshake.channel<i32>, out memEnd : !handshake.control<>, out loadEn : i1, out loadAddr : i5, out storeEn : i1, out storeAddr : i5, out storeData : i32) attributes {hw.name = "handshake.mem_controller", hw.parameters = {ADDR_TYPE = !handshake.channel<i5>, DATA_TYPE = !handshake.channel<i32>, NUM_CONTROLS = 0 : ui32, NUM_LOADS = 1 : ui32, NUM_STORES = 0 : ui32}}
  hw.module.extern @handshake_mem_controller_2(in %loadData : i32, in %memStart : !handshake.control<>, in %ldAddr_0 : !handshake.channel<i9>, in %ctrlEnd : !handshake.control<>, in %clk : i1, in %rst : i1, out ldData_0 : !handshake.channel<i32>, out memEnd : !handshake.control<>, out loadEn : i1, out loadAddr : i9, out storeEn : i1, out storeAddr : i9, out storeData : i32) attributes {hw.name = "handshake.mem_controller", hw.parameters = {ADDR_TYPE = !handshake.channel<i9>, DATA_TYPE = !handshake.channel<i32>, NUM_CONTROLS = 0 : ui32, NUM_LOADS = 1 : ui32, NUM_STORES = 0 : ui32}}
  hw.module.extern @handshake_constant_0(in %ctrl : !handshake.control<>, in %clk : i1, in %rst : i1, out outs : !handshake.channel<i1>) attributes {hw.name = "handshake.constant", hw.parameters = {DATA_WIDTH = 1 : ui32, VALUE = "0"}}
  hw.module.extern @handshake_extsi_0(in %ins : !handshake.channel<i1>, in %clk : i1, in %rst : i1, out outs : !handshake.channel<i6>) attributes {hw.name = "handshake.extsi", hw.parameters = {INPUT_TYPE = !handshake.channel<i1>, OUTPUT_TYPE = !handshake.channel<i6>}}
  hw.module.extern @handshake_mux_0(in %index : !handshake.channel<i1>, in %ins_0 : !handshake.channel<i6>, in %ins_1 : !handshake.channel<i6>, in %clk : i1, in %rst : i1, out outs : !handshake.channel<i6>) attributes {hw.name = "handshake.mux", hw.parameters = {DATA_TYPE = !handshake.channel<i6>, SELECT_TYPE = !handshake.channel<i1>, SIZE = 2 : ui32}}
  hw.module.extern @handshake_control_merge_0(in %ins_0 : !handshake.control<>, in %ins_1 : !handshake.control<>, in %clk : i1, in %rst : i1, out outs : !handshake.control<>, out index : !handshake.channel<i1>) attributes {hw.name = "handshake.control_merge", hw.parameters = {DATA_TYPE = !handshake.control<>, INDEX_TYPE = !handshake.channel<i1>, SIZE = 2 : ui32}}
  hw.module.extern @handshake_buffer_0(in %ins : !handshake.control<>, in %clk : i1, in %rst : i1, out outs : !handshake.control<>) attributes {hw.name = "handshake.buffer", hw.parameters = {DATA_TYPE = !handshake.control<>, NUM_SLOTS = 1 : ui32, TIMING = #handshake<timing {D: 1, V: 1, R: 0}>}}
  hw.module.extern @handshake_buffer_1(in %ins : !handshake.control<>, in %clk : i1, in %rst : i1, out outs : !handshake.control<>) attributes {hw.name = "handshake.buffer", hw.parameters = {DATA_TYPE = !handshake.control<>, NUM_SLOTS = 1 : ui32, TIMING = #handshake<timing {R: 1}>}}
  hw.module.extern @handshake_fork_1(in %ins : !handshake.control<>, in %clk : i1, in %rst : i1, out outs_0 : !handshake.control<>, out outs_1 : !handshake.control<>) attributes {hw.name = "handshake.fork", hw.parameters = {DATA_TYPE = !handshake.control<>, SIZE = 2 : ui32}}
  hw.module.extern @handshake_fork_2(in %ins : !handshake.channel<i1>, in %clk : i1, in %rst : i1, out outs_0 : !handshake.channel<i1>, out outs_1 : !handshake.channel<i1>) attributes {hw.name = "handshake.fork", hw.parameters = {DATA_TYPE = !handshake.channel<i1>, SIZE = 2 : ui32}}
  hw.module.extern @handshake_extsi_1(in %ins : !handshake.channel<i1>, in %clk : i1, in %rst : i1, out outs : !handshake.channel<i32>) attributes {hw.name = "handshake.extsi", hw.parameters = {INPUT_TYPE = !handshake.channel<i1>, OUTPUT_TYPE = !handshake.channel<i32>}}
  hw.module.extern @handshake_buffer_2(in %ins : !handshake.channel<i6>, in %clk : i1, in %rst : i1, out outs : !handshake.channel<i6>) attributes {hw.name = "handshake.buffer", hw.parameters = {DATA_TYPE = !handshake.channel<i6>, NUM_SLOTS = 1 : ui32, TIMING = #handshake<timing {D: 1, V: 1, R: 0}>}}
  hw.module.extern @handshake_buffer_3(in %ins : !handshake.channel<i6>, in %clk : i1, in %rst : i1, out outs : !handshake.channel<i6>) attributes {hw.name = "handshake.buffer", hw.parameters = {DATA_TYPE = !handshake.channel<i6>, NUM_SLOTS = 1 : ui32, TIMING = #handshake<timing {R: 1}>}}
  hw.module.extern @handshake_fork_3(in %ins : !handshake.channel<i6>, in %clk : i1, in %rst : i1, out outs_0 : !handshake.channel<i6>, out outs_1 : !handshake.channel<i6>, out outs_2 : !handshake.channel<i6>) attributes {hw.name = "handshake.fork", hw.parameters = {DATA_TYPE = !handshake.channel<i6>, SIZE = 3 : ui32}}
  hw.module.extern @handshake_extsi_2(in %ins : !handshake.channel<i6>, in %clk : i1, in %rst : i1, out outs : !handshake.channel<i9>) attributes {hw.name = "handshake.extsi", hw.parameters = {INPUT_TYPE = !handshake.channel<i6>, OUTPUT_TYPE = !handshake.channel<i9>}}
  hw.module.extern @handshake_extsi_3(in %ins : !handshake.channel<i6>, in %clk : i1, in %rst : i1, out outs : !handshake.channel<i7>) attributes {hw.name = "handshake.extsi", hw.parameters = {INPUT_TYPE = !handshake.channel<i6>, OUTPUT_TYPE = !handshake.channel<i7>}}
  hw.module.extern @handshake_trunci_0(in %ins : !handshake.channel<i6>, in %clk : i1, in %rst : i1, out outs : !handshake.channel<i5>) attributes {hw.name = "handshake.trunci", hw.parameters = {INPUT_TYPE = !handshake.channel<i6>, OUTPUT_TYPE = !handshake.channel<i5>}}
  hw.module.extern @handshake_buffer_4(in %ins : !handshake.channel<i1>, in %clk : i1, in %rst : i1, out outs : !handshake.channel<i1>) attributes {hw.name = "handshake.buffer", hw.parameters = {DATA_TYPE = !handshake.channel<i1>, NUM_SLOTS = 5 : ui32, TIMING = #handshake<timing {R: 1}>}}
  hw.module.extern @handshake_mux_1(in %index : !handshake.channel<i1>, in %ins_0 : !handshake.channel<i32>, in %ins_1 : !handshake.channel<i32>, in %clk : i1, in %rst : i1, out outs : !handshake.channel<i32>) attributes {hw.name = "handshake.mux", hw.parameters = {DATA_TYPE = !handshake.channel<i32>, SELECT_TYPE = !handshake.channel<i1>, SIZE = 2 : ui32}}
  hw.module.extern @handshake_extsi_4(in %ins : !handshake.channel<i5>, in %clk : i1, in %rst : i1, out outs : !handshake.channel<i9>) attributes {hw.name = "handshake.extsi", hw.parameters = {INPUT_TYPE = !handshake.channel<i5>, OUTPUT_TYPE = !handshake.channel<i9>}}
  hw.module.extern @handshake_extsi_5(in %ins : !handshake.channel<i6>, in %clk : i1, in %rst : i1, out outs : !handshake.channel<i8>) attributes {hw.name = "handshake.extsi", hw.parameters = {INPUT_TYPE = !handshake.channel<i6>, OUTPUT_TYPE = !handshake.channel<i8>}}
  hw.module.extern @handshake_fork_4(in %ins : !handshake.channel<i1>, in %clk : i1, in %rst : i1, out outs_0 : !handshake.channel<i1>, out outs_1 : !handshake.channel<i1>, out outs_2 : !handshake.channel<i1>) attributes {hw.name = "handshake.fork", hw.parameters = {DATA_TYPE = !handshake.channel<i1>, SIZE = 3 : ui32}}
  hw.module.extern @handshake_source_0(in %clk : i1, in %rst : i1, out outs : !handshake.control<>) attributes {hw.name = "handshake.source", hw.parameters = {}}
  hw.module.extern @handshake_constant_1(in %ctrl : !handshake.control<>, in %clk : i1, in %rst : i1, out outs : !handshake.channel<i6>) attributes {hw.name = "handshake.constant", hw.parameters = {DATA_WIDTH = 6 : ui32, VALUE = "010100"}}
  hw.module.extern @handshake_constant_2(in %ctrl : !handshake.control<>, in %clk : i1, in %rst : i1, out outs : !handshake.channel<i2>) attributes {hw.name = "handshake.constant", hw.parameters = {DATA_WIDTH = 2 : ui32, VALUE = "01"}}
  hw.module.extern @handshake_extsi_6(in %ins : !handshake.channel<i2>, in %clk : i1, in %rst : i1, out outs : !handshake.channel<i7>) attributes {hw.name = "handshake.extsi", hw.parameters = {INPUT_TYPE = !handshake.channel<i2>, OUTPUT_TYPE = !handshake.channel<i7>}}
  hw.module.extern @handshake_constant_3(in %ctrl : !handshake.control<>, in %clk : i1, in %rst : i1, out outs : !handshake.channel<i4>) attributes {hw.name = "handshake.constant", hw.parameters = {DATA_WIDTH = 4 : ui32, VALUE = "0100"}}
  hw.module.extern @handshake_extui_0(in %ins : !handshake.channel<i4>, in %clk : i1, in %rst : i1, out outs : !handshake.channel<i9>) attributes {hw.name = "handshake.extui", hw.parameters = {INPUT_TYPE = !handshake.channel<i4>, OUTPUT_TYPE = !handshake.channel<i9>}}
  hw.module.extern @handshake_constant_4(in %ctrl : !handshake.control<>, in %clk : i1, in %rst : i1, out outs : !handshake.channel<i3>) attributes {hw.name = "handshake.constant", hw.parameters = {DATA_WIDTH = 3 : ui32, VALUE = "010"}}
  hw.module.extern @handshake_extui_1(in %ins : !handshake.channel<i3>, in %clk : i1, in %rst : i1, out outs : !handshake.channel<i8>) attributes {hw.name = "handshake.extui", hw.parameters = {INPUT_TYPE = !handshake.channel<i3>, OUTPUT_TYPE = !handshake.channel<i8>}}
  hw.module.extern @handshake_load_0(in %addrIn : !handshake.channel<i5>, in %dataFromMem : !handshake.channel<i32>, in %clk : i1, in %rst : i1, out addrOut : !handshake.channel<i5>, out dataOut : !handshake.channel<i32>) attributes {hw.name = "handshake.load", hw.parameters = {ADDR_TYPE = !handshake.channel<i5>, DATA_TYPE = !handshake.channel<i32>}}
  hw.module.extern @handshake_shli_0(in %lhs : !handshake.channel<i8>, in %rhs : !handshake.channel<i8>, in %clk : i1, in %rst : i1, out result : !handshake.channel<i8>) attributes {hw.name = "handshake.shli", hw.parameters = {DATA_TYPE = !handshake.channel<i8>}}
  hw.module.extern @handshake_extsi_7(in %ins : !handshake.channel<i8>, in %clk : i1, in %rst : i1, out outs : !handshake.channel<i9>) attributes {hw.name = "handshake.extsi", hw.parameters = {INPUT_TYPE = !handshake.channel<i8>, OUTPUT_TYPE = !handshake.channel<i9>}}
  hw.module.extern @handshake_shli_1(in %lhs : !handshake.channel<i9>, in %rhs : !handshake.channel<i9>, in %clk : i1, in %rst : i1, out result : !handshake.channel<i9>) attributes {hw.name = "handshake.shli", hw.parameters = {DATA_TYPE = !handshake.channel<i9>}}
  hw.module.extern @handshake_addi_0(in %lhs : !handshake.channel<i9>, in %rhs : !handshake.channel<i9>, in %clk : i1, in %rst : i1, out result : !handshake.channel<i9>) attributes {hw.name = "handshake.addi", hw.parameters = {DATA_TYPE = !handshake.channel<i9>}}
  hw.module.extern @handshake_load_1(in %addrIn : !handshake.channel<i9>, in %dataFromMem : !handshake.channel<i32>, in %clk : i1, in %rst : i1, out addrOut : !handshake.channel<i9>, out dataOut : !handshake.channel<i32>) attributes {hw.name = "handshake.load", hw.parameters = {ADDR_TYPE = !handshake.channel<i9>, DATA_TYPE = !handshake.channel<i32>}}
  hw.module.extern @handshake_muli_0(in %lhs : !handshake.channel<i32>, in %rhs : !handshake.channel<i32>, in %clk : i1, in %rst : i1, out result : !handshake.channel<i32>) attributes {hw.name = "handshake.muli", hw.parameters = {DATA_TYPE = !handshake.channel<i32>}}
  hw.module.extern @handshake_buffer_5(in %ins : !handshake.channel<i32>, in %clk : i1, in %rst : i1, out outs : !handshake.channel<i32>) attributes {hw.name = "handshake.buffer", hw.parameters = {DATA_TYPE = !handshake.channel<i32>, NUM_SLOTS = 1 : ui32, TIMING = #handshake<timing {D: 1, V: 1, R: 0}>}}
  hw.module.extern @handshake_buffer_6(in %ins : !handshake.channel<i32>, in %clk : i1, in %rst : i1, out outs : !handshake.channel<i32>) attributes {hw.name = "handshake.buffer", hw.parameters = {DATA_TYPE = !handshake.channel<i32>, NUM_SLOTS = 1 : ui32, TIMING = #handshake<timing {R: 1}>}}
  hw.module.extern @handshake_addi_1(in %lhs : !handshake.channel<i32>, in %rhs : !handshake.channel<i32>, in %clk : i1, in %rst : i1, out result : !handshake.channel<i32>) attributes {hw.name = "handshake.addi", hw.parameters = {DATA_TYPE = !handshake.channel<i32>}}
  hw.module.extern @handshake_addi_2(in %lhs : !handshake.channel<i7>, in %rhs : !handshake.channel<i7>, in %clk : i1, in %rst : i1, out result : !handshake.channel<i7>) attributes {hw.name = "handshake.addi", hw.parameters = {DATA_TYPE = !handshake.channel<i7>}}
  hw.module.extern @handshake_fork_5(in %ins : !handshake.channel<i7>, in %clk : i1, in %rst : i1, out outs_0 : !handshake.channel<i7>, out outs_1 : !handshake.channel<i7>) attributes {hw.name = "handshake.fork", hw.parameters = {DATA_TYPE = !handshake.channel<i7>, SIZE = 2 : ui32}}
  hw.module.extern @handshake_trunci_1(in %ins : !handshake.channel<i7>, in %clk : i1, in %rst : i1, out outs : !handshake.channel<i6>) attributes {hw.name = "handshake.trunci", hw.parameters = {INPUT_TYPE = !handshake.channel<i7>, OUTPUT_TYPE = !handshake.channel<i6>}}
  hw.module.extern @handshake_cmpi_0(in %lhs : !handshake.channel<i7>, in %rhs : !handshake.channel<i7>, in %clk : i1, in %rst : i1, out result : !handshake.channel<i1>) attributes {hw.name = "handshake.cmpi", hw.parameters = {DATA_TYPE = !handshake.channel<i7>, PREDICATE = "ult"}}
  hw.module.extern @handshake_fork_6(in %ins : !handshake.channel<i1>, in %clk : i1, in %rst : i1, out outs_0 : !handshake.channel<i1>, out outs_1 : !handshake.channel<i1>, out outs_2 : !handshake.channel<i1>, out outs_3 : !handshake.channel<i1>) attributes {hw.name = "handshake.fork", hw.parameters = {DATA_TYPE = !handshake.channel<i1>, SIZE = 4 : ui32}}
  hw.module.extern @handshake_cond_br_0(in %condition : !handshake.channel<i1>, in %data : !handshake.channel<i6>, in %clk : i1, in %rst : i1, out trueOut : !handshake.channel<i6>, out falseOut : !handshake.channel<i6>) attributes {hw.name = "handshake.cond_br", hw.parameters = {DATA_TYPE = !handshake.channel<i6>}}
  hw.module.extern @handshake_sink_0(in %ins : !handshake.channel<i6>, in %clk : i1, in %rst : i1) attributes {hw.name = "handshake.sink", hw.parameters = {DATA_TYPE = !handshake.channel<i6>}}
  hw.module.extern @handshake_cond_br_1(in %condition : !handshake.channel<i1>, in %data : !handshake.channel<i32>, in %clk : i1, in %rst : i1, out trueOut : !handshake.channel<i32>, out falseOut : !handshake.channel<i32>) attributes {hw.name = "handshake.cond_br", hw.parameters = {DATA_TYPE = !handshake.channel<i32>}}
  hw.module.extern @handshake_cond_br_2(in %condition : !handshake.channel<i1>, in %data : !handshake.control<>, in %clk : i1, in %rst : i1, out trueOut : !handshake.control<>, out falseOut : !handshake.control<>) attributes {hw.name = "handshake.cond_br", hw.parameters = {DATA_TYPE = !handshake.control<>}}
  hw.module.extern @handshake_fork_7(in %ins : !handshake.channel<i6>, in %clk : i1, in %rst : i1, out outs_0 : !handshake.channel<i6>, out outs_1 : !handshake.channel<i6>) attributes {hw.name = "handshake.fork", hw.parameters = {DATA_TYPE = !handshake.channel<i6>, SIZE = 2 : ui32}}
  hw.module.extern @handshake_fork_8(in %ins : !handshake.channel<i32>, in %clk : i1, in %rst : i1, out outs_0 : !handshake.channel<i32>, out outs_1 : !handshake.channel<i32>) attributes {hw.name = "handshake.fork", hw.parameters = {DATA_TYPE = !handshake.channel<i32>, SIZE = 2 : ui32}}
  hw.module.extern @handshake_extsi_8(in %ins : !handshake.channel<i2>, in %clk : i1, in %rst : i1, out outs : !handshake.channel<i32>) attributes {hw.name = "handshake.extsi", hw.parameters = {INPUT_TYPE = !handshake.channel<i2>, OUTPUT_TYPE = !handshake.channel<i32>}}
  hw.module.extern @handshake_store_0(in %addrIn : !handshake.channel<i5>, in %dataIn : !handshake.channel<i32>, in %clk : i1, in %rst : i1, out addrOut : !handshake.channel<i5>, out dataToMem : !handshake.channel<i32>) attributes {hw.name = "handshake.store", hw.parameters = {ADDR_TYPE = !handshake.channel<i5>, DATA_TYPE = !handshake.channel<i32>}}
  hw.module.extern @handshake_sink_1(in %ins : !handshake.channel<i32>, in %clk : i1, in %rst : i1) attributes {hw.name = "handshake.sink", hw.parameters = {DATA_TYPE = !handshake.channel<i32>}}
  hw.module.extern @mem_to_bram_32_9(in %loadEn : i1, in %loadAddr : i9, in %storeEn : i1, in %storeAddr : i9, in %storeData : i32, in %din0 : i32, in %din1 : i32, out ce0 : i1, out we0 : i1, out address0 : i9, out dout0 : i32, out ce1 : i1, out we1 : i1, out address1 : i9, out dout1 : i32, out loadData : i32) attributes {hw.name = "mem_to_bram", hw.parameters = {ADDR_WIDTH = 9 : ui32, DATA_WIDTH = 32 : ui32}}
  hw.module.extern @mem_to_bram_32_5(in %loadEn : i1, in %loadAddr : i5, in %storeEn : i1, in %storeAddr : i5, in %storeData : i32, in %din0 : i32, in %din1 : i32, out ce0 : i1, out we0 : i1, out address0 : i5, out dout0 : i32, out ce1 : i1, out we1 : i1, out address1 : i5, out dout1 : i32, out loadData : i32) attributes {hw.name = "mem_to_bram", hw.parameters = {ADDR_WIDTH = 5 : ui32, DATA_WIDTH = 32 : ui32}}
  hw.module @matvec_wrapper(in %m_din0 : i32, in %m_din1 : i32, in %v_din0 : i32, in %v_din1 : i32, in %out_din0 : i32, in %out_din1 : i32, in %m_start : !handshake.control<>, in %v_start : !handshake.control<>, in %out_start : !handshake.control<>, in %start : !handshake.control<>, in %clk : i1, in %rst : i1, out out0 : !handshake.channel<i32>, out m_end : !handshake.control<>, out v_end : !handshake.control<>, out out_end : !handshake.control<>, out end : !handshake.control<>, out m_ce0 : i1, out m_we0 : i1, out m_address0 : i9, out m_dout0 : i32, out m_ce1 : i1, out m_we1 : i1, out m_address1 : i9, out m_dout1 : i32, out v_ce0 : i1, out v_we0 : i1, out v_address0 : i5, out v_dout0 : i32, out v_ce1 : i1, out v_we1 : i1, out v_address1 : i5, out v_dout1 : i32, out out_ce0 : i1, out out_we0 : i1, out out_address0 : i5, out out_dout0 : i32, out out_ce1 : i1, out out_we1 : i1, out out_address1 : i5, out out_dout1 : i32) {
    %mem_to_bram_converter_m.ce0, %mem_to_bram_converter_m.we0, %mem_to_bram_converter_m.address0, %mem_to_bram_converter_m.dout0, %mem_to_bram_converter_m.ce1, %mem_to_bram_converter_m.we1, %mem_to_bram_converter_m.address1, %mem_to_bram_converter_m.dout1, %mem_to_bram_converter_m.loadData = hw.instance "mem_to_bram_converter_m" @mem_to_bram_32_9(loadEn: %matvec_wrapped.m_loadEn: i1, loadAddr: %matvec_wrapped.m_loadAddr: i9, storeEn: %matvec_wrapped.m_storeEn: i1, storeAddr: %matvec_wrapped.m_storeAddr: i9, storeData: %matvec_wrapped.m_storeData: i32, din0: %m_din0: i32, din1: %m_din1: i32) -> (ce0: i1, we0: i1, address0: i9, dout0: i32, ce1: i1, we1: i1, address1: i9, dout1: i32, loadData: i32)
    %mem_to_bram_converter_v.ce0, %mem_to_bram_converter_v.we0, %mem_to_bram_converter_v.address0, %mem_to_bram_converter_v.dout0, %mem_to_bram_converter_v.ce1, %mem_to_bram_converter_v.we1, %mem_to_bram_converter_v.address1, %mem_to_bram_converter_v.dout1, %mem_to_bram_converter_v.loadData = hw.instance "mem_to_bram_converter_v" @mem_to_bram_32_5(loadEn: %matvec_wrapped.v_loadEn: i1, loadAddr: %matvec_wrapped.v_loadAddr: i5, storeEn: %matvec_wrapped.v_storeEn: i1, storeAddr: %matvec_wrapped.v_storeAddr: i5, storeData: %matvec_wrapped.v_storeData: i32, din0: %v_din0: i32, din1: %v_din1: i32) -> (ce0: i1, we0: i1, address0: i5, dout0: i32, ce1: i1, we1: i1, address1: i5, dout1: i32, loadData: i32)
    %mem_to_bram_converter_out.ce0, %mem_to_bram_converter_out.we0, %mem_to_bram_converter_out.address0, %mem_to_bram_converter_out.dout0, %mem_to_bram_converter_out.ce1, %mem_to_bram_converter_out.we1, %mem_to_bram_converter_out.address1, %mem_to_bram_converter_out.dout1, %mem_to_bram_converter_out.loadData = hw.instance "mem_to_bram_converter_out" @mem_to_bram_32_5(loadEn: %matvec_wrapped.out_loadEn: i1, loadAddr: %matvec_wrapped.out_loadAddr: i5, storeEn: %matvec_wrapped.out_storeEn: i1, storeAddr: %matvec_wrapped.out_storeAddr: i5, storeData: %matvec_wrapped.out_storeData: i32, din0: %out_din0: i32, din1: %out_din1: i32) -> (ce0: i1, we0: i1, address0: i5, dout0: i32, ce1: i1, we1: i1, address1: i5, dout1: i32, loadData: i32)
    %matvec_wrapped.out0, %matvec_wrapped.m_end, %matvec_wrapped.v_end, %matvec_wrapped.out_end, %matvec_wrapped.end, %matvec_wrapped.m_loadEn, %matvec_wrapped.m_loadAddr, %matvec_wrapped.m_storeEn, %matvec_wrapped.m_storeAddr, %matvec_wrapped.m_storeData, %matvec_wrapped.v_loadEn, %matvec_wrapped.v_loadAddr, %matvec_wrapped.v_storeEn, %matvec_wrapped.v_storeAddr, %matvec_wrapped.v_storeData, %matvec_wrapped.out_loadEn, %matvec_wrapped.out_loadAddr, %matvec_wrapped.out_storeEn, %matvec_wrapped.out_storeAddr, %matvec_wrapped.out_storeData = hw.instance "matvec_wrapped" @matvec(m_loadData: %mem_to_bram_converter_m.loadData: i32, v_loadData: %mem_to_bram_converter_v.loadData: i32, out_loadData: %mem_to_bram_converter_out.loadData: i32, m_start: %m_start: !handshake.control<>, v_start: %v_start: !handshake.control<>, out_start: %out_start: !handshake.control<>, start: %start: !handshake.control<>, clk: %clk: i1, rst: %rst: i1) -> (out0: !handshake.channel<i32>, m_end: !handshake.control<>, v_end: !handshake.control<>, out_end: !handshake.control<>, end: !handshake.control<>, m_loadEn: i1, m_loadAddr: i9, m_storeEn: i1, m_storeAddr: i9, m_storeData: i32, v_loadEn: i1, v_loadAddr: i5, v_storeEn: i1, v_storeAddr: i5, v_storeData: i32, out_loadEn: i1, out_loadAddr: i5, out_storeEn: i1, out_storeAddr: i5, out_storeData: i32)
    hw.output %matvec_wrapped.out0, %matvec_wrapped.m_end, %matvec_wrapped.v_end, %matvec_wrapped.out_end, %matvec_wrapped.end, %mem_to_bram_converter_m.ce0, %mem_to_bram_converter_m.we0, %mem_to_bram_converter_m.address0, %mem_to_bram_converter_m.dout0, %mem_to_bram_converter_m.ce1, %mem_to_bram_converter_m.we1, %mem_to_bram_converter_m.address1, %mem_to_bram_converter_m.dout1, %mem_to_bram_converter_v.ce0, %mem_to_bram_converter_v.we0, %mem_to_bram_converter_v.address0, %mem_to_bram_converter_v.dout0, %mem_to_bram_converter_v.ce1, %mem_to_bram_converter_v.we1, %mem_to_bram_converter_v.address1, %mem_to_bram_converter_v.dout1, %mem_to_bram_converter_out.ce0, %mem_to_bram_converter_out.we0, %mem_to_bram_converter_out.address0, %mem_to_bram_converter_out.dout0, %mem_to_bram_converter_out.ce1, %mem_to_bram_converter_out.we1, %mem_to_bram_converter_out.address1, %mem_to_bram_converter_out.dout1 : !handshake.channel<i32>, !handshake.control<>, !handshake.control<>, !handshake.control<>, !handshake.control<>, i1, i1, i9, i32, i1, i1, i9, i32, i1, i1, i5, i32, i1, i1, i5, i32, i1, i1, i5, i32, i1, i1, i5, i32
  }
}

