module {
  hw.module @bicg(in %a_loadData : i32, in %s_loadData : i32, in %q_loadData : i32, in %p_loadData : i32, in %r_loadData : i32, in %a_start : !handshake.control<>, in %s_start : !handshake.control<>, in %q_start : !handshake.control<>, in %p_start : !handshake.control<>, in %r_start : !handshake.control<>, in %start : !handshake.control<>, in %clk : i1, in %rst : i1, out out0 : !handshake.channel<i32>, out a_end : !handshake.control<>, out s_end : !handshake.control<>, out q_end : !handshake.control<>, out p_end : !handshake.control<>, out r_end : !handshake.control<>, out end : !handshake.control<>, out a_loadEn : i1, out a_loadAddr : i7, out a_storeEn : i1, out a_storeAddr : i7, out a_storeData : i32, out s_loadEn : i1, out s_loadAddr : i4, out s_storeEn : i1, out s_storeAddr : i4, out s_storeData : i32, out q_loadEn : i1, out q_loadAddr : i4, out q_storeEn : i1, out q_storeAddr : i4, out q_storeData : i32, out p_loadEn : i1, out p_loadAddr : i4, out p_storeEn : i1, out p_storeAddr : i4, out p_storeData : i32, out r_loadEn : i1, out r_loadAddr : i4, out r_storeEn : i1, out r_storeAddr : i4, out r_storeData : i32) {
    %fork0.outs_0, %fork0.outs_1, %fork0.outs_2, %fork0.outs_3, %fork0.outs_4, %fork0.outs_5, %fork0.outs_6, %fork0.outs_7, %fork0.outs_8, %fork0.outs_9 = hw.instance "fork0" @handshake_fork_0(ins: %start: !handshake.control<>, clk: %clk: i1, rst: %rst: i1) -> (outs_0: !handshake.control<>, outs_1: !handshake.control<>, outs_2: !handshake.control<>, outs_3: !handshake.control<>, outs_4: !handshake.control<>, outs_5: !handshake.control<>, outs_6: !handshake.control<>, outs_7: !handshake.control<>, outs_8: !handshake.control<>, outs_9: !handshake.control<>)
    %mem_controller3.ldData_0, %mem_controller3.memEnd, %mem_controller3.loadEn, %mem_controller3.loadAddr, %mem_controller3.storeEn, %mem_controller3.storeAddr, %mem_controller3.storeData = hw.instance "mem_controller3" @handshake_mem_controller_0(loadData: %r_loadData: i32, memStart: %r_start: !handshake.control<>, ldAddr_0: %load3.addrOut: !handshake.channel<i4>, ctrlEnd: %fork0.outs_4: !handshake.control<>, clk: %clk: i1, rst: %rst: i1) -> (ldData_0: !handshake.channel<i32>, memEnd: !handshake.control<>, loadEn: i1, loadAddr: i4, storeEn: i1, storeAddr: i4, storeData: i32)
    %mem_controller4.ldData_0, %mem_controller4.memEnd, %mem_controller4.loadEn, %mem_controller4.loadAddr, %mem_controller4.storeEn, %mem_controller4.storeAddr, %mem_controller4.storeData = hw.instance "mem_controller4" @handshake_mem_controller_0(loadData: %p_loadData: i32, memStart: %p_start: !handshake.control<>, ldAddr_0: %load4.addrOut: !handshake.channel<i4>, ctrlEnd: %fork0.outs_3: !handshake.control<>, clk: %clk: i1, rst: %rst: i1) -> (ldData_0: !handshake.channel<i32>, memEnd: !handshake.control<>, loadEn: i1, loadAddr: i4, storeEn: i1, storeAddr: i4, storeData: i32)
    %lsq2.ldData_0, %lsq2.memEnd, %lsq2.loadEn, %lsq2.loadAddr, %lsq2.storeEn, %lsq2.storeAddr, %lsq2.storeData = hw.instance "lsq2" @handshake_lsq_lsq2(loadData: %q_loadData: i32, memStart: %q_start: !handshake.control<>, ctrl_0: %lazy_fork0.outs_1: !handshake.control<>, ldAddr_0: %load0.addrOut: !handshake.channel<i4>, ctrl_1: %lazy_fork2.outs_1: !handshake.control<>, stAddr_0: %store1.addrOut: !handshake.channel<i4>, stData_0: %store1.dataToMem: !handshake.channel<i32>, ctrlEnd: %fork0.outs_2: !handshake.control<>, clk: %clk: i1, rst: %rst: i1) -> (ldData_0: !handshake.channel<i32>, memEnd: !handshake.control<>, loadEn: i1, loadAddr: i4, storeEn: i1, storeAddr: i4, storeData: i32)
    %lsq3.ldData_0, %lsq3.memEnd, %lsq3.loadEn, %lsq3.loadAddr, %lsq3.storeEn, %lsq3.storeAddr, %lsq3.storeData = hw.instance "lsq3" @handshake_lsq_lsq3(loadData: %s_loadData: i32, memStart: %s_start: !handshake.control<>, ctrl_0: %lazy_fork1.outs_1: !handshake.control<>, ldAddr_0: %load2.addrOut: !handshake.channel<i4>, stAddr_0: %store0.addrOut: !handshake.channel<i4>, stData_0: %store0.dataToMem: !handshake.channel<i32>, ctrlEnd: %fork0.outs_1: !handshake.control<>, clk: %clk: i1, rst: %rst: i1) -> (ldData_0: !handshake.channel<i32>, memEnd: !handshake.control<>, loadEn: i1, loadAddr: i4, storeEn: i1, storeAddr: i4, storeData: i32)
    %mem_controller5.ldData_0, %mem_controller5.memEnd, %mem_controller5.loadEn, %mem_controller5.loadAddr, %mem_controller5.storeEn, %mem_controller5.storeAddr, %mem_controller5.storeData = hw.instance "mem_controller5" @handshake_mem_controller_1(loadData: %a_loadData: i32, memStart: %a_start: !handshake.control<>, ldAddr_0: %load1.addrOut: !handshake.channel<i7>, ctrlEnd: %fork0.outs_0: !handshake.control<>, clk: %clk: i1, rst: %rst: i1) -> (ldData_0: !handshake.channel<i32>, memEnd: !handshake.control<>, loadEn: i1, loadAddr: i7, storeEn: i1, storeAddr: i7, storeData: i32)
    %source0.outs = hw.instance "source0" @handshake_source_0(clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.control<>)
    %constant0.outs = hw.instance "constant0" @handshake_constant_0(ctrl: %source0.outs: !handshake.control<>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i1>)
    %extsi7.outs = hw.instance "extsi7" @handshake_extsi_0(ins: %constant0.outs: !handshake.channel<i1>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i5>)
    %mux1.outs = hw.instance "mux1" @handshake_mux_0(index: %fork1.outs_1: !handshake.channel<i1>, ins_0: %fork0.outs_9: !handshake.control<>, ins_1: %cond_br7.trueOut: !handshake.control<>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.control<>)
    %constant11.outs = hw.instance "constant11" @handshake_constant_0(ctrl: %fork0.outs_8: !handshake.control<>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i1>)
    %mux3.outs = hw.instance "mux3" @handshake_mux_0(index: %fork1.outs_2: !handshake.channel<i1>, ins_0: %fork0.outs_7: !handshake.control<>, ins_1: %cond_br6.trueOut: !handshake.control<>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.control<>)
    %merge2.outs = hw.instance "merge2" @handshake_merge_0(ins_0: %constant11.outs: !handshake.channel<i1>, ins_1: %fork12.outs_4: !handshake.channel<i1>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i1>)
    %buffer14.outs = hw.instance "buffer14" @handshake_buffer_0(ins: %merge2.outs: !handshake.channel<i1>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i1>)
    %fork1.outs_0, %fork1.outs_1, %fork1.outs_2 = hw.instance "fork1" @handshake_fork_1(ins: %buffer14.outs: !handshake.channel<i1>, clk: %clk: i1, rst: %rst: i1) -> (outs_0: !handshake.channel<i1>, outs_1: !handshake.channel<i1>, outs_2: !handshake.channel<i1>)
    %buffer10.outs = hw.instance "buffer10" @handshake_buffer_1(ins: %mux1.outs: !handshake.control<>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.control<>)
    %buffer11.outs = hw.instance "buffer11" @handshake_buffer_2(ins: %buffer10.outs: !handshake.control<>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.control<>)
    %lazy_fork0.outs_0, %lazy_fork0.outs_1 = hw.instance "lazy_fork0" @handshake_lazy_fork_0(ins: %buffer11.outs: !handshake.control<>, clk: %clk: i1, rst: %rst: i1) -> (outs_0: !handshake.control<>, outs_1: !handshake.control<>)
    %mux0.outs = hw.instance "mux0" @handshake_mux_1(index: %fork1.outs_0: !handshake.channel<i1>, ins_0: %extsi7.outs: !handshake.channel<i5>, ins_1: %cond_br18.trueOut: !handshake.channel<i5>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i5>)
    %buffer20.outs = hw.instance "buffer20" @handshake_buffer_3(ins: %mux0.outs: !handshake.channel<i5>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i5>)
    %buffer21.outs = hw.instance "buffer21" @handshake_buffer_4(ins: %buffer20.outs: !handshake.channel<i5>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i5>)
    %fork2.outs_0, %fork2.outs_1, %fork2.outs_2, %fork2.outs_3 = hw.instance "fork2" @handshake_fork_2(ins: %buffer21.outs: !handshake.channel<i5>, clk: %clk: i1, rst: %rst: i1) -> (outs_0: !handshake.channel<i5>, outs_1: !handshake.channel<i5>, outs_2: !handshake.channel<i5>, outs_3: !handshake.channel<i5>)
    %extsi8.outs = hw.instance "extsi8" @handshake_extsi_1(ins: %fork2.outs_2: !handshake.channel<i5>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i6>)
    %trunci0.outs = hw.instance "trunci0" @handshake_trunci_0(ins: %fork2.outs_0: !handshake.channel<i5>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i4>)
    %trunci1.outs = hw.instance "trunci1" @handshake_trunci_0(ins: %fork2.outs_1: !handshake.channel<i5>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i4>)
    %source1.outs = hw.instance "source1" @handshake_source_0(clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.control<>)
    %constant1.outs = hw.instance "constant1" @handshake_constant_0(ctrl: %source1.outs: !handshake.control<>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i1>)
    %extsi9.outs = hw.instance "extsi9" @handshake_extsi_0(ins: %constant1.outs: !handshake.channel<i1>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i5>)
    %load0.addrOut, %load0.dataOut = hw.instance "load0" @handshake_load_0(addrIn: %trunci1.outs: !handshake.channel<i4>, dataFromMem: %lsq2.ldData_0: !handshake.channel<i32>, clk: %clk: i1, rst: %rst: i1) -> (addrOut: !handshake.channel<i4>, dataOut: !handshake.channel<i32>)
    %buffer33.outs = hw.instance "buffer33" @handshake_buffer_2(ins: %lazy_fork1.outs_0: !handshake.control<>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.control<>)
    %cond_br5.trueOut, %cond_br5.falseOut = hw.instance "cond_br5" @handshake_cond_br_0(condition: %fork10.outs_4: !handshake.channel<i1>, data: %buffer33.outs: !handshake.control<>, clk: %clk: i1, rst: %rst: i1) -> (trueOut: !handshake.control<>, falseOut: !handshake.control<>)
    %constant12.outs = hw.instance "constant12" @handshake_constant_0(ctrl: %fork0.outs_6: !handshake.control<>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i1>)
    %buffer12.outs = hw.instance "buffer12" @handshake_buffer_1(ins: %mux3.outs: !handshake.control<>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.control<>)
    %buffer13.outs = hw.instance "buffer13" @handshake_buffer_2(ins: %buffer12.outs: !handshake.control<>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.control<>)
    %mux7.outs = hw.instance "mux7" @handshake_mux_0(index: %fork3.outs_3: !handshake.channel<i1>, ins_0: %buffer13.outs: !handshake.control<>, ins_1: %cond_br5.trueOut: !handshake.control<>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.control<>)
    %merge5.outs = hw.instance "merge5" @handshake_merge_0(ins_0: %constant12.outs: !handshake.channel<i1>, ins_1: %fork10.outs_3: !handshake.channel<i1>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i1>)
    %buffer28.outs = hw.instance "buffer28" @handshake_buffer_0(ins: %merge5.outs: !handshake.channel<i1>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i1>)
    %fork3.outs_0, %fork3.outs_1, %fork3.outs_2, %fork3.outs_3 = hw.instance "fork3" @handshake_fork_3(ins: %buffer28.outs: !handshake.channel<i1>, clk: %clk: i1, rst: %rst: i1) -> (outs_0: !handshake.channel<i1>, outs_1: !handshake.channel<i1>, outs_2: !handshake.channel<i1>, outs_3: !handshake.channel<i1>)
    %buffer26.outs = hw.instance "buffer26" @handshake_buffer_1(ins: %mux7.outs: !handshake.control<>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.control<>)
    %buffer27.outs = hw.instance "buffer27" @handshake_buffer_2(ins: %buffer26.outs: !handshake.control<>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.control<>)
    %lazy_fork1.outs_0, %lazy_fork1.outs_1 = hw.instance "lazy_fork1" @handshake_lazy_fork_0(ins: %buffer27.outs: !handshake.control<>, clk: %clk: i1, rst: %rst: i1) -> (outs_0: !handshake.control<>, outs_1: !handshake.control<>)
    %buffer59.outs = hw.instance "buffer59" @handshake_buffer_5(ins: %fork10.outs_2: !handshake.channel<i1>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i1>)
    %cond_br14.trueOut, %cond_br14.falseOut = hw.instance "cond_br14" @handshake_cond_br_1(condition: %buffer59.outs: !handshake.channel<i1>, data: %addi1.result: !handshake.channel<i32>, clk: %clk: i1, rst: %rst: i1) -> (trueOut: !handshake.channel<i32>, falseOut: !handshake.channel<i32>)
    %fork4.outs_0, %fork4.outs_1 = hw.instance "fork4" @handshake_fork_4(ins: %cond_br14.falseOut: !handshake.channel<i32>, clk: %clk: i1, rst: %rst: i1) -> (outs_0: !handshake.channel<i32>, outs_1: !handshake.channel<i32>)
    %cond_br15.trueOut, %cond_br15.falseOut = hw.instance "cond_br15" @handshake_cond_br_2(condition: %fork10.outs_0: !handshake.channel<i1>, data: %trunci7.outs: !handshake.channel<i5>, clk: %clk: i1, rst: %rst: i1) -> (trueOut: !handshake.channel<i5>, falseOut: !handshake.channel<i5>)
    hw.instance "sink0" @handshake_sink_0(ins: %cond_br15.falseOut: !handshake.channel<i5>, clk: %clk: i1, rst: %rst: i1) -> ()
    %cond_br16.trueOut, %cond_br16.falseOut = hw.instance "cond_br16" @handshake_cond_br_2(condition: %fork10.outs_1: !handshake.channel<i1>, data: %fork5.outs_3: !handshake.channel<i5>, clk: %clk: i1, rst: %rst: i1) -> (trueOut: !handshake.channel<i5>, falseOut: !handshake.channel<i5>)
    hw.instance "sink1" @handshake_sink_0(ins: %cond_br16.falseOut: !handshake.channel<i5>, clk: %clk: i1, rst: %rst: i1) -> ()
    %mux4.outs = hw.instance "mux4" @handshake_mux_1(index: %fork3.outs_0: !handshake.channel<i1>, ins_0: %fork2.outs_3: !handshake.channel<i5>, ins_1: %cond_br16.trueOut: !handshake.channel<i5>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i5>)
    %buffer36.outs = hw.instance "buffer36" @handshake_buffer_3(ins: %mux4.outs: !handshake.channel<i5>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i5>)
    %buffer37.outs = hw.instance "buffer37" @handshake_buffer_4(ins: %buffer36.outs: !handshake.channel<i5>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i5>)
    %fork5.outs_0, %fork5.outs_1, %fork5.outs_2, %fork5.outs_3 = hw.instance "fork5" @handshake_fork_2(ins: %buffer37.outs: !handshake.channel<i5>, clk: %clk: i1, rst: %rst: i1) -> (outs_0: !handshake.channel<i5>, outs_1: !handshake.channel<i5>, outs_2: !handshake.channel<i5>, outs_3: !handshake.channel<i5>)
    %trunci2.outs = hw.instance "trunci2" @handshake_trunci_0(ins: %fork5.outs_0: !handshake.channel<i5>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i4>)
    %extsi10.outs = hw.instance "extsi10" @handshake_extsi_2(ins: %trunci2.outs: !handshake.channel<i4>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i7>)
    %extsi11.outs = hw.instance "extsi11" @handshake_extsi_1(ins: %fork5.outs_2: !handshake.channel<i5>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i6>)
    %trunci3.outs = hw.instance "trunci3" @handshake_trunci_0(ins: %fork5.outs_1: !handshake.channel<i5>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i4>)
    %buffer31.outs = hw.instance "buffer31" @handshake_buffer_5(ins: %fork3.outs_2: !handshake.channel<i1>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i1>)
    %mux5.outs = hw.instance "mux5" @handshake_mux_2(index: %buffer31.outs: !handshake.channel<i1>, ins_0: %load0.dataOut: !handshake.channel<i32>, ins_1: %cond_br14.trueOut: !handshake.channel<i32>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i32>)
    %mux6.outs = hw.instance "mux6" @handshake_mux_1(index: %fork3.outs_1: !handshake.channel<i1>, ins_0: %extsi9.outs: !handshake.channel<i5>, ins_1: %cond_br15.trueOut: !handshake.channel<i5>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i5>)
    %buffer44.outs = hw.instance "buffer44" @handshake_buffer_3(ins: %mux6.outs: !handshake.channel<i5>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i5>)
    %buffer45.outs = hw.instance "buffer45" @handshake_buffer_4(ins: %buffer44.outs: !handshake.channel<i5>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i5>)
    %fork6.outs_0, %fork6.outs_1, %fork6.outs_2, %fork6.outs_3, %fork6.outs_4 = hw.instance "fork6" @handshake_fork_5(ins: %buffer45.outs: !handshake.channel<i5>, clk: %clk: i1, rst: %rst: i1) -> (outs_0: !handshake.channel<i5>, outs_1: !handshake.channel<i5>, outs_2: !handshake.channel<i5>, outs_3: !handshake.channel<i5>, outs_4: !handshake.channel<i5>)
    %extsi12.outs = hw.instance "extsi12" @handshake_extsi_3(ins: %fork6.outs_0: !handshake.channel<i5>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i7>)
    %extsi13.outs = hw.instance "extsi13" @handshake_extsi_1(ins: %fork6.outs_4: !handshake.channel<i5>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i6>)
    %trunci4.outs = hw.instance "trunci4" @handshake_trunci_0(ins: %fork6.outs_1: !handshake.channel<i5>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i4>)
    %buffer48.outs = hw.instance "buffer48" @handshake_buffer_6(ins: %fork6.outs_2: !handshake.channel<i5>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i5>)
    %trunci5.outs = hw.instance "trunci5" @handshake_trunci_0(ins: %buffer48.outs: !handshake.channel<i5>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i4>)
    %trunci6.outs = hw.instance "trunci6" @handshake_trunci_0(ins: %fork6.outs_3: !handshake.channel<i5>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i4>)
    %source2.outs = hw.instance "source2" @handshake_source_0(clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.control<>)
    %constant2.outs = hw.instance "constant2" @handshake_constant_1(ctrl: %source2.outs: !handshake.control<>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i5>)
    %extsi14.outs = hw.instance "extsi14" @handshake_extsi_1(ins: %constant2.outs: !handshake.channel<i5>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i6>)
    %source3.outs = hw.instance "source3" @handshake_source_0(clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.control<>)
    %constant10.outs = hw.instance "constant10" @handshake_constant_2(ctrl: %source3.outs: !handshake.control<>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i2>)
    %fork7.outs_0, %fork7.outs_1 = hw.instance "fork7" @handshake_fork_6(ins: %constant10.outs: !handshake.channel<i2>, clk: %clk: i1, rst: %rst: i1) -> (outs_0: !handshake.channel<i2>, outs_1: !handshake.channel<i2>)
    %extui0.outs = hw.instance "extui0" @handshake_extui_0(ins: %fork7.outs_0: !handshake.channel<i2>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i6>)
    %extsi15.outs = hw.instance "extsi15" @handshake_extsi_4(ins: %fork7.outs_1: !handshake.channel<i2>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i6>)
    %source4.outs = hw.instance "source4" @handshake_source_0(clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.control<>)
    %constant13.outs = hw.instance "constant13" @handshake_constant_3(ctrl: %source4.outs: !handshake.control<>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i3>)
    %extui1.outs = hw.instance "extui1" @handshake_extui_1(ins: %constant13.outs: !handshake.channel<i3>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i7>)
    %shli3.result = hw.instance "shli3" @handshake_shli_0(lhs: %extsi11.outs: !handshake.channel<i6>, rhs: %extui0.outs: !handshake.channel<i6>, clk: %clk: i1, rst: %rst: i1) -> (result: !handshake.channel<i6>)
    %extsi16.outs = hw.instance "extsi16" @handshake_extsi_5(ins: %shli3.result: !handshake.channel<i6>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i7>)
    %shli2.result = hw.instance "shli2" @handshake_shli_1(lhs: %extsi10.outs: !handshake.channel<i7>, rhs: %extui1.outs: !handshake.channel<i7>, clk: %clk: i1, rst: %rst: i1) -> (result: !handshake.channel<i7>)
    %addi5.result = hw.instance "addi5" @handshake_addi_0(lhs: %extsi16.outs: !handshake.channel<i7>, rhs: %shli2.result: !handshake.channel<i7>, clk: %clk: i1, rst: %rst: i1) -> (result: !handshake.channel<i7>)
    %addi2.result = hw.instance "addi2" @handshake_addi_0(lhs: %extsi12.outs: !handshake.channel<i7>, rhs: %addi5.result: !handshake.channel<i7>, clk: %clk: i1, rst: %rst: i1) -> (result: !handshake.channel<i7>)
    %load1.addrOut, %load1.dataOut = hw.instance "load1" @handshake_load_1(addrIn: %addi2.result: !handshake.channel<i7>, dataFromMem: %mem_controller5.ldData_0: !handshake.channel<i32>, clk: %clk: i1, rst: %rst: i1) -> (addrOut: !handshake.channel<i7>, dataOut: !handshake.channel<i32>)
    %fork8.outs_0, %fork8.outs_1 = hw.instance "fork8" @handshake_fork_4(ins: %load1.dataOut: !handshake.channel<i32>, clk: %clk: i1, rst: %rst: i1) -> (outs_0: !handshake.channel<i32>, outs_1: !handshake.channel<i32>)
    %load2.addrOut, %load2.dataOut = hw.instance "load2" @handshake_load_0(addrIn: %trunci6.outs: !handshake.channel<i4>, dataFromMem: %lsq3.ldData_0: !handshake.channel<i32>, clk: %clk: i1, rst: %rst: i1) -> (addrOut: !handshake.channel<i4>, dataOut: !handshake.channel<i32>)
    %load3.addrOut, %load3.dataOut = hw.instance "load3" @handshake_load_0(addrIn: %trunci3.outs: !handshake.channel<i4>, dataFromMem: %mem_controller3.ldData_0: !handshake.channel<i32>, clk: %clk: i1, rst: %rst: i1) -> (addrOut: !handshake.channel<i4>, dataOut: !handshake.channel<i32>)
    %buffer53.outs = hw.instance "buffer53" @handshake_buffer_7(ins: %fork8.outs_0: !handshake.channel<i32>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i32>)
    %muli0.result = hw.instance "muli0" @handshake_muli_0(lhs: %load3.dataOut: !handshake.channel<i32>, rhs: %buffer53.outs: !handshake.channel<i32>, clk: %clk: i1, rst: %rst: i1) -> (result: !handshake.channel<i32>)
    %addi0.result = hw.instance "addi0" @handshake_addi_1(lhs: %load2.dataOut: !handshake.channel<i32>, rhs: %muli0.result: !handshake.channel<i32>, clk: %clk: i1, rst: %rst: i1) -> (result: !handshake.channel<i32>)
    %store0.addrOut, %store0.dataToMem = hw.instance "store0" @handshake_store_0(addrIn: %trunci5.outs: !handshake.channel<i4>, dataIn: %addi0.result: !handshake.channel<i32>, clk: %clk: i1, rst: %rst: i1) -> (addrOut: !handshake.channel<i4>, dataToMem: !handshake.channel<i32>)
    %load4.addrOut, %load4.dataOut = hw.instance "load4" @handshake_load_0(addrIn: %trunci4.outs: !handshake.channel<i4>, dataFromMem: %mem_controller4.ldData_0: !handshake.channel<i32>, clk: %clk: i1, rst: %rst: i1) -> (addrOut: !handshake.channel<i4>, dataOut: !handshake.channel<i32>)
    %muli1.result = hw.instance "muli1" @handshake_muli_0(lhs: %fork8.outs_1: !handshake.channel<i32>, rhs: %load4.dataOut: !handshake.channel<i32>, clk: %clk: i1, rst: %rst: i1) -> (result: !handshake.channel<i32>)
    %buffer42.outs = hw.instance "buffer42" @handshake_buffer_8(ins: %mux5.outs: !handshake.channel<i32>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i32>)
    %buffer43.outs = hw.instance "buffer43" @handshake_buffer_9(ins: %buffer42.outs: !handshake.channel<i32>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i32>)
    %addi1.result = hw.instance "addi1" @handshake_addi_1(lhs: %buffer43.outs: !handshake.channel<i32>, rhs: %muli1.result: !handshake.channel<i32>, clk: %clk: i1, rst: %rst: i1) -> (result: !handshake.channel<i32>)
    %addi3.result = hw.instance "addi3" @handshake_addi_2(lhs: %extsi13.outs: !handshake.channel<i6>, rhs: %extsi15.outs: !handshake.channel<i6>, clk: %clk: i1, rst: %rst: i1) -> (result: !handshake.channel<i6>)
    %fork9.outs_0, %fork9.outs_1 = hw.instance "fork9" @handshake_fork_7(ins: %addi3.result: !handshake.channel<i6>, clk: %clk: i1, rst: %rst: i1) -> (outs_0: !handshake.channel<i6>, outs_1: !handshake.channel<i6>)
    %trunci7.outs = hw.instance "trunci7" @handshake_trunci_1(ins: %fork9.outs_0: !handshake.channel<i6>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i5>)
    %cmpi0.result = hw.instance "cmpi0" @handshake_cmpi_0(lhs: %fork9.outs_1: !handshake.channel<i6>, rhs: %extsi14.outs: !handshake.channel<i6>, clk: %clk: i1, rst: %rst: i1) -> (result: !handshake.channel<i1>)
    %fork10.outs_0, %fork10.outs_1, %fork10.outs_2, %fork10.outs_3, %fork10.outs_4 = hw.instance "fork10" @handshake_fork_8(ins: %cmpi0.result: !handshake.channel<i1>, clk: %clk: i1, rst: %rst: i1) -> (outs_0: !handshake.channel<i1>, outs_1: !handshake.channel<i1>, outs_2: !handshake.channel<i1>, outs_3: !handshake.channel<i1>, outs_4: !handshake.channel<i1>)
    %cond_br6.trueOut, %cond_br6.falseOut = hw.instance "cond_br6" @handshake_cond_br_0(condition: %fork12.outs_3: !handshake.channel<i1>, data: %cond_br5.falseOut: !handshake.control<>, clk: %clk: i1, rst: %rst: i1) -> (trueOut: !handshake.control<>, falseOut: !handshake.control<>)
    hw.instance "sink2" @handshake_sink_1(ins: %cond_br6.falseOut: !handshake.control<>, clk: %clk: i1, rst: %rst: i1) -> ()
    %buffer62.outs = hw.instance "buffer62" @handshake_buffer_1(ins: %lazy_fork2.outs_0: !handshake.control<>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.control<>)
    %cond_br7.trueOut, %cond_br7.falseOut = hw.instance "cond_br7" @handshake_cond_br_0(condition: %fork12.outs_2: !handshake.channel<i1>, data: %buffer62.outs: !handshake.control<>, clk: %clk: i1, rst: %rst: i1) -> (trueOut: !handshake.control<>, falseOut: !handshake.control<>)
    hw.instance "sink3" @handshake_sink_1(ins: %cond_br7.falseOut: !handshake.control<>, clk: %clk: i1, rst: %rst: i1) -> ()
    %buffer18.outs = hw.instance "buffer18" @handshake_buffer_1(ins: %lazy_fork0.outs_0: !handshake.control<>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.control<>)
    %buffer19.outs = hw.instance "buffer19" @handshake_buffer_2(ins: %buffer18.outs: !handshake.control<>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.control<>)
    %lazy_fork2.outs_0, %lazy_fork2.outs_1 = hw.instance "lazy_fork2" @handshake_lazy_fork_0(ins: %buffer19.outs: !handshake.control<>, clk: %clk: i1, rst: %rst: i1) -> (outs_0: !handshake.control<>, outs_1: !handshake.control<>)
    %cond_br17.trueOut, %cond_br17.falseOut = hw.instance "cond_br17" @handshake_cond_br_1(condition: %fork12.outs_1: !handshake.channel<i1>, data: %fork4.outs_1: !handshake.channel<i32>, clk: %clk: i1, rst: %rst: i1) -> (trueOut: !handshake.channel<i32>, falseOut: !handshake.channel<i32>)
    hw.instance "sink4" @handshake_sink_2(ins: %cond_br17.trueOut: !handshake.channel<i32>, clk: %clk: i1, rst: %rst: i1) -> ()
    %cond_br18.trueOut, %cond_br18.falseOut = hw.instance "cond_br18" @handshake_cond_br_2(condition: %fork12.outs_0: !handshake.channel<i1>, data: %trunci8.outs: !handshake.channel<i5>, clk: %clk: i1, rst: %rst: i1) -> (trueOut: !handshake.channel<i5>, falseOut: !handshake.channel<i5>)
    hw.instance "sink5" @handshake_sink_0(ins: %cond_br18.falseOut: !handshake.channel<i5>, clk: %clk: i1, rst: %rst: i1) -> ()
    %source5.outs = hw.instance "source5" @handshake_source_0(clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.control<>)
    %constant14.outs = hw.instance "constant14" @handshake_constant_1(ctrl: %source5.outs: !handshake.control<>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i5>)
    %extsi17.outs = hw.instance "extsi17" @handshake_extsi_1(ins: %constant14.outs: !handshake.channel<i5>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i6>)
    %source6.outs = hw.instance "source6" @handshake_source_0(clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.control<>)
    %constant15.outs = hw.instance "constant15" @handshake_constant_2(ctrl: %source6.outs: !handshake.control<>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i2>)
    %extsi18.outs = hw.instance "extsi18" @handshake_extsi_4(ins: %constant15.outs: !handshake.channel<i2>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i6>)
    %store1.addrOut, %store1.dataToMem = hw.instance "store1" @handshake_store_0(addrIn: %trunci0.outs: !handshake.channel<i4>, dataIn: %fork4.outs_0: !handshake.channel<i32>, clk: %clk: i1, rst: %rst: i1) -> (addrOut: !handshake.channel<i4>, dataToMem: !handshake.channel<i32>)
    %addi4.result = hw.instance "addi4" @handshake_addi_2(lhs: %extsi8.outs: !handshake.channel<i6>, rhs: %extsi18.outs: !handshake.channel<i6>, clk: %clk: i1, rst: %rst: i1) -> (result: !handshake.channel<i6>)
    %fork11.outs_0, %fork11.outs_1 = hw.instance "fork11" @handshake_fork_7(ins: %addi4.result: !handshake.channel<i6>, clk: %clk: i1, rst: %rst: i1) -> (outs_0: !handshake.channel<i6>, outs_1: !handshake.channel<i6>)
    %trunci8.outs = hw.instance "trunci8" @handshake_trunci_1(ins: %fork11.outs_0: !handshake.channel<i6>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i5>)
    %cmpi1.result = hw.instance "cmpi1" @handshake_cmpi_0(lhs: %fork11.outs_1: !handshake.channel<i6>, rhs: %extsi17.outs: !handshake.channel<i6>, clk: %clk: i1, rst: %rst: i1) -> (result: !handshake.channel<i1>)
    %fork12.outs_0, %fork12.outs_1, %fork12.outs_2, %fork12.outs_3, %fork12.outs_4 = hw.instance "fork12" @handshake_fork_8(ins: %cmpi1.result: !handshake.channel<i1>, clk: %clk: i1, rst: %rst: i1) -> (outs_0: !handshake.channel<i1>, outs_1: !handshake.channel<i1>, outs_2: !handshake.channel<i1>, outs_3: !handshake.channel<i1>, outs_4: !handshake.channel<i1>)
    hw.output %cond_br17.falseOut, %mem_controller5.memEnd, %lsq3.memEnd, %lsq2.memEnd, %mem_controller4.memEnd, %mem_controller3.memEnd, %fork0.outs_5, %mem_controller5.loadEn, %mem_controller5.loadAddr, %mem_controller5.storeEn, %mem_controller5.storeAddr, %mem_controller5.storeData, %lsq3.loadEn, %lsq3.loadAddr, %lsq3.storeEn, %lsq3.storeAddr, %lsq3.storeData, %lsq2.loadEn, %lsq2.loadAddr, %lsq2.storeEn, %lsq2.storeAddr, %lsq2.storeData, %mem_controller4.loadEn, %mem_controller4.loadAddr, %mem_controller4.storeEn, %mem_controller4.storeAddr, %mem_controller4.storeData, %mem_controller3.loadEn, %mem_controller3.loadAddr, %mem_controller3.storeEn, %mem_controller3.storeAddr, %mem_controller3.storeData : !handshake.channel<i32>, !handshake.control<>, !handshake.control<>, !handshake.control<>, !handshake.control<>, !handshake.control<>, !handshake.control<>, i1, i7, i1, i7, i32, i1, i4, i1, i4, i32, i1, i4, i1, i4, i32, i1, i4, i1, i4, i32, i1, i4, i1, i4, i32
  }
  hw.module.extern @handshake_fork_0(in %ins : !handshake.control<>, in %clk : i1, in %rst : i1, out outs_0 : !handshake.control<>, out outs_1 : !handshake.control<>, out outs_2 : !handshake.control<>, out outs_3 : !handshake.control<>, out outs_4 : !handshake.control<>, out outs_5 : !handshake.control<>, out outs_6 : !handshake.control<>, out outs_7 : !handshake.control<>, out outs_8 : !handshake.control<>, out outs_9 : !handshake.control<>) attributes {hw.name = "handshake.fork", hw.parameters = {DATA_TYPE = !handshake.control<>, SIZE = 10 : ui32}}
  hw.module.extern @handshake_mem_controller_0(in %loadData : i32, in %memStart : !handshake.control<>, in %ldAddr_0 : !handshake.channel<i4>, in %ctrlEnd : !handshake.control<>, in %clk : i1, in %rst : i1, out ldData_0 : !handshake.channel<i32>, out memEnd : !handshake.control<>, out loadEn : i1, out loadAddr : i4, out storeEn : i1, out storeAddr : i4, out storeData : i32) attributes {hw.name = "handshake.mem_controller", hw.parameters = {ADDR_TYPE = !handshake.channel<i4>, DATA_TYPE = !handshake.channel<i32>, NUM_CONTROLS = 0 : ui32, NUM_LOADS = 1 : ui32, NUM_STORES = 0 : ui32}}
  hw.module.extern @handshake_lsq_lsq2(in %loadData : i32, in %memStart : !handshake.control<>, in %ctrl_0 : !handshake.control<>, in %ldAddr_0 : !handshake.channel<i4>, in %ctrl_1 : !handshake.control<>, in %stAddr_0 : !handshake.channel<i4>, in %stData_0 : !handshake.channel<i32>, in %ctrlEnd : !handshake.control<>, in %clk : i1, in %rst : i1, out ldData_0 : !handshake.channel<i32>, out memEnd : !handshake.control<>, out loadEn : i1, out loadAddr : i4, out storeEn : i1, out storeAddr : i4, out storeData : i32) attributes {hw.name = "handshake.lsq", hw.parameters = {addrWidth = 4 : ui32, bufferDepth = 0 : ui32, dataWidth = 32 : ui32, fifoDepth = 16 : ui32, fifoDepth_L = 16 : ui32, fifoDepth_S = 16 : ui32, groupMulti = 0 : ui32, headLagEn = 0 : ui32, indexWidth = 4 : ui32, ldOrder = [[0 : i32], [0 : i32]], ldPortIdx = [[0 : i32], [0 : i32]], loadOffsets = [[0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32], [0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32]], loadPorts = [[0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32], [0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32]], master = true, name = "handshake_lsq_lsq2", numBBs = 2 : ui32, numLdChannels = 1 : ui32, numLoadPorts = 1 : ui32, numLoads = [1 : i32, 0 : i32], numStChannels = 1 : ui32, numStorePorts = 1 : ui32, numStores = [0 : i32, 1 : i32], pipe0En = 0 : ui32, pipe1En = 0 : ui32, pipeCompEn = 0 : ui32, stPortIdx = [[0 : i32], [0 : i32]], stResp = 0 : ui32, storeOffsets = [[0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32], [0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32]], storePorts = [[0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32], [0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32]]}}
  hw.module.extern @handshake_lsq_lsq3(in %loadData : i32, in %memStart : !handshake.control<>, in %ctrl_0 : !handshake.control<>, in %ldAddr_0 : !handshake.channel<i4>, in %stAddr_0 : !handshake.channel<i4>, in %stData_0 : !handshake.channel<i32>, in %ctrlEnd : !handshake.control<>, in %clk : i1, in %rst : i1, out ldData_0 : !handshake.channel<i32>, out memEnd : !handshake.control<>, out loadEn : i1, out loadAddr : i4, out storeEn : i1, out storeAddr : i4, out storeData : i32) attributes {hw.name = "handshake.lsq", hw.parameters = {addrWidth = 4 : ui32, bufferDepth = 0 : ui32, dataWidth = 32 : ui32, fifoDepth = 16 : ui32, fifoDepth_L = 16 : ui32, fifoDepth_S = 16 : ui32, groupMulti = 0 : ui32, headLagEn = 0 : ui32, indexWidth = 4 : ui32, ldOrder = [[0 : i32]], ldPortIdx = [[0 : i32]], loadOffsets = [[0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32]], loadPorts = [[0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32]], master = true, name = "handshake_lsq_lsq3", numBBs = 1 : ui32, numLdChannels = 1 : ui32, numLoadPorts = 1 : ui32, numLoads = [1 : i32], numStChannels = 1 : ui32, numStorePorts = 1 : ui32, numStores = [1 : i32], pipe0En = 0 : ui32, pipe1En = 0 : ui32, pipeCompEn = 0 : ui32, stPortIdx = [[0 : i32]], stResp = 0 : ui32, storeOffsets = [[1 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32]], storePorts = [[0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32]]}}
  hw.module.extern @handshake_mem_controller_1(in %loadData : i32, in %memStart : !handshake.control<>, in %ldAddr_0 : !handshake.channel<i7>, in %ctrlEnd : !handshake.control<>, in %clk : i1, in %rst : i1, out ldData_0 : !handshake.channel<i32>, out memEnd : !handshake.control<>, out loadEn : i1, out loadAddr : i7, out storeEn : i1, out storeAddr : i7, out storeData : i32) attributes {hw.name = "handshake.mem_controller", hw.parameters = {ADDR_TYPE = !handshake.channel<i7>, DATA_TYPE = !handshake.channel<i32>, NUM_CONTROLS = 0 : ui32, NUM_LOADS = 1 : ui32, NUM_STORES = 0 : ui32}}
  hw.module.extern @handshake_source_0(in %clk : i1, in %rst : i1, out outs : !handshake.control<>) attributes {hw.name = "handshake.source", hw.parameters = {}}
  hw.module.extern @handshake_constant_0(in %ctrl : !handshake.control<>, in %clk : i1, in %rst : i1, out outs : !handshake.channel<i1>) attributes {hw.name = "handshake.constant", hw.parameters = {DATA_WIDTH = 1 : ui32, VALUE = "0"}}
  hw.module.extern @handshake_extsi_0(in %ins : !handshake.channel<i1>, in %clk : i1, in %rst : i1, out outs : !handshake.channel<i5>) attributes {hw.name = "handshake.extsi", hw.parameters = {INPUT_TYPE = !handshake.channel<i1>, OUTPUT_TYPE = !handshake.channel<i5>}}
  hw.module.extern @handshake_mux_0(in %index : !handshake.channel<i1>, in %ins_0 : !handshake.control<>, in %ins_1 : !handshake.control<>, in %clk : i1, in %rst : i1, out outs : !handshake.control<>) attributes {hw.name = "handshake.mux", hw.parameters = {DATA_TYPE = !handshake.control<>, SELECT_TYPE = !handshake.channel<i1>, SIZE = 2 : ui32}}
  hw.module.extern @handshake_merge_0(in %ins_0 : !handshake.channel<i1>, in %ins_1 : !handshake.channel<i1>, in %clk : i1, in %rst : i1, out outs : !handshake.channel<i1>) attributes {hw.name = "handshake.merge", hw.parameters = {DATA_TYPE = !handshake.channel<i1>, SIZE = 2 : ui32}}
  hw.module.extern @handshake_buffer_0(in %ins : !handshake.channel<i1>, in %clk : i1, in %rst : i1, out outs : !handshake.channel<i1>) attributes {hw.name = "handshake.buffer", hw.parameters = {DATA_TYPE = !handshake.channel<i1>, NUM_SLOTS = 1 : ui32, TIMING = #handshake<timing {R: 1}>}}
  hw.module.extern @handshake_fork_1(in %ins : !handshake.channel<i1>, in %clk : i1, in %rst : i1, out outs_0 : !handshake.channel<i1>, out outs_1 : !handshake.channel<i1>, out outs_2 : !handshake.channel<i1>) attributes {hw.name = "handshake.fork", hw.parameters = {DATA_TYPE = !handshake.channel<i1>, SIZE = 3 : ui32}}
  hw.module.extern @handshake_buffer_1(in %ins : !handshake.control<>, in %clk : i1, in %rst : i1, out outs : !handshake.control<>) attributes {hw.name = "handshake.buffer", hw.parameters = {DATA_TYPE = !handshake.control<>, NUM_SLOTS = 1 : ui32, TIMING = #handshake<timing {D: 1, V: 1, R: 0}>}}
  hw.module.extern @handshake_buffer_2(in %ins : !handshake.control<>, in %clk : i1, in %rst : i1, out outs : !handshake.control<>) attributes {hw.name = "handshake.buffer", hw.parameters = {DATA_TYPE = !handshake.control<>, NUM_SLOTS = 1 : ui32, TIMING = #handshake<timing {R: 1}>}}
  hw.module.extern @handshake_lazy_fork_0(in %ins : !handshake.control<>, in %clk : i1, in %rst : i1, out outs_0 : !handshake.control<>, out outs_1 : !handshake.control<>) attributes {hw.name = "handshake.lazy_fork", hw.parameters = {DATA_TYPE = !handshake.control<>, SIZE = 2 : ui32}}
  hw.module.extern @handshake_mux_1(in %index : !handshake.channel<i1>, in %ins_0 : !handshake.channel<i5>, in %ins_1 : !handshake.channel<i5>, in %clk : i1, in %rst : i1, out outs : !handshake.channel<i5>) attributes {hw.name = "handshake.mux", hw.parameters = {DATA_TYPE = !handshake.channel<i5>, SELECT_TYPE = !handshake.channel<i1>, SIZE = 2 : ui32}}
  hw.module.extern @handshake_buffer_3(in %ins : !handshake.channel<i5>, in %clk : i1, in %rst : i1, out outs : !handshake.channel<i5>) attributes {hw.name = "handshake.buffer", hw.parameters = {DATA_TYPE = !handshake.channel<i5>, NUM_SLOTS = 1 : ui32, TIMING = #handshake<timing {D: 1, V: 1, R: 0}>}}
  hw.module.extern @handshake_buffer_4(in %ins : !handshake.channel<i5>, in %clk : i1, in %rst : i1, out outs : !handshake.channel<i5>) attributes {hw.name = "handshake.buffer", hw.parameters = {DATA_TYPE = !handshake.channel<i5>, NUM_SLOTS = 1 : ui32, TIMING = #handshake<timing {R: 1}>}}
  hw.module.extern @handshake_fork_2(in %ins : !handshake.channel<i5>, in %clk : i1, in %rst : i1, out outs_0 : !handshake.channel<i5>, out outs_1 : !handshake.channel<i5>, out outs_2 : !handshake.channel<i5>, out outs_3 : !handshake.channel<i5>) attributes {hw.name = "handshake.fork", hw.parameters = {DATA_TYPE = !handshake.channel<i5>, SIZE = 4 : ui32}}
  hw.module.extern @handshake_extsi_1(in %ins : !handshake.channel<i5>, in %clk : i1, in %rst : i1, out outs : !handshake.channel<i6>) attributes {hw.name = "handshake.extsi", hw.parameters = {INPUT_TYPE = !handshake.channel<i5>, OUTPUT_TYPE = !handshake.channel<i6>}}
  hw.module.extern @handshake_trunci_0(in %ins : !handshake.channel<i5>, in %clk : i1, in %rst : i1, out outs : !handshake.channel<i4>) attributes {hw.name = "handshake.trunci", hw.parameters = {INPUT_TYPE = !handshake.channel<i5>, OUTPUT_TYPE = !handshake.channel<i4>}}
  hw.module.extern @handshake_load_0(in %addrIn : !handshake.channel<i4>, in %dataFromMem : !handshake.channel<i32>, in %clk : i1, in %rst : i1, out addrOut : !handshake.channel<i4>, out dataOut : !handshake.channel<i32>) attributes {hw.name = "handshake.load", hw.parameters = {ADDR_TYPE = !handshake.channel<i4>, DATA_TYPE = !handshake.channel<i32>}}
  hw.module.extern @handshake_cond_br_0(in %condition : !handshake.channel<i1>, in %data : !handshake.control<>, in %clk : i1, in %rst : i1, out trueOut : !handshake.control<>, out falseOut : !handshake.control<>) attributes {hw.name = "handshake.cond_br", hw.parameters = {DATA_TYPE = !handshake.control<>}}
  hw.module.extern @handshake_fork_3(in %ins : !handshake.channel<i1>, in %clk : i1, in %rst : i1, out outs_0 : !handshake.channel<i1>, out outs_1 : !handshake.channel<i1>, out outs_2 : !handshake.channel<i1>, out outs_3 : !handshake.channel<i1>) attributes {hw.name = "handshake.fork", hw.parameters = {DATA_TYPE = !handshake.channel<i1>, SIZE = 4 : ui32}}
  hw.module.extern @handshake_buffer_5(in %ins : !handshake.channel<i1>, in %clk : i1, in %rst : i1, out outs : !handshake.channel<i1>) attributes {hw.name = "handshake.buffer", hw.parameters = {DATA_TYPE = !handshake.channel<i1>, NUM_SLOTS = 5 : ui32, TIMING = #handshake<timing {R: 1}>}}
  hw.module.extern @handshake_cond_br_1(in %condition : !handshake.channel<i1>, in %data : !handshake.channel<i32>, in %clk : i1, in %rst : i1, out trueOut : !handshake.channel<i32>, out falseOut : !handshake.channel<i32>) attributes {hw.name = "handshake.cond_br", hw.parameters = {DATA_TYPE = !handshake.channel<i32>}}
  hw.module.extern @handshake_fork_4(in %ins : !handshake.channel<i32>, in %clk : i1, in %rst : i1, out outs_0 : !handshake.channel<i32>, out outs_1 : !handshake.channel<i32>) attributes {hw.name = "handshake.fork", hw.parameters = {DATA_TYPE = !handshake.channel<i32>, SIZE = 2 : ui32}}
  hw.module.extern @handshake_cond_br_2(in %condition : !handshake.channel<i1>, in %data : !handshake.channel<i5>, in %clk : i1, in %rst : i1, out trueOut : !handshake.channel<i5>, out falseOut : !handshake.channel<i5>) attributes {hw.name = "handshake.cond_br", hw.parameters = {DATA_TYPE = !handshake.channel<i5>}}
  hw.module.extern @handshake_sink_0(in %ins : !handshake.channel<i5>, in %clk : i1, in %rst : i1) attributes {hw.name = "handshake.sink", hw.parameters = {DATA_TYPE = !handshake.channel<i5>}}
  hw.module.extern @handshake_extsi_2(in %ins : !handshake.channel<i4>, in %clk : i1, in %rst : i1, out outs : !handshake.channel<i7>) attributes {hw.name = "handshake.extsi", hw.parameters = {INPUT_TYPE = !handshake.channel<i4>, OUTPUT_TYPE = !handshake.channel<i7>}}
  hw.module.extern @handshake_mux_2(in %index : !handshake.channel<i1>, in %ins_0 : !handshake.channel<i32>, in %ins_1 : !handshake.channel<i32>, in %clk : i1, in %rst : i1, out outs : !handshake.channel<i32>) attributes {hw.name = "handshake.mux", hw.parameters = {DATA_TYPE = !handshake.channel<i32>, SELECT_TYPE = !handshake.channel<i1>, SIZE = 2 : ui32}}
  hw.module.extern @handshake_fork_5(in %ins : !handshake.channel<i5>, in %clk : i1, in %rst : i1, out outs_0 : !handshake.channel<i5>, out outs_1 : !handshake.channel<i5>, out outs_2 : !handshake.channel<i5>, out outs_3 : !handshake.channel<i5>, out outs_4 : !handshake.channel<i5>) attributes {hw.name = "handshake.fork", hw.parameters = {DATA_TYPE = !handshake.channel<i5>, SIZE = 5 : ui32}}
  hw.module.extern @handshake_extsi_3(in %ins : !handshake.channel<i5>, in %clk : i1, in %rst : i1, out outs : !handshake.channel<i7>) attributes {hw.name = "handshake.extsi", hw.parameters = {INPUT_TYPE = !handshake.channel<i5>, OUTPUT_TYPE = !handshake.channel<i7>}}
  hw.module.extern @handshake_buffer_6(in %ins : !handshake.channel<i5>, in %clk : i1, in %rst : i1, out outs : !handshake.channel<i5>) attributes {hw.name = "handshake.buffer", hw.parameters = {DATA_TYPE = !handshake.channel<i5>, NUM_SLOTS = 5 : ui32, TIMING = #handshake<timing {R: 1}>}}
  hw.module.extern @handshake_constant_1(in %ctrl : !handshake.control<>, in %clk : i1, in %rst : i1, out outs : !handshake.channel<i5>) attributes {hw.name = "handshake.constant", hw.parameters = {DATA_WIDTH = 5 : ui32, VALUE = "01010"}}
  hw.module.extern @handshake_constant_2(in %ctrl : !handshake.control<>, in %clk : i1, in %rst : i1, out outs : !handshake.channel<i2>) attributes {hw.name = "handshake.constant", hw.parameters = {DATA_WIDTH = 2 : ui32, VALUE = "01"}}
  hw.module.extern @handshake_fork_6(in %ins : !handshake.channel<i2>, in %clk : i1, in %rst : i1, out outs_0 : !handshake.channel<i2>, out outs_1 : !handshake.channel<i2>) attributes {hw.name = "handshake.fork", hw.parameters = {DATA_TYPE = !handshake.channel<i2>, SIZE = 2 : ui32}}
  hw.module.extern @handshake_extui_0(in %ins : !handshake.channel<i2>, in %clk : i1, in %rst : i1, out outs : !handshake.channel<i6>) attributes {hw.name = "handshake.extui", hw.parameters = {INPUT_TYPE = !handshake.channel<i2>, OUTPUT_TYPE = !handshake.channel<i6>}}
  hw.module.extern @handshake_extsi_4(in %ins : !handshake.channel<i2>, in %clk : i1, in %rst : i1, out outs : !handshake.channel<i6>) attributes {hw.name = "handshake.extsi", hw.parameters = {INPUT_TYPE = !handshake.channel<i2>, OUTPUT_TYPE = !handshake.channel<i6>}}
  hw.module.extern @handshake_constant_3(in %ctrl : !handshake.control<>, in %clk : i1, in %rst : i1, out outs : !handshake.channel<i3>) attributes {hw.name = "handshake.constant", hw.parameters = {DATA_WIDTH = 3 : ui32, VALUE = "011"}}
  hw.module.extern @handshake_extui_1(in %ins : !handshake.channel<i3>, in %clk : i1, in %rst : i1, out outs : !handshake.channel<i7>) attributes {hw.name = "handshake.extui", hw.parameters = {INPUT_TYPE = !handshake.channel<i3>, OUTPUT_TYPE = !handshake.channel<i7>}}
  hw.module.extern @handshake_shli_0(in %lhs : !handshake.channel<i6>, in %rhs : !handshake.channel<i6>, in %clk : i1, in %rst : i1, out result : !handshake.channel<i6>) attributes {hw.name = "handshake.shli", hw.parameters = {DATA_TYPE = !handshake.channel<i6>}}
  hw.module.extern @handshake_extsi_5(in %ins : !handshake.channel<i6>, in %clk : i1, in %rst : i1, out outs : !handshake.channel<i7>) attributes {hw.name = "handshake.extsi", hw.parameters = {INPUT_TYPE = !handshake.channel<i6>, OUTPUT_TYPE = !handshake.channel<i7>}}
  hw.module.extern @handshake_shli_1(in %lhs : !handshake.channel<i7>, in %rhs : !handshake.channel<i7>, in %clk : i1, in %rst : i1, out result : !handshake.channel<i7>) attributes {hw.name = "handshake.shli", hw.parameters = {DATA_TYPE = !handshake.channel<i7>}}
  hw.module.extern @handshake_addi_0(in %lhs : !handshake.channel<i7>, in %rhs : !handshake.channel<i7>, in %clk : i1, in %rst : i1, out result : !handshake.channel<i7>) attributes {hw.name = "handshake.addi", hw.parameters = {DATA_TYPE = !handshake.channel<i7>}}
  hw.module.extern @handshake_load_1(in %addrIn : !handshake.channel<i7>, in %dataFromMem : !handshake.channel<i32>, in %clk : i1, in %rst : i1, out addrOut : !handshake.channel<i7>, out dataOut : !handshake.channel<i32>) attributes {hw.name = "handshake.load", hw.parameters = {ADDR_TYPE = !handshake.channel<i7>, DATA_TYPE = !handshake.channel<i32>}}
  hw.module.extern @handshake_buffer_7(in %ins : !handshake.channel<i32>, in %clk : i1, in %rst : i1, out outs : !handshake.channel<i32>) attributes {hw.name = "handshake.buffer", hw.parameters = {DATA_TYPE = !handshake.channel<i32>, NUM_SLOTS = 5 : ui32, TIMING = #handshake<timing {R: 1}>}}
  hw.module.extern @handshake_muli_0(in %lhs : !handshake.channel<i32>, in %rhs : !handshake.channel<i32>, in %clk : i1, in %rst : i1, out result : !handshake.channel<i32>) attributes {hw.name = "handshake.muli", hw.parameters = {DATA_TYPE = !handshake.channel<i32>}}
  hw.module.extern @handshake_addi_1(in %lhs : !handshake.channel<i32>, in %rhs : !handshake.channel<i32>, in %clk : i1, in %rst : i1, out result : !handshake.channel<i32>) attributes {hw.name = "handshake.addi", hw.parameters = {DATA_TYPE = !handshake.channel<i32>}}
  hw.module.extern @handshake_store_0(in %addrIn : !handshake.channel<i4>, in %dataIn : !handshake.channel<i32>, in %clk : i1, in %rst : i1, out addrOut : !handshake.channel<i4>, out dataToMem : !handshake.channel<i32>) attributes {hw.name = "handshake.store", hw.parameters = {ADDR_TYPE = !handshake.channel<i4>, DATA_TYPE = !handshake.channel<i32>}}
  hw.module.extern @handshake_buffer_8(in %ins : !handshake.channel<i32>, in %clk : i1, in %rst : i1, out outs : !handshake.channel<i32>) attributes {hw.name = "handshake.buffer", hw.parameters = {DATA_TYPE = !handshake.channel<i32>, NUM_SLOTS = 1 : ui32, TIMING = #handshake<timing {D: 1, V: 1, R: 0}>}}
  hw.module.extern @handshake_buffer_9(in %ins : !handshake.channel<i32>, in %clk : i1, in %rst : i1, out outs : !handshake.channel<i32>) attributes {hw.name = "handshake.buffer", hw.parameters = {DATA_TYPE = !handshake.channel<i32>, NUM_SLOTS = 1 : ui32, TIMING = #handshake<timing {R: 1}>}}
  hw.module.extern @handshake_addi_2(in %lhs : !handshake.channel<i6>, in %rhs : !handshake.channel<i6>, in %clk : i1, in %rst : i1, out result : !handshake.channel<i6>) attributes {hw.name = "handshake.addi", hw.parameters = {DATA_TYPE = !handshake.channel<i6>}}
  hw.module.extern @handshake_fork_7(in %ins : !handshake.channel<i6>, in %clk : i1, in %rst : i1, out outs_0 : !handshake.channel<i6>, out outs_1 : !handshake.channel<i6>) attributes {hw.name = "handshake.fork", hw.parameters = {DATA_TYPE = !handshake.channel<i6>, SIZE = 2 : ui32}}
  hw.module.extern @handshake_trunci_1(in %ins : !handshake.channel<i6>, in %clk : i1, in %rst : i1, out outs : !handshake.channel<i5>) attributes {hw.name = "handshake.trunci", hw.parameters = {INPUT_TYPE = !handshake.channel<i6>, OUTPUT_TYPE = !handshake.channel<i5>}}
  hw.module.extern @handshake_cmpi_0(in %lhs : !handshake.channel<i6>, in %rhs : !handshake.channel<i6>, in %clk : i1, in %rst : i1, out result : !handshake.channel<i1>) attributes {hw.name = "handshake.cmpi", hw.parameters = {DATA_TYPE = !handshake.channel<i6>, PREDICATE = "ult"}}
  hw.module.extern @handshake_fork_8(in %ins : !handshake.channel<i1>, in %clk : i1, in %rst : i1, out outs_0 : !handshake.channel<i1>, out outs_1 : !handshake.channel<i1>, out outs_2 : !handshake.channel<i1>, out outs_3 : !handshake.channel<i1>, out outs_4 : !handshake.channel<i1>) attributes {hw.name = "handshake.fork", hw.parameters = {DATA_TYPE = !handshake.channel<i1>, SIZE = 5 : ui32}}
  hw.module.extern @handshake_sink_1(in %ins : !handshake.control<>, in %clk : i1, in %rst : i1) attributes {hw.name = "handshake.sink", hw.parameters = {DATA_TYPE = !handshake.control<>}}
  hw.module.extern @handshake_sink_2(in %ins : !handshake.channel<i32>, in %clk : i1, in %rst : i1) attributes {hw.name = "handshake.sink", hw.parameters = {DATA_TYPE = !handshake.channel<i32>}}
  hw.module.extern @mem_to_bram_32_7(in %loadEn : i1, in %loadAddr : i7, in %storeEn : i1, in %storeAddr : i7, in %storeData : i32, in %din0 : i32, in %din1 : i32, out ce0 : i1, out we0 : i1, out address0 : i7, out dout0 : i32, out ce1 : i1, out we1 : i1, out address1 : i7, out dout1 : i32, out loadData : i32) attributes {hw.name = "mem_to_bram", hw.parameters = {ADDR_WIDTH = 7 : ui32, DATA_WIDTH = 32 : ui32}}
  hw.module.extern @mem_to_bram_32_4(in %loadEn : i1, in %loadAddr : i4, in %storeEn : i1, in %storeAddr : i4, in %storeData : i32, in %din0 : i32, in %din1 : i32, out ce0 : i1, out we0 : i1, out address0 : i4, out dout0 : i32, out ce1 : i1, out we1 : i1, out address1 : i4, out dout1 : i32, out loadData : i32) attributes {hw.name = "mem_to_bram", hw.parameters = {ADDR_WIDTH = 4 : ui32, DATA_WIDTH = 32 : ui32}}
  hw.module @bicg_wrapper(in %a_din0 : i32, in %a_din1 : i32, in %s_din0 : i32, in %s_din1 : i32, in %q_din0 : i32, in %q_din1 : i32, in %p_din0 : i32, in %p_din1 : i32, in %r_din0 : i32, in %r_din1 : i32, in %a_start : !handshake.control<>, in %s_start : !handshake.control<>, in %q_start : !handshake.control<>, in %p_start : !handshake.control<>, in %r_start : !handshake.control<>, in %start : !handshake.control<>, in %clk : i1, in %rst : i1, out out0 : !handshake.channel<i32>, out a_end : !handshake.control<>, out s_end : !handshake.control<>, out q_end : !handshake.control<>, out p_end : !handshake.control<>, out r_end : !handshake.control<>, out end : !handshake.control<>, out a_ce0 : i1, out a_we0 : i1, out a_address0 : i7, out a_dout0 : i32, out a_ce1 : i1, out a_we1 : i1, out a_address1 : i7, out a_dout1 : i32, out s_ce0 : i1, out s_we0 : i1, out s_address0 : i4, out s_dout0 : i32, out s_ce1 : i1, out s_we1 : i1, out s_address1 : i4, out s_dout1 : i32, out q_ce0 : i1, out q_we0 : i1, out q_address0 : i4, out q_dout0 : i32, out q_ce1 : i1, out q_we1 : i1, out q_address1 : i4, out q_dout1 : i32, out p_ce0 : i1, out p_we0 : i1, out p_address0 : i4, out p_dout0 : i32, out p_ce1 : i1, out p_we1 : i1, out p_address1 : i4, out p_dout1 : i32, out r_ce0 : i1, out r_we0 : i1, out r_address0 : i4, out r_dout0 : i32, out r_ce1 : i1, out r_we1 : i1, out r_address1 : i4, out r_dout1 : i32) {
    %mem_to_bram_converter_p.ce0, %mem_to_bram_converter_p.we0, %mem_to_bram_converter_p.address0, %mem_to_bram_converter_p.dout0, %mem_to_bram_converter_p.ce1, %mem_to_bram_converter_p.we1, %mem_to_bram_converter_p.address1, %mem_to_bram_converter_p.dout1, %mem_to_bram_converter_p.loadData = hw.instance "mem_to_bram_converter_p" @mem_to_bram_32_4(loadEn: %bicg_wrapped.p_loadEn: i1, loadAddr: %bicg_wrapped.p_loadAddr: i4, storeEn: %bicg_wrapped.p_storeEn: i1, storeAddr: %bicg_wrapped.p_storeAddr: i4, storeData: %bicg_wrapped.p_storeData: i32, din0: %p_din0: i32, din1: %p_din1: i32) -> (ce0: i1, we0: i1, address0: i4, dout0: i32, ce1: i1, we1: i1, address1: i4, dout1: i32, loadData: i32)
    %mem_to_bram_converter_q.ce0, %mem_to_bram_converter_q.we0, %mem_to_bram_converter_q.address0, %mem_to_bram_converter_q.dout0, %mem_to_bram_converter_q.ce1, %mem_to_bram_converter_q.we1, %mem_to_bram_converter_q.address1, %mem_to_bram_converter_q.dout1, %mem_to_bram_converter_q.loadData = hw.instance "mem_to_bram_converter_q" @mem_to_bram_32_4(loadEn: %bicg_wrapped.q_loadEn: i1, loadAddr: %bicg_wrapped.q_loadAddr: i4, storeEn: %bicg_wrapped.q_storeEn: i1, storeAddr: %bicg_wrapped.q_storeAddr: i4, storeData: %bicg_wrapped.q_storeData: i32, din0: %q_din0: i32, din1: %q_din1: i32) -> (ce0: i1, we0: i1, address0: i4, dout0: i32, ce1: i1, we1: i1, address1: i4, dout1: i32, loadData: i32)
    %mem_to_bram_converter_a.ce0, %mem_to_bram_converter_a.we0, %mem_to_bram_converter_a.address0, %mem_to_bram_converter_a.dout0, %mem_to_bram_converter_a.ce1, %mem_to_bram_converter_a.we1, %mem_to_bram_converter_a.address1, %mem_to_bram_converter_a.dout1, %mem_to_bram_converter_a.loadData = hw.instance "mem_to_bram_converter_a" @mem_to_bram_32_7(loadEn: %bicg_wrapped.a_loadEn: i1, loadAddr: %bicg_wrapped.a_loadAddr: i7, storeEn: %bicg_wrapped.a_storeEn: i1, storeAddr: %bicg_wrapped.a_storeAddr: i7, storeData: %bicg_wrapped.a_storeData: i32, din0: %a_din0: i32, din1: %a_din1: i32) -> (ce0: i1, we0: i1, address0: i7, dout0: i32, ce1: i1, we1: i1, address1: i7, dout1: i32, loadData: i32)
    %mem_to_bram_converter_r.ce0, %mem_to_bram_converter_r.we0, %mem_to_bram_converter_r.address0, %mem_to_bram_converter_r.dout0, %mem_to_bram_converter_r.ce1, %mem_to_bram_converter_r.we1, %mem_to_bram_converter_r.address1, %mem_to_bram_converter_r.dout1, %mem_to_bram_converter_r.loadData = hw.instance "mem_to_bram_converter_r" @mem_to_bram_32_4(loadEn: %bicg_wrapped.r_loadEn: i1, loadAddr: %bicg_wrapped.r_loadAddr: i4, storeEn: %bicg_wrapped.r_storeEn: i1, storeAddr: %bicg_wrapped.r_storeAddr: i4, storeData: %bicg_wrapped.r_storeData: i32, din0: %r_din0: i32, din1: %r_din1: i32) -> (ce0: i1, we0: i1, address0: i4, dout0: i32, ce1: i1, we1: i1, address1: i4, dout1: i32, loadData: i32)
    %mem_to_bram_converter_s.ce0, %mem_to_bram_converter_s.we0, %mem_to_bram_converter_s.address0, %mem_to_bram_converter_s.dout0, %mem_to_bram_converter_s.ce1, %mem_to_bram_converter_s.we1, %mem_to_bram_converter_s.address1, %mem_to_bram_converter_s.dout1, %mem_to_bram_converter_s.loadData = hw.instance "mem_to_bram_converter_s" @mem_to_bram_32_4(loadEn: %bicg_wrapped.s_loadEn: i1, loadAddr: %bicg_wrapped.s_loadAddr: i4, storeEn: %bicg_wrapped.s_storeEn: i1, storeAddr: %bicg_wrapped.s_storeAddr: i4, storeData: %bicg_wrapped.s_storeData: i32, din0: %s_din0: i32, din1: %s_din1: i32) -> (ce0: i1, we0: i1, address0: i4, dout0: i32, ce1: i1, we1: i1, address1: i4, dout1: i32, loadData: i32)
    %bicg_wrapped.out0, %bicg_wrapped.a_end, %bicg_wrapped.s_end, %bicg_wrapped.q_end, %bicg_wrapped.p_end, %bicg_wrapped.r_end, %bicg_wrapped.end, %bicg_wrapped.a_loadEn, %bicg_wrapped.a_loadAddr, %bicg_wrapped.a_storeEn, %bicg_wrapped.a_storeAddr, %bicg_wrapped.a_storeData, %bicg_wrapped.s_loadEn, %bicg_wrapped.s_loadAddr, %bicg_wrapped.s_storeEn, %bicg_wrapped.s_storeAddr, %bicg_wrapped.s_storeData, %bicg_wrapped.q_loadEn, %bicg_wrapped.q_loadAddr, %bicg_wrapped.q_storeEn, %bicg_wrapped.q_storeAddr, %bicg_wrapped.q_storeData, %bicg_wrapped.p_loadEn, %bicg_wrapped.p_loadAddr, %bicg_wrapped.p_storeEn, %bicg_wrapped.p_storeAddr, %bicg_wrapped.p_storeData, %bicg_wrapped.r_loadEn, %bicg_wrapped.r_loadAddr, %bicg_wrapped.r_storeEn, %bicg_wrapped.r_storeAddr, %bicg_wrapped.r_storeData = hw.instance "bicg_wrapped" @bicg(a_loadData: %mem_to_bram_converter_a.loadData: i32, s_loadData: %mem_to_bram_converter_s.loadData: i32, q_loadData: %mem_to_bram_converter_q.loadData: i32, p_loadData: %mem_to_bram_converter_p.loadData: i32, r_loadData: %mem_to_bram_converter_r.loadData: i32, a_start: %a_start: !handshake.control<>, s_start: %s_start: !handshake.control<>, q_start: %q_start: !handshake.control<>, p_start: %p_start: !handshake.control<>, r_start: %r_start: !handshake.control<>, start: %start: !handshake.control<>, clk: %clk: i1, rst: %rst: i1) -> (out0: !handshake.channel<i32>, a_end: !handshake.control<>, s_end: !handshake.control<>, q_end: !handshake.control<>, p_end: !handshake.control<>, r_end: !handshake.control<>, end: !handshake.control<>, a_loadEn: i1, a_loadAddr: i7, a_storeEn: i1, a_storeAddr: i7, a_storeData: i32, s_loadEn: i1, s_loadAddr: i4, s_storeEn: i1, s_storeAddr: i4, s_storeData: i32, q_loadEn: i1, q_loadAddr: i4, q_storeEn: i1, q_storeAddr: i4, q_storeData: i32, p_loadEn: i1, p_loadAddr: i4, p_storeEn: i1, p_storeAddr: i4, p_storeData: i32, r_loadEn: i1, r_loadAddr: i4, r_storeEn: i1, r_storeAddr: i4, r_storeData: i32)
    hw.output %bicg_wrapped.out0, %bicg_wrapped.a_end, %bicg_wrapped.s_end, %bicg_wrapped.q_end, %bicg_wrapped.p_end, %bicg_wrapped.r_end, %bicg_wrapped.end, %mem_to_bram_converter_a.ce0, %mem_to_bram_converter_a.we0, %mem_to_bram_converter_a.address0, %mem_to_bram_converter_a.dout0, %mem_to_bram_converter_a.ce1, %mem_to_bram_converter_a.we1, %mem_to_bram_converter_a.address1, %mem_to_bram_converter_a.dout1, %mem_to_bram_converter_s.ce0, %mem_to_bram_converter_s.we0, %mem_to_bram_converter_s.address0, %mem_to_bram_converter_s.dout0, %mem_to_bram_converter_s.ce1, %mem_to_bram_converter_s.we1, %mem_to_bram_converter_s.address1, %mem_to_bram_converter_s.dout1, %mem_to_bram_converter_q.ce0, %mem_to_bram_converter_q.we0, %mem_to_bram_converter_q.address0, %mem_to_bram_converter_q.dout0, %mem_to_bram_converter_q.ce1, %mem_to_bram_converter_q.we1, %mem_to_bram_converter_q.address1, %mem_to_bram_converter_q.dout1, %mem_to_bram_converter_p.ce0, %mem_to_bram_converter_p.we0, %mem_to_bram_converter_p.address0, %mem_to_bram_converter_p.dout0, %mem_to_bram_converter_p.ce1, %mem_to_bram_converter_p.we1, %mem_to_bram_converter_p.address1, %mem_to_bram_converter_p.dout1, %mem_to_bram_converter_r.ce0, %mem_to_bram_converter_r.we0, %mem_to_bram_converter_r.address0, %mem_to_bram_converter_r.dout0, %mem_to_bram_converter_r.ce1, %mem_to_bram_converter_r.we1, %mem_to_bram_converter_r.address1, %mem_to_bram_converter_r.dout1 : !handshake.channel<i32>, !handshake.control<>, !handshake.control<>, !handshake.control<>, !handshake.control<>, !handshake.control<>, !handshake.control<>, i1, i1, i7, i32, i1, i1, i7, i32, i1, i1, i4, i32, i1, i1, i4, i32, i1, i1, i4, i32, i1, i1, i4, i32, i1, i1, i4, i32, i1, i1, i4, i32, i1, i1, i4, i32, i1, i1, i4, i32
  }
}

