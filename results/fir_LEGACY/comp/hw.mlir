module {
  hw.module @fir(in %di_loadData : i32, in %idx_loadData : i32, in %di_start : !handshake.control<>, in %idx_start : !handshake.control<>, in %start : !handshake.control<>, in %clk : i1, in %rst : i1, out out0 : !handshake.channel<i32>, out di_end : !handshake.control<>, out idx_end : !handshake.control<>, out end : !handshake.control<>, out di_loadEn : i1, out di_loadAddr : i10, out di_storeEn : i1, out di_storeAddr : i10, out di_storeData : i32, out idx_loadEn : i1, out idx_loadAddr : i10, out idx_storeEn : i1, out idx_storeAddr : i10, out idx_storeData : i32) {
    %fork0.outs_0, %fork0.outs_1, %fork0.outs_2 = hw.instance "fork0" @handshake_fork_0(ins: %start: !handshake.control<>, clk: %clk: i1, rst: %rst: i1) -> (outs_0: !handshake.control<>, outs_1: !handshake.control<>, outs_2: !handshake.control<>)
    %mem_controller2.ldData_0, %mem_controller2.memEnd, %mem_controller2.loadEn, %mem_controller2.loadAddr, %mem_controller2.storeEn, %mem_controller2.storeAddr, %mem_controller2.storeData = hw.instance "mem_controller2" @handshake_mem_controller_0(loadData: %idx_loadData: i32, memStart: %idx_start: !handshake.control<>, ldAddr_0: %load0.addrOut: !handshake.channel<i10>, ctrlEnd: %fork6.outs_1: !handshake.control<>, clk: %clk: i1, rst: %rst: i1) -> (ldData_0: !handshake.channel<i32>, memEnd: !handshake.control<>, loadEn: i1, loadAddr: i10, storeEn: i1, storeAddr: i10, storeData: i32)
    %mem_controller3.ldData_0, %mem_controller3.memEnd, %mem_controller3.loadEn, %mem_controller3.loadAddr, %mem_controller3.storeEn, %mem_controller3.storeAddr, %mem_controller3.storeData = hw.instance "mem_controller3" @handshake_mem_controller_0(loadData: %di_loadData: i32, memStart: %di_start: !handshake.control<>, ldAddr_0: %load1.addrOut: !handshake.channel<i10>, ctrlEnd: %fork6.outs_0: !handshake.control<>, clk: %clk: i1, rst: %rst: i1) -> (ldData_0: !handshake.channel<i32>, memEnd: !handshake.control<>, loadEn: i1, loadAddr: i10, storeEn: i1, storeAddr: i10, storeData: i32)
    %constant0.outs = hw.instance "constant0" @handshake_constant_0(ctrl: %fork0.outs_0: !handshake.control<>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i1>)
    %fork1.outs_0, %fork1.outs_1 = hw.instance "fork1" @handshake_fork_1(ins: %constant0.outs: !handshake.channel<i1>, clk: %clk: i1, rst: %rst: i1) -> (outs_0: !handshake.channel<i1>, outs_1: !handshake.channel<i1>)
    %extsi5.outs = hw.instance "extsi5" @handshake_extsi_0(ins: %fork1.outs_0: !handshake.channel<i1>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i11>)
    %extsi6.outs = hw.instance "extsi6" @handshake_extsi_1(ins: %fork1.outs_1: !handshake.channel<i1>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i32>)
    %mux0.outs = hw.instance "mux0" @handshake_mux_0(index: %fork3.outs_0: !handshake.channel<i1>, ins_0: %extsi5.outs: !handshake.channel<i11>, ins_1: %cond_br1.trueOut: !handshake.channel<i11>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i11>)
    %buffer5.outs = hw.instance "buffer5" @handshake_buffer_0(ins: %mux0.outs: !handshake.channel<i11>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i11>)
    %buffer6.outs = hw.instance "buffer6" @handshake_buffer_1(ins: %buffer5.outs: !handshake.channel<i11>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i11>)
    %fork2.outs_0, %fork2.outs_1, %fork2.outs_2 = hw.instance "fork2" @handshake_fork_2(ins: %buffer6.outs: !handshake.channel<i11>, clk: %clk: i1, rst: %rst: i1) -> (outs_0: !handshake.channel<i11>, outs_1: !handshake.channel<i11>, outs_2: !handshake.channel<i11>)
    %trunci0.outs = hw.instance "trunci0" @handshake_trunci_0(ins: %fork2.outs_0: !handshake.channel<i11>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i10>)
    %extsi7.outs = hw.instance "extsi7" @handshake_extsi_2(ins: %fork2.outs_2: !handshake.channel<i11>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i12>)
    %trunci1.outs = hw.instance "trunci1" @handshake_trunci_0(ins: %fork2.outs_1: !handshake.channel<i11>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i10>)
    %buffer15.outs = hw.instance "buffer15" @handshake_buffer_2(ins: %fork3.outs_1: !handshake.channel<i1>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i1>)
    %mux1.outs = hw.instance "mux1" @handshake_mux_1(index: %buffer15.outs: !handshake.channel<i1>, ins_0: %extsi6.outs: !handshake.channel<i32>, ins_1: %cond_br2.trueOut: !handshake.channel<i32>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i32>)
    %control_merge0.outs, %control_merge0.index = hw.instance "control_merge0" @handshake_control_merge_0(ins_0: %fork0.outs_2: !handshake.control<>, ins_1: %cond_br3.trueOut: !handshake.control<>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.control<>, index: !handshake.channel<i1>)
    %fork3.outs_0, %fork3.outs_1 = hw.instance "fork3" @handshake_fork_1(ins: %control_merge0.index: !handshake.channel<i1>, clk: %clk: i1, rst: %rst: i1) -> (outs_0: !handshake.channel<i1>, outs_1: !handshake.channel<i1>)
    %source0.outs = hw.instance "source0" @handshake_source_0(clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.control<>)
    %constant1.outs = hw.instance "constant1" @handshake_constant_1(ctrl: %source0.outs: !handshake.control<>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i11>)
    %trunci2.outs = hw.instance "trunci2" @handshake_trunci_0(ins: %constant1.outs: !handshake.channel<i11>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i10>)
    %source1.outs = hw.instance "source1" @handshake_source_0(clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.control<>)
    %constant4.outs = hw.instance "constant4" @handshake_constant_2(ctrl: %source1.outs: !handshake.control<>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i11>)
    %extsi8.outs = hw.instance "extsi8" @handshake_extsi_2(ins: %constant4.outs: !handshake.channel<i11>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i12>)
    %source2.outs = hw.instance "source2" @handshake_source_0(clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.control<>)
    %constant8.outs = hw.instance "constant8" @handshake_constant_3(ctrl: %source2.outs: !handshake.control<>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i2>)
    %extsi9.outs = hw.instance "extsi9" @handshake_extsi_3(ins: %constant8.outs: !handshake.channel<i2>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i12>)
    %load0.addrOut, %load0.dataOut = hw.instance "load0" @handshake_load_0(addrIn: %trunci1.outs: !handshake.channel<i10>, dataFromMem: %mem_controller2.ldData_0: !handshake.channel<i32>, clk: %clk: i1, rst: %rst: i1) -> (addrOut: !handshake.channel<i10>, dataOut: !handshake.channel<i32>)
    %subi0.result = hw.instance "subi0" @handshake_subi_0(lhs: %trunci2.outs: !handshake.channel<i10>, rhs: %trunci0.outs: !handshake.channel<i10>, clk: %clk: i1, rst: %rst: i1) -> (result: !handshake.channel<i10>)
    %load1.addrOut, %load1.dataOut = hw.instance "load1" @handshake_load_0(addrIn: %subi0.result: !handshake.channel<i10>, dataFromMem: %mem_controller3.ldData_0: !handshake.channel<i32>, clk: %clk: i1, rst: %rst: i1) -> (addrOut: !handshake.channel<i10>, dataOut: !handshake.channel<i32>)
    %muli0.result = hw.instance "muli0" @handshake_muli_0(lhs: %load0.dataOut: !handshake.channel<i32>, rhs: %load1.dataOut: !handshake.channel<i32>, clk: %clk: i1, rst: %rst: i1) -> (result: !handshake.channel<i32>)
    %buffer10.outs = hw.instance "buffer10" @handshake_buffer_3(ins: %mux1.outs: !handshake.channel<i32>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i32>)
    %buffer11.outs = hw.instance "buffer11" @handshake_buffer_4(ins: %buffer10.outs: !handshake.channel<i32>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i32>)
    %addi0.result = hw.instance "addi0" @handshake_addi_0(lhs: %buffer11.outs: !handshake.channel<i32>, rhs: %muli0.result: !handshake.channel<i32>, clk: %clk: i1, rst: %rst: i1) -> (result: !handshake.channel<i32>)
    %addi2.result = hw.instance "addi2" @handshake_addi_1(lhs: %extsi7.outs: !handshake.channel<i12>, rhs: %extsi9.outs: !handshake.channel<i12>, clk: %clk: i1, rst: %rst: i1) -> (result: !handshake.channel<i12>)
    %fork4.outs_0, %fork4.outs_1 = hw.instance "fork4" @handshake_fork_3(ins: %addi2.result: !handshake.channel<i12>, clk: %clk: i1, rst: %rst: i1) -> (outs_0: !handshake.channel<i12>, outs_1: !handshake.channel<i12>)
    %trunci3.outs = hw.instance "trunci3" @handshake_trunci_1(ins: %fork4.outs_0: !handshake.channel<i12>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i11>)
    %cmpi0.result = hw.instance "cmpi0" @handshake_cmpi_0(lhs: %fork4.outs_1: !handshake.channel<i12>, rhs: %extsi8.outs: !handshake.channel<i12>, clk: %clk: i1, rst: %rst: i1) -> (result: !handshake.channel<i1>)
    %fork5.outs_0, %fork5.outs_1, %fork5.outs_2 = hw.instance "fork5" @handshake_fork_4(ins: %cmpi0.result: !handshake.channel<i1>, clk: %clk: i1, rst: %rst: i1) -> (outs_0: !handshake.channel<i1>, outs_1: !handshake.channel<i1>, outs_2: !handshake.channel<i1>)
    %cond_br1.trueOut, %cond_br1.falseOut = hw.instance "cond_br1" @handshake_cond_br_0(condition: %fork5.outs_0: !handshake.channel<i1>, data: %trunci3.outs: !handshake.channel<i11>, clk: %clk: i1, rst: %rst: i1) -> (trueOut: !handshake.channel<i11>, falseOut: !handshake.channel<i11>)
    hw.instance "sink0" @handshake_sink_0(ins: %cond_br1.falseOut: !handshake.channel<i11>, clk: %clk: i1, rst: %rst: i1) -> ()
    %buffer19.outs = hw.instance "buffer19" @handshake_buffer_2(ins: %fork5.outs_1: !handshake.channel<i1>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i1>)
    %cond_br2.trueOut, %cond_br2.falseOut = hw.instance "cond_br2" @handshake_cond_br_1(condition: %buffer19.outs: !handshake.channel<i1>, data: %addi0.result: !handshake.channel<i32>, clk: %clk: i1, rst: %rst: i1) -> (trueOut: !handshake.channel<i32>, falseOut: !handshake.channel<i32>)
    %buffer12.outs = hw.instance "buffer12" @handshake_buffer_5(ins: %control_merge0.outs: !handshake.control<>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.control<>)
    %buffer13.outs = hw.instance "buffer13" @handshake_buffer_6(ins: %buffer12.outs: !handshake.control<>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.control<>)
    %cond_br3.trueOut, %cond_br3.falseOut = hw.instance "cond_br3" @handshake_cond_br_2(condition: %fork5.outs_2: !handshake.channel<i1>, data: %buffer13.outs: !handshake.control<>, clk: %clk: i1, rst: %rst: i1) -> (trueOut: !handshake.control<>, falseOut: !handshake.control<>)
    %buffer23.outs = hw.instance "buffer23" @handshake_buffer_5(ins: %cond_br3.falseOut: !handshake.control<>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.control<>)
    %buffer24.outs = hw.instance "buffer24" @handshake_buffer_6(ins: %buffer23.outs: !handshake.control<>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.control<>)
    %fork6.outs_0, %fork6.outs_1 = hw.instance "fork6" @handshake_fork_5(ins: %buffer24.outs: !handshake.control<>, clk: %clk: i1, rst: %rst: i1) -> (outs_0: !handshake.control<>, outs_1: !handshake.control<>)
    %buffer21.outs = hw.instance "buffer21" @handshake_buffer_3(ins: %cond_br2.falseOut: !handshake.channel<i32>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i32>)
    %buffer22.outs = hw.instance "buffer22" @handshake_buffer_4(ins: %buffer21.outs: !handshake.channel<i32>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i32>)
    hw.output %buffer22.outs, %mem_controller3.memEnd, %mem_controller2.memEnd, %fork0.outs_1, %mem_controller3.loadEn, %mem_controller3.loadAddr, %mem_controller3.storeEn, %mem_controller3.storeAddr, %mem_controller3.storeData, %mem_controller2.loadEn, %mem_controller2.loadAddr, %mem_controller2.storeEn, %mem_controller2.storeAddr, %mem_controller2.storeData : !handshake.channel<i32>, !handshake.control<>, !handshake.control<>, !handshake.control<>, i1, i10, i1, i10, i32, i1, i10, i1, i10, i32
  }
  hw.module.extern @handshake_fork_0(in %ins : !handshake.control<>, in %clk : i1, in %rst : i1, out outs_0 : !handshake.control<>, out outs_1 : !handshake.control<>, out outs_2 : !handshake.control<>) attributes {hw.name = "handshake.fork", hw.parameters = {DATA_TYPE = !handshake.control<>, SIZE = 3 : ui32}}
  hw.module.extern @handshake_mem_controller_0(in %loadData : i32, in %memStart : !handshake.control<>, in %ldAddr_0 : !handshake.channel<i10>, in %ctrlEnd : !handshake.control<>, in %clk : i1, in %rst : i1, out ldData_0 : !handshake.channel<i32>, out memEnd : !handshake.control<>, out loadEn : i1, out loadAddr : i10, out storeEn : i1, out storeAddr : i10, out storeData : i32) attributes {hw.name = "handshake.mem_controller", hw.parameters = {ADDR_TYPE = !handshake.channel<i10>, DATA_TYPE = !handshake.channel<i32>, NUM_CONTROLS = 0 : ui32, NUM_LOADS = 1 : ui32, NUM_STORES = 0 : ui32}}
  hw.module.extern @handshake_constant_0(in %ctrl : !handshake.control<>, in %clk : i1, in %rst : i1, out outs : !handshake.channel<i1>) attributes {hw.name = "handshake.constant", hw.parameters = {DATA_WIDTH = 1 : ui32, VALUE = "0"}}
  hw.module.extern @handshake_fork_1(in %ins : !handshake.channel<i1>, in %clk : i1, in %rst : i1, out outs_0 : !handshake.channel<i1>, out outs_1 : !handshake.channel<i1>) attributes {hw.name = "handshake.fork", hw.parameters = {DATA_TYPE = !handshake.channel<i1>, SIZE = 2 : ui32}}
  hw.module.extern @handshake_extsi_0(in %ins : !handshake.channel<i1>, in %clk : i1, in %rst : i1, out outs : !handshake.channel<i11>) attributes {hw.name = "handshake.extsi", hw.parameters = {INPUT_TYPE = !handshake.channel<i1>, OUTPUT_TYPE = !handshake.channel<i11>}}
  hw.module.extern @handshake_extsi_1(in %ins : !handshake.channel<i1>, in %clk : i1, in %rst : i1, out outs : !handshake.channel<i32>) attributes {hw.name = "handshake.extsi", hw.parameters = {INPUT_TYPE = !handshake.channel<i1>, OUTPUT_TYPE = !handshake.channel<i32>}}
  hw.module.extern @handshake_mux_0(in %index : !handshake.channel<i1>, in %ins_0 : !handshake.channel<i11>, in %ins_1 : !handshake.channel<i11>, in %clk : i1, in %rst : i1, out outs : !handshake.channel<i11>) attributes {hw.name = "handshake.mux", hw.parameters = {DATA_TYPE = !handshake.channel<i11>, SELECT_TYPE = !handshake.channel<i1>, SIZE = 2 : ui32}}
  hw.module.extern @handshake_buffer_0(in %ins : !handshake.channel<i11>, in %clk : i1, in %rst : i1, out outs : !handshake.channel<i11>) attributes {hw.name = "handshake.buffer", hw.parameters = {DATA_TYPE = !handshake.channel<i11>, NUM_SLOTS = 1 : ui32, TIMING = #handshake<timing {D: 1, V: 1, R: 0}>}}
  hw.module.extern @handshake_buffer_1(in %ins : !handshake.channel<i11>, in %clk : i1, in %rst : i1, out outs : !handshake.channel<i11>) attributes {hw.name = "handshake.buffer", hw.parameters = {DATA_TYPE = !handshake.channel<i11>, NUM_SLOTS = 1 : ui32, TIMING = #handshake<timing {R: 1}>}}
  hw.module.extern @handshake_fork_2(in %ins : !handshake.channel<i11>, in %clk : i1, in %rst : i1, out outs_0 : !handshake.channel<i11>, out outs_1 : !handshake.channel<i11>, out outs_2 : !handshake.channel<i11>) attributes {hw.name = "handshake.fork", hw.parameters = {DATA_TYPE = !handshake.channel<i11>, SIZE = 3 : ui32}}
  hw.module.extern @handshake_trunci_0(in %ins : !handshake.channel<i11>, in %clk : i1, in %rst : i1, out outs : !handshake.channel<i10>) attributes {hw.name = "handshake.trunci", hw.parameters = {INPUT_TYPE = !handshake.channel<i11>, OUTPUT_TYPE = !handshake.channel<i10>}}
  hw.module.extern @handshake_extsi_2(in %ins : !handshake.channel<i11>, in %clk : i1, in %rst : i1, out outs : !handshake.channel<i12>) attributes {hw.name = "handshake.extsi", hw.parameters = {INPUT_TYPE = !handshake.channel<i11>, OUTPUT_TYPE = !handshake.channel<i12>}}
  hw.module.extern @handshake_buffer_2(in %ins : !handshake.channel<i1>, in %clk : i1, in %rst : i1, out outs : !handshake.channel<i1>) attributes {hw.name = "handshake.buffer", hw.parameters = {DATA_TYPE = !handshake.channel<i1>, NUM_SLOTS = 5 : ui32, TIMING = #handshake<timing {R: 1}>}}
  hw.module.extern @handshake_mux_1(in %index : !handshake.channel<i1>, in %ins_0 : !handshake.channel<i32>, in %ins_1 : !handshake.channel<i32>, in %clk : i1, in %rst : i1, out outs : !handshake.channel<i32>) attributes {hw.name = "handshake.mux", hw.parameters = {DATA_TYPE = !handshake.channel<i32>, SELECT_TYPE = !handshake.channel<i1>, SIZE = 2 : ui32}}
  hw.module.extern @handshake_control_merge_0(in %ins_0 : !handshake.control<>, in %ins_1 : !handshake.control<>, in %clk : i1, in %rst : i1, out outs : !handshake.control<>, out index : !handshake.channel<i1>) attributes {hw.name = "handshake.control_merge", hw.parameters = {DATA_TYPE = !handshake.control<>, INDEX_TYPE = !handshake.channel<i1>, SIZE = 2 : ui32}}
  hw.module.extern @handshake_source_0(in %clk : i1, in %rst : i1, out outs : !handshake.control<>) attributes {hw.name = "handshake.source", hw.parameters = {}}
  hw.module.extern @handshake_constant_1(in %ctrl : !handshake.control<>, in %clk : i1, in %rst : i1, out outs : !handshake.channel<i11>) attributes {hw.name = "handshake.constant", hw.parameters = {DATA_WIDTH = 11 : ui32, VALUE = "01111100111"}}
  hw.module.extern @handshake_constant_2(in %ctrl : !handshake.control<>, in %clk : i1, in %rst : i1, out outs : !handshake.channel<i11>) attributes {hw.name = "handshake.constant", hw.parameters = {DATA_WIDTH = 11 : ui32, VALUE = "01111101000"}}
  hw.module.extern @handshake_constant_3(in %ctrl : !handshake.control<>, in %clk : i1, in %rst : i1, out outs : !handshake.channel<i2>) attributes {hw.name = "handshake.constant", hw.parameters = {DATA_WIDTH = 2 : ui32, VALUE = "01"}}
  hw.module.extern @handshake_extsi_3(in %ins : !handshake.channel<i2>, in %clk : i1, in %rst : i1, out outs : !handshake.channel<i12>) attributes {hw.name = "handshake.extsi", hw.parameters = {INPUT_TYPE = !handshake.channel<i2>, OUTPUT_TYPE = !handshake.channel<i12>}}
  hw.module.extern @handshake_load_0(in %addrIn : !handshake.channel<i10>, in %dataFromMem : !handshake.channel<i32>, in %clk : i1, in %rst : i1, out addrOut : !handshake.channel<i10>, out dataOut : !handshake.channel<i32>) attributes {hw.name = "handshake.load", hw.parameters = {ADDR_TYPE = !handshake.channel<i10>, DATA_TYPE = !handshake.channel<i32>}}
  hw.module.extern @handshake_subi_0(in %lhs : !handshake.channel<i10>, in %rhs : !handshake.channel<i10>, in %clk : i1, in %rst : i1, out result : !handshake.channel<i10>) attributes {hw.name = "handshake.subi", hw.parameters = {DATA_TYPE = !handshake.channel<i10>}}
  hw.module.extern @handshake_muli_0(in %lhs : !handshake.channel<i32>, in %rhs : !handshake.channel<i32>, in %clk : i1, in %rst : i1, out result : !handshake.channel<i32>) attributes {hw.name = "handshake.muli", hw.parameters = {DATA_TYPE = !handshake.channel<i32>}}
  hw.module.extern @handshake_buffer_3(in %ins : !handshake.channel<i32>, in %clk : i1, in %rst : i1, out outs : !handshake.channel<i32>) attributes {hw.name = "handshake.buffer", hw.parameters = {DATA_TYPE = !handshake.channel<i32>, NUM_SLOTS = 1 : ui32, TIMING = #handshake<timing {D: 1, V: 1, R: 0}>}}
  hw.module.extern @handshake_buffer_4(in %ins : !handshake.channel<i32>, in %clk : i1, in %rst : i1, out outs : !handshake.channel<i32>) attributes {hw.name = "handshake.buffer", hw.parameters = {DATA_TYPE = !handshake.channel<i32>, NUM_SLOTS = 1 : ui32, TIMING = #handshake<timing {R: 1}>}}
  hw.module.extern @handshake_addi_0(in %lhs : !handshake.channel<i32>, in %rhs : !handshake.channel<i32>, in %clk : i1, in %rst : i1, out result : !handshake.channel<i32>) attributes {hw.name = "handshake.addi", hw.parameters = {DATA_TYPE = !handshake.channel<i32>}}
  hw.module.extern @handshake_addi_1(in %lhs : !handshake.channel<i12>, in %rhs : !handshake.channel<i12>, in %clk : i1, in %rst : i1, out result : !handshake.channel<i12>) attributes {hw.name = "handshake.addi", hw.parameters = {DATA_TYPE = !handshake.channel<i12>}}
  hw.module.extern @handshake_fork_3(in %ins : !handshake.channel<i12>, in %clk : i1, in %rst : i1, out outs_0 : !handshake.channel<i12>, out outs_1 : !handshake.channel<i12>) attributes {hw.name = "handshake.fork", hw.parameters = {DATA_TYPE = !handshake.channel<i12>, SIZE = 2 : ui32}}
  hw.module.extern @handshake_trunci_1(in %ins : !handshake.channel<i12>, in %clk : i1, in %rst : i1, out outs : !handshake.channel<i11>) attributes {hw.name = "handshake.trunci", hw.parameters = {INPUT_TYPE = !handshake.channel<i12>, OUTPUT_TYPE = !handshake.channel<i11>}}
  hw.module.extern @handshake_cmpi_0(in %lhs : !handshake.channel<i12>, in %rhs : !handshake.channel<i12>, in %clk : i1, in %rst : i1, out result : !handshake.channel<i1>) attributes {hw.name = "handshake.cmpi", hw.parameters = {DATA_TYPE = !handshake.channel<i12>, PREDICATE = "ult"}}
  hw.module.extern @handshake_fork_4(in %ins : !handshake.channel<i1>, in %clk : i1, in %rst : i1, out outs_0 : !handshake.channel<i1>, out outs_1 : !handshake.channel<i1>, out outs_2 : !handshake.channel<i1>) attributes {hw.name = "handshake.fork", hw.parameters = {DATA_TYPE = !handshake.channel<i1>, SIZE = 3 : ui32}}
  hw.module.extern @handshake_cond_br_0(in %condition : !handshake.channel<i1>, in %data : !handshake.channel<i11>, in %clk : i1, in %rst : i1, out trueOut : !handshake.channel<i11>, out falseOut : !handshake.channel<i11>) attributes {hw.name = "handshake.cond_br", hw.parameters = {DATA_TYPE = !handshake.channel<i11>}}
  hw.module.extern @handshake_sink_0(in %ins : !handshake.channel<i11>, in %clk : i1, in %rst : i1) attributes {hw.name = "handshake.sink", hw.parameters = {DATA_TYPE = !handshake.channel<i11>}}
  hw.module.extern @handshake_cond_br_1(in %condition : !handshake.channel<i1>, in %data : !handshake.channel<i32>, in %clk : i1, in %rst : i1, out trueOut : !handshake.channel<i32>, out falseOut : !handshake.channel<i32>) attributes {hw.name = "handshake.cond_br", hw.parameters = {DATA_TYPE = !handshake.channel<i32>}}
  hw.module.extern @handshake_buffer_5(in %ins : !handshake.control<>, in %clk : i1, in %rst : i1, out outs : !handshake.control<>) attributes {hw.name = "handshake.buffer", hw.parameters = {DATA_TYPE = !handshake.control<>, NUM_SLOTS = 1 : ui32, TIMING = #handshake<timing {D: 1, V: 1, R: 0}>}}
  hw.module.extern @handshake_buffer_6(in %ins : !handshake.control<>, in %clk : i1, in %rst : i1, out outs : !handshake.control<>) attributes {hw.name = "handshake.buffer", hw.parameters = {DATA_TYPE = !handshake.control<>, NUM_SLOTS = 1 : ui32, TIMING = #handshake<timing {R: 1}>}}
  hw.module.extern @handshake_cond_br_2(in %condition : !handshake.channel<i1>, in %data : !handshake.control<>, in %clk : i1, in %rst : i1, out trueOut : !handshake.control<>, out falseOut : !handshake.control<>) attributes {hw.name = "handshake.cond_br", hw.parameters = {DATA_TYPE = !handshake.control<>}}
  hw.module.extern @handshake_fork_5(in %ins : !handshake.control<>, in %clk : i1, in %rst : i1, out outs_0 : !handshake.control<>, out outs_1 : !handshake.control<>) attributes {hw.name = "handshake.fork", hw.parameters = {DATA_TYPE = !handshake.control<>, SIZE = 2 : ui32}}
  hw.module.extern @mem_to_bram_32_10(in %loadEn : i1, in %loadAddr : i10, in %storeEn : i1, in %storeAddr : i10, in %storeData : i32, in %din0 : i32, in %din1 : i32, out ce0 : i1, out we0 : i1, out address0 : i10, out dout0 : i32, out ce1 : i1, out we1 : i1, out address1 : i10, out dout1 : i32, out loadData : i32) attributes {hw.name = "mem_to_bram", hw.parameters = {ADDR_WIDTH = 10 : ui32, DATA_WIDTH = 32 : ui32}}
  hw.module @fir_wrapper(in %di_din0 : i32, in %di_din1 : i32, in %idx_din0 : i32, in %idx_din1 : i32, in %di_start : !handshake.control<>, in %idx_start : !handshake.control<>, in %start : !handshake.control<>, in %clk : i1, in %rst : i1, out out0 : !handshake.channel<i32>, out di_end : !handshake.control<>, out idx_end : !handshake.control<>, out end : !handshake.control<>, out di_ce0 : i1, out di_we0 : i1, out di_address0 : i10, out di_dout0 : i32, out di_ce1 : i1, out di_we1 : i1, out di_address1 : i10, out di_dout1 : i32, out idx_ce0 : i1, out idx_we0 : i1, out idx_address0 : i10, out idx_dout0 : i32, out idx_ce1 : i1, out idx_we1 : i1, out idx_address1 : i10, out idx_dout1 : i32) {
    %mem_to_bram_converter_idx.ce0, %mem_to_bram_converter_idx.we0, %mem_to_bram_converter_idx.address0, %mem_to_bram_converter_idx.dout0, %mem_to_bram_converter_idx.ce1, %mem_to_bram_converter_idx.we1, %mem_to_bram_converter_idx.address1, %mem_to_bram_converter_idx.dout1, %mem_to_bram_converter_idx.loadData = hw.instance "mem_to_bram_converter_idx" @mem_to_bram_32_10(loadEn: %fir_wrapped.idx_loadEn: i1, loadAddr: %fir_wrapped.idx_loadAddr: i10, storeEn: %fir_wrapped.idx_storeEn: i1, storeAddr: %fir_wrapped.idx_storeAddr: i10, storeData: %fir_wrapped.idx_storeData: i32, din0: %idx_din0: i32, din1: %idx_din1: i32) -> (ce0: i1, we0: i1, address0: i10, dout0: i32, ce1: i1, we1: i1, address1: i10, dout1: i32, loadData: i32)
    %mem_to_bram_converter_di.ce0, %mem_to_bram_converter_di.we0, %mem_to_bram_converter_di.address0, %mem_to_bram_converter_di.dout0, %mem_to_bram_converter_di.ce1, %mem_to_bram_converter_di.we1, %mem_to_bram_converter_di.address1, %mem_to_bram_converter_di.dout1, %mem_to_bram_converter_di.loadData = hw.instance "mem_to_bram_converter_di" @mem_to_bram_32_10(loadEn: %fir_wrapped.di_loadEn: i1, loadAddr: %fir_wrapped.di_loadAddr: i10, storeEn: %fir_wrapped.di_storeEn: i1, storeAddr: %fir_wrapped.di_storeAddr: i10, storeData: %fir_wrapped.di_storeData: i32, din0: %di_din0: i32, din1: %di_din1: i32) -> (ce0: i1, we0: i1, address0: i10, dout0: i32, ce1: i1, we1: i1, address1: i10, dout1: i32, loadData: i32)
    %fir_wrapped.out0, %fir_wrapped.di_end, %fir_wrapped.idx_end, %fir_wrapped.end, %fir_wrapped.di_loadEn, %fir_wrapped.di_loadAddr, %fir_wrapped.di_storeEn, %fir_wrapped.di_storeAddr, %fir_wrapped.di_storeData, %fir_wrapped.idx_loadEn, %fir_wrapped.idx_loadAddr, %fir_wrapped.idx_storeEn, %fir_wrapped.idx_storeAddr, %fir_wrapped.idx_storeData = hw.instance "fir_wrapped" @fir(di_loadData: %mem_to_bram_converter_di.loadData: i32, idx_loadData: %mem_to_bram_converter_idx.loadData: i32, di_start: %di_start: !handshake.control<>, idx_start: %idx_start: !handshake.control<>, start: %start: !handshake.control<>, clk: %clk: i1, rst: %rst: i1) -> (out0: !handshake.channel<i32>, di_end: !handshake.control<>, idx_end: !handshake.control<>, end: !handshake.control<>, di_loadEn: i1, di_loadAddr: i10, di_storeEn: i1, di_storeAddr: i10, di_storeData: i32, idx_loadEn: i1, idx_loadAddr: i10, idx_storeEn: i1, idx_storeAddr: i10, idx_storeData: i32)
    hw.output %fir_wrapped.out0, %fir_wrapped.di_end, %fir_wrapped.idx_end, %fir_wrapped.end, %mem_to_bram_converter_di.ce0, %mem_to_bram_converter_di.we0, %mem_to_bram_converter_di.address0, %mem_to_bram_converter_di.dout0, %mem_to_bram_converter_di.ce1, %mem_to_bram_converter_di.we1, %mem_to_bram_converter_di.address1, %mem_to_bram_converter_di.dout1, %mem_to_bram_converter_idx.ce0, %mem_to_bram_converter_idx.we0, %mem_to_bram_converter_idx.address0, %mem_to_bram_converter_idx.dout0, %mem_to_bram_converter_idx.ce1, %mem_to_bram_converter_idx.we1, %mem_to_bram_converter_idx.address1, %mem_to_bram_converter_idx.dout1 : !handshake.channel<i32>, !handshake.control<>, !handshake.control<>, !handshake.control<>, i1, i1, i10, i32, i1, i1, i10, i32, i1, i1, i10, i32, i1, i1, i10, i32
  }
}

