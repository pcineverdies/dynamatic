module {
  hw.module @get_tanh(in %A_loadData : i32, in %addr_loadData : i32, in %A_start : !handshake.control<>, in %addr_start : !handshake.control<>, in %start : !handshake.control<>, in %clk : i1, in %rst : i1, out A_end : !handshake.control<>, out addr_end : !handshake.control<>, out end : !handshake.control<>, out A_loadEn : i1, out A_loadAddr : i10, out A_storeEn : i1, out A_storeAddr : i10, out A_storeData : i32, out addr_loadEn : i1, out addr_loadAddr : i10, out addr_storeEn : i1, out addr_storeAddr : i10, out addr_storeData : i32) {
    %fork0.outs_0, %fork0.outs_1, %fork0.outs_2 = hw.instance "fork0" @handshake_fork_0(ins: %start: !handshake.control<>, clk: %clk: i1, rst: %rst: i1) -> (outs_0: !handshake.control<>, outs_1: !handshake.control<>, outs_2: !handshake.control<>)
    %mem_controller1.ldData_0, %mem_controller1.memEnd, %mem_controller1.loadEn, %mem_controller1.loadAddr, %mem_controller1.storeEn, %mem_controller1.storeAddr, %mem_controller1.storeData = hw.instance "mem_controller1" @handshake_mem_controller_0(loadData: %addr_loadData: i32, memStart: %addr_start: !handshake.control<>, ldAddr_0: %load0.addrOut: !handshake.channel<i10>, ctrlEnd: %fork11.outs_1: !handshake.control<>, clk: %clk: i1, rst: %rst: i1) -> (ldData_0: !handshake.channel<i32>, memEnd: !handshake.control<>, loadEn: i1, loadAddr: i10, storeEn: i1, storeAddr: i10, storeData: i32)
    %lsq1.ldData_0, %lsq1.memEnd, %lsq1.loadEn, %lsq1.loadAddr, %lsq1.storeEn, %lsq1.storeAddr, %lsq1.storeData = hw.instance "lsq1" @handshake_lsq_lsq1(loadData: %A_loadData: i32, memStart: %A_start: !handshake.control<>, ctrl_0: %lazy_fork0.outs_0: !handshake.control<>, ldAddr_0: %load3.addrOut: !handshake.channel<i10>, ctrl_1: %lazy_fork1.outs_0: !handshake.control<>, stAddr_0: %store1.addrOut: !handshake.channel<i10>, stData_0: %store1.dataToMem: !handshake.channel<i32>, ctrlEnd: %fork11.outs_0: !handshake.control<>, clk: %clk: i1, rst: %rst: i1) -> (ldData_0: !handshake.channel<i32>, memEnd: !handshake.control<>, loadEn: i1, loadAddr: i10, storeEn: i1, storeAddr: i10, storeData: i32)
    %constant0.outs = hw.instance "constant0" @handshake_constant_0(ctrl: %fork0.outs_0: !handshake.control<>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i1>)
    %extsi3.outs = hw.instance "extsi3" @handshake_extsi_0(ins: %constant0.outs: !handshake.channel<i1>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i11>)
    %mux0.outs = hw.instance "mux0" @handshake_mux_0(index: %control_merge0.index: !handshake.channel<i1>, ins_0: %extsi3.outs: !handshake.channel<i11>, ins_1: %cond_br7.trueOut: !handshake.channel<i11>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i11>)
    %buffer3.outs = hw.instance "buffer3" @handshake_buffer_0(ins: %mux0.outs: !handshake.channel<i11>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i11>)
    %buffer4.outs = hw.instance "buffer4" @handshake_buffer_1(ins: %buffer3.outs: !handshake.channel<i11>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i11>)
    %fork1.outs_0, %fork1.outs_1 = hw.instance "fork1" @handshake_fork_1(ins: %buffer4.outs: !handshake.channel<i11>, clk: %clk: i1, rst: %rst: i1) -> (outs_0: !handshake.channel<i11>, outs_1: !handshake.channel<i11>)
    %trunci0.outs = hw.instance "trunci0" @handshake_trunci_0(ins: %fork1.outs_0: !handshake.channel<i11>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i10>)
    %control_merge0.outs, %control_merge0.index = hw.instance "control_merge0" @handshake_control_merge_0(ins_0: %fork0.outs_2: !handshake.control<>, ins_1: %cond_br8.trueOut: !handshake.control<>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.control<>, index: !handshake.channel<i1>)
    %buffer7.outs = hw.instance "buffer7" @handshake_buffer_2(ins: %control_merge0.outs: !handshake.control<>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.control<>)
    %buffer8.outs = hw.instance "buffer8" @handshake_buffer_3(ins: %buffer7.outs: !handshake.control<>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.control<>)
    %lazy_fork0.outs_0, %lazy_fork0.outs_1, %lazy_fork0.outs_2 = hw.instance "lazy_fork0" @handshake_lazy_fork_0(ins: %buffer8.outs: !handshake.control<>, clk: %clk: i1, rst: %rst: i1) -> (outs_0: !handshake.control<>, outs_1: !handshake.control<>, outs_2: !handshake.control<>)
    %buffer10.outs = hw.instance "buffer10" @handshake_buffer_3(ins: %lazy_fork0.outs_2: !handshake.control<>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.control<>)
    %fork2.outs_0 = hw.instance "fork2" @handshake_fork_2(ins: %buffer10.outs: !handshake.control<>, clk: %clk: i1, rst: %rst: i1) -> (outs_0: !handshake.control<>)
    %constant6.outs = hw.instance "constant6" @handshake_constant_1(ctrl: %fork2.outs_0: !handshake.control<>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i32>)
    %fork3.outs_0, %fork3.outs_1 = hw.instance "fork3" @handshake_fork_3(ins: %constant6.outs: !handshake.channel<i32>, clk: %clk: i1, rst: %rst: i1) -> (outs_0: !handshake.channel<i32>, outs_1: !handshake.channel<i32>)
    %load0.addrOut, %load0.dataOut = hw.instance "load0" @handshake_load_0(addrIn: %trunci0.outs: !handshake.channel<i10>, dataFromMem: %mem_controller1.ldData_0: !handshake.channel<i32>, clk: %clk: i1, rst: %rst: i1) -> (addrOut: !handshake.channel<i10>, dataOut: !handshake.channel<i32>)
    %fork4.outs_0, %fork4.outs_1 = hw.instance "fork4" @handshake_fork_4(ins: %load0.dataOut: !handshake.channel<i32>, clk: %clk: i1, rst: %rst: i1) -> (outs_0: !handshake.channel<i32>, outs_1: !handshake.channel<i32>)
    %trunci1.outs = hw.instance "trunci1" @handshake_trunci_1(ins: %fork4.outs_0: !handshake.channel<i32>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i10>)
    %trunci2.outs = hw.instance "trunci2" @handshake_trunci_1(ins: %fork4.outs_1: !handshake.channel<i32>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i10>)
    %load3.addrOut, %load3.dataOut = hw.instance "load3" @handshake_load_1(addrIn: %trunci2.outs: !handshake.channel<i10>, dataFromMem: %lsq1.ldData_0: !handshake.channel<i32>, clk: %clk: i1, rst: %rst: i1) -> (addrOut: !handshake.channel<i10>, dataOut: !handshake.channel<i32>)
    %fork5.outs_0, %fork5.outs_1 = hw.instance "fork5" @handshake_fork_3(ins: %load3.dataOut: !handshake.channel<i32>, clk: %clk: i1, rst: %rst: i1) -> (outs_0: !handshake.channel<i32>, outs_1: !handshake.channel<i32>)
    %cmpf0.result = hw.instance "cmpf0" @handshake_cmpf_0(lhs: %fork5.outs_0: !handshake.channel<i32>, rhs: %fork3.outs_1: !handshake.channel<i32>, clk: %clk: i1, rst: %rst: i1) -> (result: !handshake.channel<i1>)
    %fork6.outs_0, %fork6.outs_1, %fork6.outs_2, %fork6.outs_3, %fork6.outs_4 = hw.instance "fork6" @handshake_fork_5(ins: %cmpf0.result: !handshake.channel<i1>, clk: %clk: i1, rst: %rst: i1) -> (outs_0: !handshake.channel<i1>, outs_1: !handshake.channel<i1>, outs_2: !handshake.channel<i1>, outs_3: !handshake.channel<i1>, outs_4: !handshake.channel<i1>)
    %cond_br2.trueOut, %cond_br2.falseOut = hw.instance "cond_br2" @handshake_cond_br_0(condition: %fork6.outs_4: !handshake.channel<i1>, data: %fork3.outs_0: !handshake.channel<i32>, clk: %clk: i1, rst: %rst: i1) -> (trueOut: !handshake.channel<i32>, falseOut: !handshake.channel<i32>)
    hw.instance "sink0" @handshake_sink_0(ins: %cond_br2.falseOut: !handshake.channel<i32>, clk: %clk: i1, rst: %rst: i1) -> ()
    %cond_br3.trueOut, %cond_br3.falseOut = hw.instance "cond_br3" @handshake_cond_br_1(condition: %fork6.outs_1: !handshake.channel<i1>, data: %fork1.outs_1: !handshake.channel<i11>, clk: %clk: i1, rst: %rst: i1) -> (trueOut: !handshake.channel<i11>, falseOut: !handshake.channel<i11>)
    %cond_br4.trueOut, %cond_br4.falseOut = hw.instance "cond_br4" @handshake_cond_br_2(condition: %fork6.outs_0: !handshake.channel<i1>, data: %trunci1.outs: !handshake.channel<i10>, clk: %clk: i1, rst: %rst: i1) -> (trueOut: !handshake.channel<i10>, falseOut: !handshake.channel<i10>)
    %buffer9.outs = hw.instance "buffer9" @handshake_buffer_2(ins: %lazy_fork0.outs_1: !handshake.control<>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.control<>)
    %cond_br5.trueOut, %cond_br5.falseOut = hw.instance "cond_br5" @handshake_cond_br_3(condition: %fork6.outs_3: !handshake.channel<i1>, data: %buffer9.outs: !handshake.control<>, clk: %clk: i1, rst: %rst: i1) -> (trueOut: !handshake.control<>, falseOut: !handshake.control<>)
    %cond_br6.trueOut, %cond_br6.falseOut = hw.instance "cond_br6" @handshake_cond_br_0(condition: %fork6.outs_2: !handshake.channel<i1>, data: %fork5.outs_1: !handshake.channel<i32>, clk: %clk: i1, rst: %rst: i1) -> (trueOut: !handshake.channel<i32>, falseOut: !handshake.channel<i32>)
    hw.instance "sink1" @handshake_sink_0(ins: %cond_br6.trueOut: !handshake.channel<i32>, clk: %clk: i1, rst: %rst: i1) -> ()
    %buffer27.outs = hw.instance "buffer27" @handshake_buffer_4(ins: %cond_br6.falseOut: !handshake.channel<i32>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i32>)
    %buffer28.outs = hw.instance "buffer28" @handshake_buffer_5(ins: %buffer27.outs: !handshake.channel<i32>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i32>)
    %fork7.outs_0, %fork7.outs_1, %fork7.outs_2, %fork7.outs_3, %fork7.outs_4 = hw.instance "fork7" @handshake_fork_6(ins: %buffer28.outs: !handshake.channel<i32>, clk: %clk: i1, rst: %rst: i1) -> (outs_0: !handshake.channel<i32>, outs_1: !handshake.channel<i32>, outs_2: !handshake.channel<i32>, outs_3: !handshake.channel<i32>, outs_4: !handshake.channel<i32>)
    %source0.outs = hw.instance "source0" @handshake_source_0(clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.control<>)
    %constant7.outs = hw.instance "constant7" @handshake_constant_2(ctrl: %source0.outs: !handshake.control<>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i32>)
    %source1.outs = hw.instance "source1" @handshake_source_0(clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.control<>)
    %constant8.outs = hw.instance "constant8" @handshake_constant_3(ctrl: %source1.outs: !handshake.control<>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i32>)
    %mulf0.result = hw.instance "mulf0" @handshake_mulf_0(lhs: %fork7.outs_3: !handshake.channel<i32>, rhs: %fork7.outs_4: !handshake.channel<i32>, clk: %clk: i1, rst: %rst: i1) -> (result: !handshake.channel<i32>)
    %addf0.result = hw.instance "addf0" @handshake_addf_0(lhs: %mulf0.result: !handshake.channel<i32>, rhs: %constant8.outs: !handshake.channel<i32>, clk: %clk: i1, rst: %rst: i1) -> (result: !handshake.channel<i32>)
    %mulf1.result = hw.instance "mulf1" @handshake_mulf_0(lhs: %addf0.result: !handshake.channel<i32>, rhs: %fork7.outs_2: !handshake.channel<i32>, clk: %clk: i1, rst: %rst: i1) -> (result: !handshake.channel<i32>)
    %mulf2.result = hw.instance "mulf2" @handshake_mulf_0(lhs: %mulf1.result: !handshake.channel<i32>, rhs: %fork7.outs_1: !handshake.channel<i32>, clk: %clk: i1, rst: %rst: i1) -> (result: !handshake.channel<i32>)
    %addf1.result = hw.instance "addf1" @handshake_addf_0(lhs: %mulf2.result: !handshake.channel<i32>, rhs: %constant7.outs: !handshake.channel<i32>, clk: %clk: i1, rst: %rst: i1) -> (result: !handshake.channel<i32>)
    %mulf3.result = hw.instance "mulf3" @handshake_mulf_0(lhs: %addf1.result: !handshake.channel<i32>, rhs: %fork7.outs_0: !handshake.channel<i32>, clk: %clk: i1, rst: %rst: i1) -> (result: !handshake.channel<i32>)
    %buffer23.outs = hw.instance "buffer23" @handshake_buffer_0(ins: %cond_br3.falseOut: !handshake.channel<i11>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i11>)
    %buffer24.outs = hw.instance "buffer24" @handshake_buffer_1(ins: %buffer23.outs: !handshake.channel<i11>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i11>)
    %buffer25.outs = hw.instance "buffer25" @handshake_buffer_6(ins: %cond_br4.falseOut: !handshake.channel<i10>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i10>)
    %buffer26.outs = hw.instance "buffer26" @handshake_buffer_7(ins: %buffer25.outs: !handshake.channel<i10>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i10>)
    %buffer34.outs = hw.instance "buffer34" @handshake_buffer_2(ins: %cond_br5.falseOut: !handshake.control<>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.control<>)
    %buffer35.outs = hw.instance "buffer35" @handshake_buffer_3(ins: %buffer34.outs: !handshake.control<>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.control<>)
    %mux1.outs = hw.instance "mux1" @handshake_mux_1(index: %fork8.outs_2: !handshake.channel<i1>, ins_0: %cond_br2.trueOut: !handshake.channel<i32>, ins_1: %mulf3.result: !handshake.channel<i32>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i32>)
    %mux2.outs = hw.instance "mux2" @handshake_mux_0(index: %fork8.outs_1: !handshake.channel<i1>, ins_0: %cond_br3.trueOut: !handshake.channel<i11>, ins_1: %buffer24.outs: !handshake.channel<i11>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i11>)
    %buffer38.outs = hw.instance "buffer38" @handshake_buffer_0(ins: %mux2.outs: !handshake.channel<i11>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i11>)
    %buffer39.outs = hw.instance "buffer39" @handshake_buffer_1(ins: %buffer38.outs: !handshake.channel<i11>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i11>)
    %extsi4.outs = hw.instance "extsi4" @handshake_extsi_1(ins: %buffer39.outs: !handshake.channel<i11>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i12>)
    %mux3.outs = hw.instance "mux3" @handshake_mux_2(index: %fork8.outs_0: !handshake.channel<i1>, ins_0: %cond_br4.trueOut: !handshake.channel<i10>, ins_1: %buffer26.outs: !handshake.channel<i10>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i10>)
    %control_merge2.outs, %control_merge2.index = hw.instance "control_merge2" @handshake_control_merge_0(ins_0: %cond_br5.trueOut: !handshake.control<>, ins_1: %buffer35.outs: !handshake.control<>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.control<>, index: !handshake.channel<i1>)
    %fork8.outs_0, %fork8.outs_1, %fork8.outs_2 = hw.instance "fork8" @handshake_fork_7(ins: %control_merge2.index: !handshake.channel<i1>, clk: %clk: i1, rst: %rst: i1) -> (outs_0: !handshake.channel<i1>, outs_1: !handshake.channel<i1>, outs_2: !handshake.channel<i1>)
    %buffer42.outs = hw.instance "buffer42" @handshake_buffer_2(ins: %control_merge2.outs: !handshake.control<>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.control<>)
    %buffer43.outs = hw.instance "buffer43" @handshake_buffer_3(ins: %buffer42.outs: !handshake.control<>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.control<>)
    %lazy_fork1.outs_0, %lazy_fork1.outs_1 = hw.instance "lazy_fork1" @handshake_lazy_fork_1(ins: %buffer43.outs: !handshake.control<>, clk: %clk: i1, rst: %rst: i1) -> (outs_0: !handshake.control<>, outs_1: !handshake.control<>)
    %source2.outs = hw.instance "source2" @handshake_source_0(clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.control<>)
    %constant1.outs = hw.instance "constant1" @handshake_constant_4(ctrl: %source2.outs: !handshake.control<>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i11>)
    %extsi5.outs = hw.instance "extsi5" @handshake_extsi_1(ins: %constant1.outs: !handshake.channel<i11>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i12>)
    %source3.outs = hw.instance "source3" @handshake_source_0(clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.control<>)
    %constant3.outs = hw.instance "constant3" @handshake_constant_5(ctrl: %source3.outs: !handshake.control<>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i2>)
    %extsi6.outs = hw.instance "extsi6" @handshake_extsi_2(ins: %constant3.outs: !handshake.channel<i2>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i12>)
    %buffer36.outs = hw.instance "buffer36" @handshake_buffer_4(ins: %mux1.outs: !handshake.channel<i32>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i32>)
    %buffer37.outs = hw.instance "buffer37" @handshake_buffer_5(ins: %buffer36.outs: !handshake.channel<i32>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i32>)
    %buffer40.outs = hw.instance "buffer40" @handshake_buffer_6(ins: %mux3.outs: !handshake.channel<i10>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i10>)
    %buffer41.outs = hw.instance "buffer41" @handshake_buffer_7(ins: %buffer40.outs: !handshake.channel<i10>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i10>)
    %store1.addrOut, %store1.dataToMem = hw.instance "store1" @handshake_store_0(addrIn: %buffer41.outs: !handshake.channel<i10>, dataIn: %buffer37.outs: !handshake.channel<i32>, clk: %clk: i1, rst: %rst: i1) -> (addrOut: !handshake.channel<i10>, dataToMem: !handshake.channel<i32>)
    %addi0.result = hw.instance "addi0" @handshake_addi_0(lhs: %extsi4.outs: !handshake.channel<i12>, rhs: %extsi6.outs: !handshake.channel<i12>, clk: %clk: i1, rst: %rst: i1) -> (result: !handshake.channel<i12>)
    %fork9.outs_0, %fork9.outs_1 = hw.instance "fork9" @handshake_fork_8(ins: %addi0.result: !handshake.channel<i12>, clk: %clk: i1, rst: %rst: i1) -> (outs_0: !handshake.channel<i12>, outs_1: !handshake.channel<i12>)
    %trunci3.outs = hw.instance "trunci3" @handshake_trunci_2(ins: %fork9.outs_0: !handshake.channel<i12>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i11>)
    %cmpi0.result = hw.instance "cmpi0" @handshake_cmpi_0(lhs: %fork9.outs_1: !handshake.channel<i12>, rhs: %extsi5.outs: !handshake.channel<i12>, clk: %clk: i1, rst: %rst: i1) -> (result: !handshake.channel<i1>)
    %fork10.outs_0, %fork10.outs_1 = hw.instance "fork10" @handshake_fork_9(ins: %cmpi0.result: !handshake.channel<i1>, clk: %clk: i1, rst: %rst: i1) -> (outs_0: !handshake.channel<i1>, outs_1: !handshake.channel<i1>)
    %cond_br7.trueOut, %cond_br7.falseOut = hw.instance "cond_br7" @handshake_cond_br_1(condition: %fork10.outs_0: !handshake.channel<i1>, data: %trunci3.outs: !handshake.channel<i11>, clk: %clk: i1, rst: %rst: i1) -> (trueOut: !handshake.channel<i11>, falseOut: !handshake.channel<i11>)
    hw.instance "sink3" @handshake_sink_1(ins: %cond_br7.falseOut: !handshake.channel<i11>, clk: %clk: i1, rst: %rst: i1) -> ()
    %buffer47.outs = hw.instance "buffer47" @handshake_buffer_2(ins: %lazy_fork1.outs_1: !handshake.control<>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.control<>)
    %cond_br8.trueOut, %cond_br8.falseOut = hw.instance "cond_br8" @handshake_cond_br_3(condition: %fork10.outs_1: !handshake.channel<i1>, data: %buffer47.outs: !handshake.control<>, clk: %clk: i1, rst: %rst: i1) -> (trueOut: !handshake.control<>, falseOut: !handshake.control<>)
    %buffer52.outs = hw.instance "buffer52" @handshake_buffer_2(ins: %cond_br8.falseOut: !handshake.control<>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.control<>)
    %buffer53.outs = hw.instance "buffer53" @handshake_buffer_3(ins: %buffer52.outs: !handshake.control<>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.control<>)
    %fork11.outs_0, %fork11.outs_1 = hw.instance "fork11" @handshake_fork_10(ins: %buffer53.outs: !handshake.control<>, clk: %clk: i1, rst: %rst: i1) -> (outs_0: !handshake.control<>, outs_1: !handshake.control<>)
    hw.output %lsq1.memEnd, %mem_controller1.memEnd, %fork0.outs_1, %lsq1.loadEn, %lsq1.loadAddr, %lsq1.storeEn, %lsq1.storeAddr, %lsq1.storeData, %mem_controller1.loadEn, %mem_controller1.loadAddr, %mem_controller1.storeEn, %mem_controller1.storeAddr, %mem_controller1.storeData : !handshake.control<>, !handshake.control<>, !handshake.control<>, i1, i10, i1, i10, i32, i1, i10, i1, i10, i32
  }
  hw.module.extern @handshake_fork_0(in %ins : !handshake.control<>, in %clk : i1, in %rst : i1, out outs_0 : !handshake.control<>, out outs_1 : !handshake.control<>, out outs_2 : !handshake.control<>) attributes {hw.name = "handshake.fork", hw.parameters = {DATA_TYPE = !handshake.control<>, SIZE = 3 : ui32}}
  hw.module.extern @handshake_mem_controller_0(in %loadData : i32, in %memStart : !handshake.control<>, in %ldAddr_0 : !handshake.channel<i10>, in %ctrlEnd : !handshake.control<>, in %clk : i1, in %rst : i1, out ldData_0 : !handshake.channel<i32>, out memEnd : !handshake.control<>, out loadEn : i1, out loadAddr : i10, out storeEn : i1, out storeAddr : i10, out storeData : i32) attributes {hw.name = "handshake.mem_controller", hw.parameters = {ADDR_TYPE = !handshake.channel<i10>, DATA_TYPE = !handshake.channel<i32>, NUM_CONTROLS = 0 : ui32, NUM_LOADS = 1 : ui32, NUM_STORES = 0 : ui32}}
  hw.module.extern @handshake_lsq_lsq1(in %loadData : i32, in %memStart : !handshake.control<>, in %ctrl_0 : !handshake.control<>, in %ldAddr_0 : !handshake.channel<i10>, in %ctrl_1 : !handshake.control<>, in %stAddr_0 : !handshake.channel<i10>, in %stData_0 : !handshake.channel<i32>, in %ctrlEnd : !handshake.control<>, in %clk : i1, in %rst : i1, out ldData_0 : !handshake.channel<i32>, out memEnd : !handshake.control<>, out loadEn : i1, out loadAddr : i10, out storeEn : i1, out storeAddr : i10, out storeData : i32) attributes {hw.name = "handshake.lsq", hw.parameters = {addrWidth = 10 : ui32, bufferDepth = 0 : ui32, dataWidth = 32 : ui32, fifoDepth = 16 : ui32, fifoDepth_L = 16 : ui32, fifoDepth_S = 16 : ui32, groupMulti = 0 : ui32, headLagEn = 0 : ui32, indexWidth = 4 : ui32, ldOrder = [[0 : i32], [0 : i32]], ldPortIdx = [[0 : i32], [0 : i32]], loadOffsets = [[0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32], [0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32]], loadPorts = [[0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32], [0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32]], master = true, name = "handshake_lsq_lsq1", numBBs = 2 : ui32, numLdChannels = 1 : ui32, numLoadPorts = 1 : ui32, numLoads = [1 : i32, 0 : i32], numStChannels = 1 : ui32, numStorePorts = 1 : ui32, numStores = [0 : i32, 1 : i32], pipe0En = 0 : ui32, pipe1En = 0 : ui32, pipeCompEn = 0 : ui32, stPortIdx = [[0 : i32], [0 : i32]], stResp = 0 : ui32, storeOffsets = [[0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32], [0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32]], storePorts = [[0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32], [0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32, 0 : i32]]}}
  hw.module.extern @handshake_constant_0(in %ctrl : !handshake.control<>, in %clk : i1, in %rst : i1, out outs : !handshake.channel<i1>) attributes {hw.name = "handshake.constant", hw.parameters = {DATA_WIDTH = 1 : ui32, VALUE = "0"}}
  hw.module.extern @handshake_extsi_0(in %ins : !handshake.channel<i1>, in %clk : i1, in %rst : i1, out outs : !handshake.channel<i11>) attributes {hw.name = "handshake.extsi", hw.parameters = {INPUT_TYPE = !handshake.channel<i1>, OUTPUT_TYPE = !handshake.channel<i11>}}
  hw.module.extern @handshake_mux_0(in %index : !handshake.channel<i1>, in %ins_0 : !handshake.channel<i11>, in %ins_1 : !handshake.channel<i11>, in %clk : i1, in %rst : i1, out outs : !handshake.channel<i11>) attributes {hw.name = "handshake.mux", hw.parameters = {DATA_TYPE = !handshake.channel<i11>, SELECT_TYPE = !handshake.channel<i1>, SIZE = 2 : ui32}}
  hw.module.extern @handshake_buffer_0(in %ins : !handshake.channel<i11>, in %clk : i1, in %rst : i1, out outs : !handshake.channel<i11>) attributes {hw.name = "handshake.buffer", hw.parameters = {DATA_TYPE = !handshake.channel<i11>, NUM_SLOTS = 1 : ui32, TIMING = #handshake<timing {D: 1, V: 1, R: 0}>}}
  hw.module.extern @handshake_buffer_1(in %ins : !handshake.channel<i11>, in %clk : i1, in %rst : i1, out outs : !handshake.channel<i11>) attributes {hw.name = "handshake.buffer", hw.parameters = {DATA_TYPE = !handshake.channel<i11>, NUM_SLOTS = 1 : ui32, TIMING = #handshake<timing {R: 1}>}}
  hw.module.extern @handshake_fork_1(in %ins : !handshake.channel<i11>, in %clk : i1, in %rst : i1, out outs_0 : !handshake.channel<i11>, out outs_1 : !handshake.channel<i11>) attributes {hw.name = "handshake.fork", hw.parameters = {DATA_TYPE = !handshake.channel<i11>, SIZE = 2 : ui32}}
  hw.module.extern @handshake_trunci_0(in %ins : !handshake.channel<i11>, in %clk : i1, in %rst : i1, out outs : !handshake.channel<i10>) attributes {hw.name = "handshake.trunci", hw.parameters = {INPUT_TYPE = !handshake.channel<i11>, OUTPUT_TYPE = !handshake.channel<i10>}}
  hw.module.extern @handshake_control_merge_0(in %ins_0 : !handshake.control<>, in %ins_1 : !handshake.control<>, in %clk : i1, in %rst : i1, out outs : !handshake.control<>, out index : !handshake.channel<i1>) attributes {hw.name = "handshake.control_merge", hw.parameters = {DATA_TYPE = !handshake.control<>, INDEX_TYPE = !handshake.channel<i1>, SIZE = 2 : ui32}}
  hw.module.extern @handshake_buffer_2(in %ins : !handshake.control<>, in %clk : i1, in %rst : i1, out outs : !handshake.control<>) attributes {hw.name = "handshake.buffer", hw.parameters = {DATA_TYPE = !handshake.control<>, NUM_SLOTS = 1 : ui32, TIMING = #handshake<timing {D: 1, V: 1, R: 0}>}}
  hw.module.extern @handshake_buffer_3(in %ins : !handshake.control<>, in %clk : i1, in %rst : i1, out outs : !handshake.control<>) attributes {hw.name = "handshake.buffer", hw.parameters = {DATA_TYPE = !handshake.control<>, NUM_SLOTS = 1 : ui32, TIMING = #handshake<timing {R: 1}>}}
  hw.module.extern @handshake_lazy_fork_0(in %ins : !handshake.control<>, in %clk : i1, in %rst : i1, out outs_0 : !handshake.control<>, out outs_1 : !handshake.control<>, out outs_2 : !handshake.control<>) attributes {hw.name = "handshake.lazy_fork", hw.parameters = {DATA_TYPE = !handshake.control<>, SIZE = 3 : ui32}}
  hw.module.extern @handshake_fork_2(in %ins : !handshake.control<>, in %clk : i1, in %rst : i1, out outs_0 : !handshake.control<>) attributes {hw.name = "handshake.fork", hw.parameters = {DATA_TYPE = !handshake.control<>, SIZE = 1 : ui32}}
  hw.module.extern @handshake_constant_1(in %ctrl : !handshake.control<>, in %clk : i1, in %rst : i1, out outs : !handshake.channel<i32>) attributes {hw.name = "handshake.constant", hw.parameters = {DATA_WIDTH = 32 : ui32, VALUE = "00111111100000000000000000000000"}}
  hw.module.extern @handshake_fork_3(in %ins : !handshake.channel<i32>, in %clk : i1, in %rst : i1, out outs_0 : !handshake.channel<i32>, out outs_1 : !handshake.channel<i32>) attributes {hw.name = "handshake.fork", hw.parameters = {DATA_TYPE = !handshake.channel<f32>, SIZE = 2 : ui32}}
  hw.module.extern @handshake_load_0(in %addrIn : !handshake.channel<i10>, in %dataFromMem : !handshake.channel<i32>, in %clk : i1, in %rst : i1, out addrOut : !handshake.channel<i10>, out dataOut : !handshake.channel<i32>) attributes {hw.name = "handshake.load", hw.parameters = {ADDR_TYPE = !handshake.channel<i10>, DATA_TYPE = !handshake.channel<i32>}}
  hw.module.extern @handshake_fork_4(in %ins : !handshake.channel<i32>, in %clk : i1, in %rst : i1, out outs_0 : !handshake.channel<i32>, out outs_1 : !handshake.channel<i32>) attributes {hw.name = "handshake.fork", hw.parameters = {DATA_TYPE = !handshake.channel<i32>, SIZE = 2 : ui32}}
  hw.module.extern @handshake_trunci_1(in %ins : !handshake.channel<i32>, in %clk : i1, in %rst : i1, out outs : !handshake.channel<i10>) attributes {hw.name = "handshake.trunci", hw.parameters = {INPUT_TYPE = !handshake.channel<i32>, OUTPUT_TYPE = !handshake.channel<i10>}}
  hw.module.extern @handshake_load_1(in %addrIn : !handshake.channel<i10>, in %dataFromMem : !handshake.channel<i32>, in %clk : i1, in %rst : i1, out addrOut : !handshake.channel<i10>, out dataOut : !handshake.channel<i32>) attributes {hw.name = "handshake.load", hw.parameters = {ADDR_TYPE = !handshake.channel<i10>, DATA_TYPE = !handshake.channel<f32>}}
  hw.module.extern @handshake_cmpf_0(in %lhs : !handshake.channel<i32>, in %rhs : !handshake.channel<i32>, in %clk : i1, in %rst : i1, out result : !handshake.channel<i1>) attributes {hw.name = "handshake.cmpf", hw.parameters = {DATA_TYPE = !handshake.channel<f32>, PREDICATE = "oge"}}
  hw.module.extern @handshake_fork_5(in %ins : !handshake.channel<i1>, in %clk : i1, in %rst : i1, out outs_0 : !handshake.channel<i1>, out outs_1 : !handshake.channel<i1>, out outs_2 : !handshake.channel<i1>, out outs_3 : !handshake.channel<i1>, out outs_4 : !handshake.channel<i1>) attributes {hw.name = "handshake.fork", hw.parameters = {DATA_TYPE = !handshake.channel<i1>, SIZE = 5 : ui32}}
  hw.module.extern @handshake_cond_br_0(in %condition : !handshake.channel<i1>, in %data : !handshake.channel<i32>, in %clk : i1, in %rst : i1, out trueOut : !handshake.channel<i32>, out falseOut : !handshake.channel<i32>) attributes {hw.name = "handshake.cond_br", hw.parameters = {DATA_TYPE = !handshake.channel<f32>}}
  hw.module.extern @handshake_sink_0(in %ins : !handshake.channel<i32>, in %clk : i1, in %rst : i1) attributes {hw.name = "handshake.sink", hw.parameters = {DATA_TYPE = !handshake.channel<f32>}}
  hw.module.extern @handshake_cond_br_1(in %condition : !handshake.channel<i1>, in %data : !handshake.channel<i11>, in %clk : i1, in %rst : i1, out trueOut : !handshake.channel<i11>, out falseOut : !handshake.channel<i11>) attributes {hw.name = "handshake.cond_br", hw.parameters = {DATA_TYPE = !handshake.channel<i11>}}
  hw.module.extern @handshake_cond_br_2(in %condition : !handshake.channel<i1>, in %data : !handshake.channel<i10>, in %clk : i1, in %rst : i1, out trueOut : !handshake.channel<i10>, out falseOut : !handshake.channel<i10>) attributes {hw.name = "handshake.cond_br", hw.parameters = {DATA_TYPE = !handshake.channel<i10>}}
  hw.module.extern @handshake_cond_br_3(in %condition : !handshake.channel<i1>, in %data : !handshake.control<>, in %clk : i1, in %rst : i1, out trueOut : !handshake.control<>, out falseOut : !handshake.control<>) attributes {hw.name = "handshake.cond_br", hw.parameters = {DATA_TYPE = !handshake.control<>}}
  hw.module.extern @handshake_buffer_4(in %ins : !handshake.channel<i32>, in %clk : i1, in %rst : i1, out outs : !handshake.channel<i32>) attributes {hw.name = "handshake.buffer", hw.parameters = {DATA_TYPE = !handshake.channel<f32>, NUM_SLOTS = 1 : ui32, TIMING = #handshake<timing {D: 1, V: 1, R: 0}>}}
  hw.module.extern @handshake_buffer_5(in %ins : !handshake.channel<i32>, in %clk : i1, in %rst : i1, out outs : !handshake.channel<i32>) attributes {hw.name = "handshake.buffer", hw.parameters = {DATA_TYPE = !handshake.channel<f32>, NUM_SLOTS = 1 : ui32, TIMING = #handshake<timing {R: 1}>}}
  hw.module.extern @handshake_fork_6(in %ins : !handshake.channel<i32>, in %clk : i1, in %rst : i1, out outs_0 : !handshake.channel<i32>, out outs_1 : !handshake.channel<i32>, out outs_2 : !handshake.channel<i32>, out outs_3 : !handshake.channel<i32>, out outs_4 : !handshake.channel<i32>) attributes {hw.name = "handshake.fork", hw.parameters = {DATA_TYPE = !handshake.channel<f32>, SIZE = 5 : ui32}}
  hw.module.extern @handshake_source_0(in %clk : i1, in %rst : i1, out outs : !handshake.control<>) attributes {hw.name = "handshake.source", hw.parameters = {}}
  hw.module.extern @handshake_constant_2(in %ctrl : !handshake.control<>, in %clk : i1, in %rst : i1, out outs : !handshake.channel<i32>) attributes {hw.name = "handshake.constant", hw.parameters = {DATA_WIDTH = 32 : ui32, VALUE = "01000000011011010001101011010010"}}
  hw.module.extern @handshake_constant_3(in %ctrl : !handshake.control<>, in %clk : i1, in %rst : i1, out outs : !handshake.channel<i32>) attributes {hw.name = "handshake.constant", hw.parameters = {DATA_WIDTH = 32 : ui32, VALUE = "01000001100111000011000011000011"}}
  hw.module.extern @handshake_mulf_0(in %lhs : !handshake.channel<i32>, in %rhs : !handshake.channel<i32>, in %clk : i1, in %rst : i1, out result : !handshake.channel<i32>) attributes {hw.name = "handshake.mulf", hw.parameters = {DATA_TYPE = !handshake.channel<f32>}}
  hw.module.extern @handshake_addf_0(in %lhs : !handshake.channel<i32>, in %rhs : !handshake.channel<i32>, in %clk : i1, in %rst : i1, out result : !handshake.channel<i32>) attributes {hw.name = "handshake.addf", hw.parameters = {DATA_TYPE = !handshake.channel<f32>}}
  hw.module.extern @handshake_buffer_6(in %ins : !handshake.channel<i10>, in %clk : i1, in %rst : i1, out outs : !handshake.channel<i10>) attributes {hw.name = "handshake.buffer", hw.parameters = {DATA_TYPE = !handshake.channel<i10>, NUM_SLOTS = 1 : ui32, TIMING = #handshake<timing {D: 1, V: 1, R: 0}>}}
  hw.module.extern @handshake_buffer_7(in %ins : !handshake.channel<i10>, in %clk : i1, in %rst : i1, out outs : !handshake.channel<i10>) attributes {hw.name = "handshake.buffer", hw.parameters = {DATA_TYPE = !handshake.channel<i10>, NUM_SLOTS = 1 : ui32, TIMING = #handshake<timing {R: 1}>}}
  hw.module.extern @handshake_mux_1(in %index : !handshake.channel<i1>, in %ins_0 : !handshake.channel<i32>, in %ins_1 : !handshake.channel<i32>, in %clk : i1, in %rst : i1, out outs : !handshake.channel<i32>) attributes {hw.name = "handshake.mux", hw.parameters = {DATA_TYPE = !handshake.channel<f32>, SELECT_TYPE = !handshake.channel<i1>, SIZE = 2 : ui32}}
  hw.module.extern @handshake_extsi_1(in %ins : !handshake.channel<i11>, in %clk : i1, in %rst : i1, out outs : !handshake.channel<i12>) attributes {hw.name = "handshake.extsi", hw.parameters = {INPUT_TYPE = !handshake.channel<i11>, OUTPUT_TYPE = !handshake.channel<i12>}}
  hw.module.extern @handshake_mux_2(in %index : !handshake.channel<i1>, in %ins_0 : !handshake.channel<i10>, in %ins_1 : !handshake.channel<i10>, in %clk : i1, in %rst : i1, out outs : !handshake.channel<i10>) attributes {hw.name = "handshake.mux", hw.parameters = {DATA_TYPE = !handshake.channel<i10>, SELECT_TYPE = !handshake.channel<i1>, SIZE = 2 : ui32}}
  hw.module.extern @handshake_fork_7(in %ins : !handshake.channel<i1>, in %clk : i1, in %rst : i1, out outs_0 : !handshake.channel<i1>, out outs_1 : !handshake.channel<i1>, out outs_2 : !handshake.channel<i1>) attributes {hw.name = "handshake.fork", hw.parameters = {DATA_TYPE = !handshake.channel<i1>, SIZE = 3 : ui32}}
  hw.module.extern @handshake_lazy_fork_1(in %ins : !handshake.control<>, in %clk : i1, in %rst : i1, out outs_0 : !handshake.control<>, out outs_1 : !handshake.control<>) attributes {hw.name = "handshake.lazy_fork", hw.parameters = {DATA_TYPE = !handshake.control<>, SIZE = 2 : ui32}}
  hw.module.extern @handshake_constant_4(in %ctrl : !handshake.control<>, in %clk : i1, in %rst : i1, out outs : !handshake.channel<i11>) attributes {hw.name = "handshake.constant", hw.parameters = {DATA_WIDTH = 11 : ui32, VALUE = "01111101000"}}
  hw.module.extern @handshake_constant_5(in %ctrl : !handshake.control<>, in %clk : i1, in %rst : i1, out outs : !handshake.channel<i2>) attributes {hw.name = "handshake.constant", hw.parameters = {DATA_WIDTH = 2 : ui32, VALUE = "01"}}
  hw.module.extern @handshake_extsi_2(in %ins : !handshake.channel<i2>, in %clk : i1, in %rst : i1, out outs : !handshake.channel<i12>) attributes {hw.name = "handshake.extsi", hw.parameters = {INPUT_TYPE = !handshake.channel<i2>, OUTPUT_TYPE = !handshake.channel<i12>}}
  hw.module.extern @handshake_store_0(in %addrIn : !handshake.channel<i10>, in %dataIn : !handshake.channel<i32>, in %clk : i1, in %rst : i1, out addrOut : !handshake.channel<i10>, out dataToMem : !handshake.channel<i32>) attributes {hw.name = "handshake.store", hw.parameters = {ADDR_TYPE = !handshake.channel<i10>, DATA_TYPE = !handshake.channel<f32>}}
  hw.module.extern @handshake_addi_0(in %lhs : !handshake.channel<i12>, in %rhs : !handshake.channel<i12>, in %clk : i1, in %rst : i1, out result : !handshake.channel<i12>) attributes {hw.name = "handshake.addi", hw.parameters = {DATA_TYPE = !handshake.channel<i12>}}
  hw.module.extern @handshake_fork_8(in %ins : !handshake.channel<i12>, in %clk : i1, in %rst : i1, out outs_0 : !handshake.channel<i12>, out outs_1 : !handshake.channel<i12>) attributes {hw.name = "handshake.fork", hw.parameters = {DATA_TYPE = !handshake.channel<i12>, SIZE = 2 : ui32}}
  hw.module.extern @handshake_trunci_2(in %ins : !handshake.channel<i12>, in %clk : i1, in %rst : i1, out outs : !handshake.channel<i11>) attributes {hw.name = "handshake.trunci", hw.parameters = {INPUT_TYPE = !handshake.channel<i12>, OUTPUT_TYPE = !handshake.channel<i11>}}
  hw.module.extern @handshake_cmpi_0(in %lhs : !handshake.channel<i12>, in %rhs : !handshake.channel<i12>, in %clk : i1, in %rst : i1, out result : !handshake.channel<i1>) attributes {hw.name = "handshake.cmpi", hw.parameters = {DATA_TYPE = !handshake.channel<i12>, PREDICATE = "ult"}}
  hw.module.extern @handshake_fork_9(in %ins : !handshake.channel<i1>, in %clk : i1, in %rst : i1, out outs_0 : !handshake.channel<i1>, out outs_1 : !handshake.channel<i1>) attributes {hw.name = "handshake.fork", hw.parameters = {DATA_TYPE = !handshake.channel<i1>, SIZE = 2 : ui32}}
  hw.module.extern @handshake_sink_1(in %ins : !handshake.channel<i11>, in %clk : i1, in %rst : i1) attributes {hw.name = "handshake.sink", hw.parameters = {DATA_TYPE = !handshake.channel<i11>}}
  hw.module.extern @handshake_fork_10(in %ins : !handshake.control<>, in %clk : i1, in %rst : i1, out outs_0 : !handshake.control<>, out outs_1 : !handshake.control<>) attributes {hw.name = "handshake.fork", hw.parameters = {DATA_TYPE = !handshake.control<>, SIZE = 2 : ui32}}
  hw.module.extern @mem_to_bram_32_10(in %loadEn : i1, in %loadAddr : i10, in %storeEn : i1, in %storeAddr : i10, in %storeData : i32, in %din0 : i32, in %din1 : i32, out ce0 : i1, out we0 : i1, out address0 : i10, out dout0 : i32, out ce1 : i1, out we1 : i1, out address1 : i10, out dout1 : i32, out loadData : i32) attributes {hw.name = "mem_to_bram", hw.parameters = {ADDR_WIDTH = 10 : ui32, DATA_WIDTH = 32 : ui32}}
  hw.module @get_tanh_wrapper(in %A_din0 : i32, in %A_din1 : i32, in %addr_din0 : i32, in %addr_din1 : i32, in %A_start : !handshake.control<>, in %addr_start : !handshake.control<>, in %start : !handshake.control<>, in %clk : i1, in %rst : i1, out A_end : !handshake.control<>, out addr_end : !handshake.control<>, out end : !handshake.control<>, out A_ce0 : i1, out A_we0 : i1, out A_address0 : i10, out A_dout0 : i32, out A_ce1 : i1, out A_we1 : i1, out A_address1 : i10, out A_dout1 : i32, out addr_ce0 : i1, out addr_we0 : i1, out addr_address0 : i10, out addr_dout0 : i32, out addr_ce1 : i1, out addr_we1 : i1, out addr_address1 : i10, out addr_dout1 : i32) {
    %mem_to_bram_converter_A.ce0, %mem_to_bram_converter_A.we0, %mem_to_bram_converter_A.address0, %mem_to_bram_converter_A.dout0, %mem_to_bram_converter_A.ce1, %mem_to_bram_converter_A.we1, %mem_to_bram_converter_A.address1, %mem_to_bram_converter_A.dout1, %mem_to_bram_converter_A.loadData = hw.instance "mem_to_bram_converter_A" @mem_to_bram_32_10(loadEn: %get_tanh_wrapped.A_loadEn: i1, loadAddr: %get_tanh_wrapped.A_loadAddr: i10, storeEn: %get_tanh_wrapped.A_storeEn: i1, storeAddr: %get_tanh_wrapped.A_storeAddr: i10, storeData: %get_tanh_wrapped.A_storeData: i32, din0: %A_din0: i32, din1: %A_din1: i32) -> (ce0: i1, we0: i1, address0: i10, dout0: i32, ce1: i1, we1: i1, address1: i10, dout1: i32, loadData: i32)
    %mem_to_bram_converter_addr.ce0, %mem_to_bram_converter_addr.we0, %mem_to_bram_converter_addr.address0, %mem_to_bram_converter_addr.dout0, %mem_to_bram_converter_addr.ce1, %mem_to_bram_converter_addr.we1, %mem_to_bram_converter_addr.address1, %mem_to_bram_converter_addr.dout1, %mem_to_bram_converter_addr.loadData = hw.instance "mem_to_bram_converter_addr" @mem_to_bram_32_10(loadEn: %get_tanh_wrapped.addr_loadEn: i1, loadAddr: %get_tanh_wrapped.addr_loadAddr: i10, storeEn: %get_tanh_wrapped.addr_storeEn: i1, storeAddr: %get_tanh_wrapped.addr_storeAddr: i10, storeData: %get_tanh_wrapped.addr_storeData: i32, din0: %addr_din0: i32, din1: %addr_din1: i32) -> (ce0: i1, we0: i1, address0: i10, dout0: i32, ce1: i1, we1: i1, address1: i10, dout1: i32, loadData: i32)
    %get_tanh_wrapped.A_end, %get_tanh_wrapped.addr_end, %get_tanh_wrapped.end, %get_tanh_wrapped.A_loadEn, %get_tanh_wrapped.A_loadAddr, %get_tanh_wrapped.A_storeEn, %get_tanh_wrapped.A_storeAddr, %get_tanh_wrapped.A_storeData, %get_tanh_wrapped.addr_loadEn, %get_tanh_wrapped.addr_loadAddr, %get_tanh_wrapped.addr_storeEn, %get_tanh_wrapped.addr_storeAddr, %get_tanh_wrapped.addr_storeData = hw.instance "get_tanh_wrapped" @get_tanh(A_loadData: %mem_to_bram_converter_A.loadData: i32, addr_loadData: %mem_to_bram_converter_addr.loadData: i32, A_start: %A_start: !handshake.control<>, addr_start: %addr_start: !handshake.control<>, start: %start: !handshake.control<>, clk: %clk: i1, rst: %rst: i1) -> (A_end: !handshake.control<>, addr_end: !handshake.control<>, end: !handshake.control<>, A_loadEn: i1, A_loadAddr: i10, A_storeEn: i1, A_storeAddr: i10, A_storeData: i32, addr_loadEn: i1, addr_loadAddr: i10, addr_storeEn: i1, addr_storeAddr: i10, addr_storeData: i32)
    hw.output %get_tanh_wrapped.A_end, %get_tanh_wrapped.addr_end, %get_tanh_wrapped.end, %mem_to_bram_converter_A.ce0, %mem_to_bram_converter_A.we0, %mem_to_bram_converter_A.address0, %mem_to_bram_converter_A.dout0, %mem_to_bram_converter_A.ce1, %mem_to_bram_converter_A.we1, %mem_to_bram_converter_A.address1, %mem_to_bram_converter_A.dout1, %mem_to_bram_converter_addr.ce0, %mem_to_bram_converter_addr.we0, %mem_to_bram_converter_addr.address0, %mem_to_bram_converter_addr.dout0, %mem_to_bram_converter_addr.ce1, %mem_to_bram_converter_addr.we1, %mem_to_bram_converter_addr.address1, %mem_to_bram_converter_addr.dout1 : !handshake.control<>, !handshake.control<>, !handshake.control<>, i1, i1, i10, i32, i1, i1, i10, i32, i1, i1, i10, i32, i1, i1, i10, i32
  }
}

